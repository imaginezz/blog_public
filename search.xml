<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>21岁的你在过怎样的生活|来自知乎</title>
    <url>/21_year_old_life/</url>
    <content><![CDATA[<p>作者：政子 链接：<a href="https://www.zhihu.com/question/34782710/answer/61497364">https://www.zhihu.com/question/34782710/answer/61497364</a> 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
<p>留名，21 岁时候再来回答。 —————- 2016/5/3 晚更 笔者现在 21.041 岁，前来作答。</p>
<p>终于在 21 岁等到了 Vae 的新歌，听说明天 MV 也会发布，想想还有些小激动呢。 从前只觉的日子过得太快，什么都没做时间就匆匆地走掉，再也不回头。到了现在，我已经学会了如何去做一些能让时间变慢的事情——一些自己认为有意义，同往常不一样，可以回忆起的事儿。</p>
<p>之前和建峰谈起，提到五月天的一首《有些事现在不做一辈子都不会做了》，就忆起这是我高中时的每日必听，没有这首歌，我可能坚持不到现在。所以，所谓的有些事，就是我认为有意义的，与平日所为不同的事情吧。</p>
<p>现在为人为事较之从前更随心了许多，少了目的性，遇事去做多见有趣，这个转变是我未曾预料到的，生活是有趣了许多。</p>
<p>距离自己上次回答 19 岁生活的问题只是过去了一年多一点，年纪却长了两岁，也是有趣。之前深爱的心理和哲学几乎都被我弄丢了。每天只剩下可怜的很少时间去思考，收获却不比之前少。减肥有了一些初步效果，虽然我自己还没啥感觉。关于脸红的事儿呢，嗯，听我讲话的人越多，我就越不会脸红。依旧单身，但是比那时候心平气和了许多，毕竟好不容易接受了这种状态，也好。</p>
<span id="more"></span>

<p>手下的活儿呢，是基本放下电烙铁，再也离不开键盘了。代码比之前多写了不少，水平没啥长进，但收获了几位好朋友，好队友，我满足了。</p>
<p>还有，我选择了考研，因为各种原因，主要也是随心。也提前去了实验室，气氛还好，希望我能考上。</p>
<p>求之不得，求之既得，唯心而已。</p>
<p>不多希望什么，不多奢求什么，过好每一天。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>来自知乎</tag>
      </tags>
  </entry>
  <entry>
    <title>人类简史——我们只不过是沧海一粟</title>
    <url>/a_brief_history_of_mankind_is_a_drop_in_the_ocean/</url>
    <content><![CDATA[<h1 id="相遇"><a href="#相遇" class="headerlink" title="相遇"></a>相遇</h1><p>最近被安利了多次“简史”类的书。很可能是因为厚本的史书已经成为了人文学院们书架上的“过时货”，而简史正成为一种更好的“快速消费”。毕竟入乡就需要随俗，那最近索性就来读一读简史类的书籍。而所读的第一本简史（如果不算《时间简史》的话）就选最近被盛誉无数的《人类简史》吧。</p>
<h1 id="诶，我们是不是在哪见过"><a href="#诶，我们是不是在哪见过" class="headerlink" title="诶，我们是不是在哪见过"></a>诶，我们是不是在哪见过</h1><p>开始概览的时候，书中的观点并没有给我带来多少惊喜或者让我难以接受的地方，多数观点我都曾见识过。</p>
<p>比如——被进化论支配的人类其实就是一个和猩猩差不多的物种，甚至和我们最恨的老鼠都有八成相似，而且我们在进化的齿轮中也似乎只有因果而没有目的！这些观点在学习中学生物和初读《自私的基因》的时候大都已经遇见，由此我也相信作者本人是一个博览群书并博得众长的意见传播者。又如，文化寄生的说法，我也在之前的《失控》中有遇见过。而之前在哲学通识课中，了解到了语言之于社会的重要性，而“人们所谓的意义都只是存在于自己的故事中”可能是抄写某个名人名言的时候遇到的“意义之网”之类的只言片语。对于 150 人理论呢，貌似是复杂网络的一些书里有提到过。</p>
<span id="more"></span>

<p>不过作者自有厉害之处，他居然可以把如此多的观点都融合进入他自己的这一套理论中。这也印证了社会物理学的一个观点：最厉害最有价值的可能不是观点的产生节点，而是将观点传播出去的节点。</p>
<h1 id="全书脉络"><a href="#全书脉络" class="headerlink" title="全书脉络"></a>全书脉络</h1><p>全书的脉络很清晰，从远古人类，到认知革命，再到农业革命，接着是全球化，进而是科学革命，最后是未来。</p>
<p>大概全书是从“人类很普通”开始讲起。在 DNA 上我们并没有太多优势，在当年许多的不同的人种里，我们的优势也就只剩下比较爱 YY 爱八卦。就是因为这点微小的差别，让我们和其他生物区别开来，甚至构建起了所有人类共同想象的一个大社会，成了地球上的霸主（确定霸主不是我们自己想象出来的？）</p>
<p>随着会使用火，又学会了种植，我们逐渐的开始定居，产生了农业革命。又因为我们的好奇心，让整个地球的人类开始走上了互坑的道路，直到近代，虽然我们遗传上来说并没有太多不同，但是依旧有一条很成体系的鄙视链。当然，这个鄙视链把我们带向了全球化。这时候，我们人类的自然认知协作能力已经到了极限，所以必须要有一种被大家共同相信的东西来让整个世界里的人类协作起来，于是有了金钱，之后因为科学主义的诞生，让我们相信未来的世界会变得更好，所以由此诞生了资本主义。最后文章讨论了一下未来（开始想象人工智能）和幸福（倒不如写一些积极心理学），不过并没有太出彩的地方。</p>
<h1 id="有意思的片段"><a href="#有意思的片段" class="headerlink" title="有意思的片段"></a>有意思的片段</h1><p>作者用了许多示例来阐释人类讲故事和编写故事的能力。</p>
<p>从远古图腾到近代的宗教，都是由于人们共同相信某种超自然的存在而让不熟悉的人们团结在一起。特别是作者介绍宗教脉络的章节很符合我的胃口，从泛神论到多神论再到一神论，以至于最后的二元论和非神论都有涉及，并且很清晰地整理出了其中的脉络。</p>
<p>不仅仅如此，我们的帝国和法律，甚至连货币也都是共同想象的产物，因为我们相信，所以才会存在。虽然是超越的存在，但在我们的大脑里，却是如此的真实。而我们现在也正要把这种超越的存在（不知是不是可以用层层隐喻来解释这个体系），变成像我们这样的现实存在。</p>
<p>我们的资本主义/人本主义/人文主义/社会主义，不也是如此？正因为我们都相信，所以才会存在。我们现在所享有的这一切，并不是应该有的，而是在无数先烈英杰们的伟大思想和流血牺牲中才逐渐让大家都相信和接受的。虽然这些都是超越而抽象的存在，但对于我们人类是多么的重要，这一切是多么的真实。</p>
<p>另一个有意思的地方是作者关于历史的论述。</p>
<p>历史上的每一个时间点，都像是一个十字路口。虽然从过去到现在已经只剩单行道，但到未来却有无数岔路可走。其中某些路比较宽、比较平坦，路标比较明确，所以也是比较可能的选择。然而，历史有时候就是选了一些完全出人意表的道路。</p>
<p>乔布斯也说过类似的话，他说之前学过的看似无用的课程（譬如他学习关于字体的课程）就像一颗颗散落的珍珠一样，到了后来，才会逐渐发现原来有一条线，可以将他们一一串起，变成一整条珍珠项链。这句话我也经常转述给他人。</p>
<h1 id="提问时间"><a href="#提问时间" class="headerlink" title="提问时间"></a>提问时间</h1><p>作者的理论对于艺术没有一个很好的解释，为何人们对于艺术作品（多数也是超越之物）可以产生愉悦感，而这和历史有什么关系？莫非艺术也源于人们的共同向想，但是我们并不是相信或者喜欢艺术作品里的某个故事，只是有一种说不出的赏心悦目呀？</p>
<p>另外一个问题就是关于自由和平等互斥的论述，我觉得不能接受。我认为的自由指的是社会意义上自由，如孟子所言“随心所欲而不逾矩”，而平等在我眼里也并不等于平均。虽说这两者很难同时得兼，但也并不存在可以拿得出说的矛盾之处。所以矛盾之处到底在哪里呢？</p>
<p>最后一个疑问是这本书作为一个商业读物，是不是并不会非常客观地描述所有观点，而有所取舍地使用一些观点来提升销量？对于同样的事实，解释的理论不同，得到的结论可能会大相径庭，作者会不会隐藏掉了许多更加合理解释？在全文，没有见到作者对人类（哪怕是自己）先天观点的分析。在最后作者关于幸福心理的论述中更给我一种他希望紧扣时代心理成为畅销书而强行加入内容的感觉。所以，到底有多少观点和他的观点是相对或者相反？这需要做更大量的类比阅读，才会有答案。</p>
<h1 id="向混沌致敬"><a href="#向混沌致敬" class="headerlink" title="向混沌致敬"></a>向混沌致敬</h1><p>我们从哪来，到哪去？为何而来，为何而去？虽然我们使用人类特有的想象赋予我们的世界以意义，但是这些关于意义最根本的问题我们可能眼前只有一片混沌，永远也无法回答。可能是因为我们本身的局限（我虽然很小心，但还在这里用了“因为”二字，然而我们这个世界真的是具有因果关系的么？这无法确实——休谟问题一），就比如刚刚因为“因为”二字所起的疑惑。大概是我们大脑的先天因素造成的整个局限，我们并不能用我们的知识体系解决一切问题。所以，现代的科学主义所认为的进步真的会是无穷的么？而进步的具体定义又是什么？就算有人给出了定义，那我们把它们放在范畴中讨论就真的合适么？</p>
<p>这一系列的问题，答案可能都是混沌。</p>
<p>所以，为何要被这么多的意义捆绑？为什么事事都要争先恐后？ 不如骑一辆小黄车，去奥森公园呼吸一下春天的空气，然后再饱餐一顿？ @在没有微软的纯洁世界里 的全体成员，走起！</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=418602453&auto=1&height=66"></iframe>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>人类简史</tag>
        <tag>混沌</tag>
        <tag>简史</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>简谈C++中指针与引用的底层实现</title>
    <url>/a_brief_talk_about_pointer_and_reference/</url>
    <content><![CDATA[<p>引用是C++相对于C而引入的一个重要特性，它使得许多地方的语法变得更加简洁，但是它们的底层究竟是怎么实现的呢？</p>
<p>在Wikipedia中，对指针有如下介绍：</p>
<blockquote>
<p>In computer science, a pointer is a programming language object that stores the memory address of another value located in computer memory. A pointer references a location in memory, and obtaining the value stored at that location is known as dereferencing the pointer.</p>
</blockquote>
<p>从定义可以看出，指针从本质上来讲就是一个变量，其中所存储的就是其他变量的地址。 而C语言中的指针非常灵活，它可以任意指向某一个地址，不论这个地址究竟是否存在，或它究竟存储的是否为指针所代表类型的数据。</p>
<p>那么也不难想到，指针在实现的时候也是内存里的一个变量，它存有其他变量的地址。</p>
<p>在Wikipedia中，对引用有如下介绍：</p>
<blockquote>
<p>In computer science, a reference is a value that enables a program to indirectly access a particular datum, such as a variable’s value or a record, in the computer’s memory or in some other storage device. The reference is said to refer to the datum, and accessing the datum is called dereferencing the reference.</p>
<p>In the C++ programming language, a reference is a simple reference datatype that is less powerful but safer than the pointer type inherited from C. The name C++ reference may cause confusion, as in computer science a reference is a general concept datatype, with pointers and C++ references being specific reference datatype implementations. The definition of a reference in C++ is such that it does not need to exist. It can be implemented as a new name for an existing object (similar to rename keyword in Ada). </p>
</blockquote>
<p>从上面的定义可以看出，在C++中，引用可以狭义地认为是某一个变量的别名，它本身是并不存在的。</p>
<span id="more"></span>

<p>基于以上说法，我就一度认为引用只是C++编译器在编译时的一些黑魔法，它在运行的时候将两个解析到的符号链接成了一个，从而完成了引用，而在编译之后，引用与本体就是一个变量（一个寄存器或栈上的值）。</p>
<p>但是,事实却打了我的脸。</p>
<p>我们通过以下程序进行检验：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> *pa = &amp;a;</span><br><span class="line">    <span class="type">int</span> &amp;ra = a;</span><br><span class="line">    ++(*pa);</span><br><span class="line">    ++ra;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该程序声明了一个变量a，然后分别声明指针pa指向a的地址，生命引用ra指向a，最后分别使用指针和地址对a进行了一次自加操作。</p>
<p>接下来，使用<code>gcc -S test.cpp -o test.s -O0</code>将上面的C++程序编译为汇编，看一下这些操作具体都是怎么实现的。(环境为MacOS，LLVM 10.0.1)</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">	.section</span>	__TEXT,__text,regular,pure_instructions</span><br><span class="line"><span class="meta">	.build_version</span> macos, <span class="number">10</span>, <span class="number">14</span>	sdk_version <span class="number">10</span>, <span class="number">14</span></span><br><span class="line"><span class="meta">	.globl</span>	_main                   ## -- Begin function main</span><br><span class="line"><span class="meta">	.p2align</span>	<span class="number">4</span>, <span class="number">0x90</span></span><br><span class="line"><span class="symbol">_main:</span>                                  ## @main</span><br><span class="line"><span class="meta">	.cfi_startproc</span></span><br><span class="line">## %bb<span class="number">.0</span>:</span><br><span class="line">	<span class="comment">; 保护现场</span></span><br><span class="line">	pushq	%rbp</span><br><span class="line"><span class="meta">	.cfi_def_cfa_offset</span> <span class="number">16</span></span><br><span class="line"><span class="meta">	.cfi_offset</span> %rbp, -<span class="number">16</span></span><br><span class="line">	<span class="comment">; 保存栈指针</span></span><br><span class="line">	<span class="keyword">movq</span>	%rsp, %rbp</span><br><span class="line"><span class="meta">	.cfi_def_cfa_register</span> %rbp</span><br><span class="line">	<span class="comment">; 设置返回值为0</span></span><br><span class="line">	xorl	%eax, %eax</span><br><span class="line">	<span class="comment">; int a = 0</span></span><br><span class="line">	movl	<span class="number">$0</span>, -<span class="number">4</span>(%rbp)</span><br><span class="line">	<span class="comment">; t0 = &amp;a</span></span><br><span class="line">	leaq	-<span class="number">4</span>(%rbp), %rcx</span><br><span class="line">	<span class="comment">; int *pa = t0</span></span><br><span class="line">	<span class="keyword">movq</span>	%rcx, -<span class="number">16</span>(%rbp)</span><br><span class="line">	<span class="comment">; int &amp;ra = t0</span></span><br><span class="line">	<span class="keyword">movq</span>	%rcx, -<span class="number">24</span>(%rbp)</span><br><span class="line">	<span class="comment">; t0 = pa</span></span><br><span class="line">	<span class="keyword">movq</span>	-<span class="number">16</span>(%rbp), %rcx</span><br><span class="line">	<span class="comment">; t1 = *t0 = *pa</span></span><br><span class="line">	movl	(%rcx), %edx</span><br><span class="line">	<span class="comment">; ++t1</span></span><br><span class="line">	addl	<span class="number">$1</span>, %edx</span><br><span class="line">	<span class="comment">; *t0 = *pa = t1</span></span><br><span class="line">	movl	%edx, (%rcx)</span><br><span class="line">	<span class="comment">; t0 = &amp;ra = &amp;a</span></span><br><span class="line">	<span class="keyword">movq</span>	-<span class="number">24</span>(%rbp), %rcx</span><br><span class="line">	<span class="comment">; t1 = *t0 = *(&amp;ra) = ra = a</span></span><br><span class="line">	movl	(%rcx), %edx</span><br><span class="line">	<span class="comment">; ++t1</span></span><br><span class="line">	addl	<span class="number">$1</span>, %edx</span><br><span class="line">	<span class="comment">; *t0 = *(&amp;ra) = ra = a = t1</span></span><br><span class="line">	movl	%edx, (%rcx)</span><br><span class="line">	<span class="comment">; 恢复现场</span></span><br><span class="line">	popq	%rbp</span><br><span class="line">	<span class="comment">; 返回</span></span><br><span class="line">	retq</span><br><span class="line"><span class="meta">	.cfi_endproc</span></span><br><span class="line">                                        ## -- End function</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">.subsections_via_symbols</span></span><br></pre></td></tr></table></figure>

<p>我已经将汇编中的关键代码加上了注释，可以看出，变量a，指针pa，以及引用ra都位于栈上，index分别在-4、-16、-24。需要注意的是，引用并不是直接复用了变量a的<code>-4(%rbp)</code>地址，而是像指针一样，使用了一个新地址，并且将leaq计算得到的a的地址写入了其中。</p>
<p>而在进行自加的时候，除了最开始将指针中的内容拷贝到寄存器中所用的地址不同以外，指针和引用所使用的方式是完全相同的。</p>
<p>这个结果令我非常意外，<em>编译器其实是将开发者对引用的操作翻译成了对指针的操作</em>。</p>
<p>最后，发现现代编译器还是很聪明的，如果将优化级别调到更高，就会发现它直接将中间的计算过程全部简化，直接返回，这是因为计算结果并没有任何输出，它是不必要的。如果将上面的代码从main函数转移到其他函数中，编译器这时虽然不能放弃计算其中的数值，但还是做了尽力的优化，直接返回结果（<code>movl    $2, %eax</code>）。</p>
<h1 id="进一步的实验"><a href="#进一步的实验" class="headerlink" title="进一步的实验"></a>进一步的实验</h1><p>在文章发出后，有同学提出了质疑，认为可能只是MacOS上gcc编译器的特定操作，并不具有普适性，所以我在Linux和Windows上重复了上述实验。</p>
<p>在Linux环境中（发行版为Ubuntu 18.04，gcc版本为7.5.0）使用相同指令编译后得到的汇编码如下所示：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">	.file</span>	<span class="string">&quot;test_ref.cpp&quot;</span></span><br><span class="line"><span class="meta">	.text</span></span><br><span class="line"><span class="meta">	.globl</span>	main</span><br><span class="line"><span class="meta">	.type</span>	main, @function</span><br><span class="line"><span class="symbol">main:</span></span><br><span class="line"><span class="symbol">.LFB0:</span></span><br><span class="line"><span class="meta">	.cfi_startproc</span></span><br><span class="line">	<span class="comment">; 保护现场</span></span><br><span class="line">	pushq	%rbp</span><br><span class="line"><span class="meta">	.cfi_def_cfa_offset</span> <span class="number">16</span></span><br><span class="line"><span class="meta">	.cfi_offset</span> <span class="number">6</span>, -<span class="number">16</span></span><br><span class="line">	<span class="comment">; 保存栈指针</span></span><br><span class="line">	<span class="keyword">movq</span>	%rsp, %rbp</span><br><span class="line"><span class="meta">	.cfi_def_cfa_register</span> <span class="number">6</span></span><br><span class="line">	subq	<span class="number">$32</span>, %rsp</span><br><span class="line">	<span class="keyword">movq</span>	%fs:<span class="number">40</span>, %rax</span><br><span class="line">	<span class="keyword">movq</span>	%rax, -<span class="number">8</span>(%rbp)</span><br><span class="line">	<span class="comment">; 设置返回值为0</span></span><br><span class="line">	xorl	%eax, %eax</span><br><span class="line">	<span class="comment">; int a = 0</span></span><br><span class="line">	movl	<span class="number">$0</span>, -<span class="number">28</span>(%rbp)</span><br><span class="line">	<span class="comment">; t0 = &amp;a</span></span><br><span class="line">	leaq	-<span class="number">28</span>(%rbp), %rax</span><br><span class="line">	<span class="comment">; int *pa = t0</span></span><br><span class="line">	<span class="keyword">movq</span>	%rax, -<span class="number">24</span>(%rbp)</span><br><span class="line">	<span class="comment">; t0 = &amp;a</span></span><br><span class="line">	leaq	-<span class="number">28</span>(%rbp), %rax</span><br><span class="line">	<span class="comment">; int &amp;ra = t0</span></span><br><span class="line">	<span class="keyword">movq</span>	%rax, -<span class="number">16</span>(%rbp)</span><br><span class="line">	<span class="comment">; t0 = pa</span></span><br><span class="line">	<span class="keyword">movq</span>	-<span class="number">24</span>(%rbp), %rax</span><br><span class="line">	<span class="comment">; t1 = *t0 = *pa</span></span><br><span class="line">	movl	(%rax), %eax</span><br><span class="line">	<span class="comment">; t2 = *t0 + 1</span></span><br><span class="line">	leal	<span class="number">1</span>(%rax), %edx</span><br><span class="line">	<span class="comment">; t0 = pa</span></span><br><span class="line">	<span class="keyword">movq</span>	-<span class="number">24</span>(%rbp), %rax</span><br><span class="line">	<span class="comment">; *t0 = *pa = t2 = *t0 + 1</span></span><br><span class="line">	movl	%edx, (%rax)</span><br><span class="line">	<span class="comment">; t0 = ra</span></span><br><span class="line">	<span class="keyword">movq</span>	-<span class="number">16</span>(%rbp), %rax</span><br><span class="line">	<span class="comment">; t1 = *t0 = *pa</span></span><br><span class="line">	movl	(%rax), %eax</span><br><span class="line">	<span class="comment">; t2 = *t0 + 1</span></span><br><span class="line">	leal	<span class="number">1</span>(%rax), %edx</span><br><span class="line">	<span class="comment">; t0 = ra</span></span><br><span class="line">	<span class="keyword">movq</span>	-<span class="number">16</span>(%rbp), %rax</span><br><span class="line">	<span class="comment">; *t0 = *ra = t2 = *t0 + 1</span></span><br><span class="line">	movl	%edx, (%rax)</span><br><span class="line">	<span class="comment">; 返回值设置为0</span></span><br><span class="line">	movl	<span class="number">$0</span>, %eax</span><br><span class="line">	<span class="keyword">movq</span>	-<span class="number">8</span>(%rbp), %rcx</span><br><span class="line">	xorq	%fs:<span class="number">40</span>, %rcx</span><br><span class="line">	<span class="keyword">je</span>	.L3</span><br><span class="line">	<span class="keyword">call</span>	__stack_chk_fail@PLT</span><br><span class="line"><span class="symbol">.L3:</span></span><br><span class="line">	<span class="keyword">leave</span></span><br><span class="line"><span class="meta">	.cfi_def_cfa</span> <span class="number">7</span>, <span class="number">8</span></span><br><span class="line">	<span class="keyword">ret</span></span><br><span class="line"><span class="meta">	.cfi_endproc</span></span><br><span class="line"><span class="symbol">.LFE0:</span></span><br><span class="line"><span class="meta">	.size</span>	main, .-main</span><br><span class="line"><span class="meta">	.ident</span>	<span class="string">&quot;GCC: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0&quot;</span></span><br><span class="line"><span class="meta">	.section</span>	.note<span class="number">.</span>GNU-stack,<span class="string">&quot;&quot;</span>,@progbits</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看出与MacOS中gcc的编译结果基本相同。</p>
<p>在Windows环境中（Windows 10，vs2019，cl版本为19.23.28106.4），可以使用命令<code>cl /Od /FA .\test_ref.cpp</code>对源码进行编译，可以得到汇编代码如下：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="comment">; Listing generated by Microsoft (R) Optimizing Compiler Version 19.23.28106.4 </span></span><br><span class="line"></span><br><span class="line">	TITLE	C:\Users\jason\<span class="keyword">test</span>\test_ref<span class="number">.</span>cpp</span><br><span class="line"><span class="meta">	.686P</span></span><br><span class="line"><span class="meta">	.XMM</span></span><br><span class="line">	include listing<span class="number">.</span><span class="keyword">inc</span></span><br><span class="line"><span class="meta">	.model</span>	flat</span><br><span class="line"></span><br><span class="line">INCLUDELIB LIBCMT</span><br><span class="line">INCLUDELIB OLDNAMES</span><br><span class="line"></span><br><span class="line"><span class="meta">PUBLIC</span>	_main</span><br><span class="line"><span class="comment">; Function compile flags: /Odtp</span></span><br><span class="line">_TEXT	<span class="meta">SEGMENT</span></span><br><span class="line">_ra$ = -<span class="number">12</span>						<span class="comment">; size = 4</span></span><br><span class="line">_pa$ = -<span class="number">8</span>						<span class="comment">; size = 4</span></span><br><span class="line">_a$ = -<span class="number">4</span>						<span class="comment">; size = 4</span></span><br><span class="line">_main	PROC</span><br><span class="line"><span class="comment">; File C:\Users\jason\test\test_ref.cpp</span></span><br><span class="line"><span class="comment">; Line 2</span></span><br><span class="line">	<span class="keyword">push</span>	<span class="built_in">ebp</span></span><br><span class="line">	<span class="keyword">mov</span>	<span class="built_in">ebp</span>, <span class="built_in">esp</span></span><br><span class="line">	<span class="keyword">sub</span>	<span class="built_in">esp</span>, <span class="number">12</span>					<span class="comment">; 0000000cH</span></span><br><span class="line"><span class="comment">; Line 3</span></span><br><span class="line">	<span class="keyword">mov</span>	<span class="built_in">DWORD</span> <span class="built_in">PTR</span> _a$[<span class="built_in">ebp</span>], <span class="number">0</span></span><br><span class="line"><span class="comment">; Line 4</span></span><br><span class="line">	<span class="keyword">lea</span>	<span class="built_in">eax</span>, <span class="built_in">DWORD</span> <span class="built_in">PTR</span> _a$[<span class="built_in">ebp</span>]</span><br><span class="line">	<span class="keyword">mov</span>	<span class="built_in">DWORD</span> <span class="built_in">PTR</span> _pa$[<span class="built_in">ebp</span>], <span class="built_in">eax</span></span><br><span class="line"><span class="comment">; Line 5</span></span><br><span class="line">	<span class="keyword">lea</span>	<span class="built_in">ecx</span>, <span class="built_in">DWORD</span> <span class="built_in">PTR</span> _a$[<span class="built_in">ebp</span>]</span><br><span class="line">	<span class="keyword">mov</span>	<span class="built_in">DWORD</span> <span class="built_in">PTR</span> _ra$[<span class="built_in">ebp</span>], <span class="built_in">ecx</span></span><br><span class="line"><span class="comment">; Line 6</span></span><br><span class="line">	<span class="keyword">mov</span>	<span class="built_in">edx</span>, <span class="built_in">DWORD</span> <span class="built_in">PTR</span> _pa$[<span class="built_in">ebp</span>]</span><br><span class="line">	<span class="keyword">mov</span>	<span class="built_in">eax</span>, <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">edx</span>]</span><br><span class="line">	<span class="keyword">add</span>	<span class="built_in">eax</span>, <span class="number">1</span></span><br><span class="line">	<span class="keyword">mov</span>	<span class="built_in">ecx</span>, <span class="built_in">DWORD</span> <span class="built_in">PTR</span> _pa$[<span class="built_in">ebp</span>]</span><br><span class="line">	<span class="keyword">mov</span>	<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">ecx</span>], <span class="built_in">eax</span></span><br><span class="line"><span class="comment">; Line 7</span></span><br><span class="line">	<span class="keyword">mov</span>	<span class="built_in">edx</span>, <span class="built_in">DWORD</span> <span class="built_in">PTR</span> _ra$[<span class="built_in">ebp</span>]</span><br><span class="line">	<span class="keyword">mov</span>	<span class="built_in">eax</span>, <span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">edx</span>]</span><br><span class="line">	<span class="keyword">add</span>	<span class="built_in">eax</span>, <span class="number">1</span></span><br><span class="line">	<span class="keyword">mov</span>	<span class="built_in">ecx</span>, <span class="built_in">DWORD</span> <span class="built_in">PTR</span> _ra$[<span class="built_in">ebp</span>]</span><br><span class="line">	<span class="keyword">mov</span>	<span class="built_in">DWORD</span> <span class="built_in">PTR</span> [<span class="built_in">ecx</span>], <span class="built_in">eax</span></span><br><span class="line"><span class="comment">; Line 8</span></span><br><span class="line">	<span class="keyword">xor</span>	<span class="built_in">eax</span>, <span class="built_in">eax</span></span><br><span class="line">	<span class="keyword">mov</span>	<span class="built_in">esp</span>, <span class="built_in">ebp</span></span><br><span class="line">	<span class="keyword">pop</span>	<span class="built_in">ebp</span></span><br><span class="line">	<span class="keyword">ret</span>	<span class="number">0</span></span><br><span class="line">_main	ENDP</span><br><span class="line">_TEXT	ENDS</span><br><span class="line">END</span><br></pre></td></tr></table></figure>

<p>cl编译器的汇编代码格式和gcc略有不同，但含义相近，并且可以比较轻易地通过上面标出的代码行数确定汇编代码的含义。可以看出，它使用的方法也和前两种相同。</p>
<p>这里再进一步，引入知乎上“XZiar”同学的评论，她的评论更加深入地理解其中的机制：</p>
<blockquote>
<p>其实不是说“把引用解释成指针”吧。</p>
<p>在机器码层面，也不存在指针，只存在地址（指针其实还隐含了类型信息）。变量这个概念也是不存在的，只有“无格式数据”，被带格式的指令操作而已。</p>
<p>所以你看到引用和指针的效果一样，是因为在机器码层面，没有多余的信息去表明他们的区别了。</p>
<p>而在语言层面，引用的确可以理解为const指针</p>
</blockquote>
<p>另外，她针对为什么汇编代码中引用把地址复制了一遍也进行了更深入的解释：</p>
<blockquote>
<p>另外引用把地址复制一遍也是很正常的，编译器也的确没法在编译期完全分析出引用的具体指向。考虑如下代码：</p>
<p>int a=0,b=1; int&amp; c = flag ? a : b;</p>
<p>引用只不过因为const所以不能被重置，但具体指向什么，是可以运行期决定的。</p>
</blockquote>
<p>到这里，对于指针和引用底层实现的探索也基本结束了，可以看出，在不启用编译器优化的情况下，主流编译器都会选择将C++中的引用解释为“const指针”。</p>
<p>但是，如果在启动编译器优化的情况下会是如何呢？在MacOS中，将源代码中的返回值改为a后（为了防止编译器优化后认为没有输出于是什么都不做），同时将编译器优化选项调整为O1和O2，其结果是相同的，如下所示：</p>
<figure class="highlight x86asm"><table><tr><td class="code"><pre><span class="line"><span class="meta">	.section</span>	__TEXT,__text,regular,pure_instructions</span><br><span class="line"><span class="meta">	.build_version</span> macos, <span class="number">10</span>, <span class="number">15</span>	sdk_version <span class="number">10</span>, <span class="number">15</span>, <span class="number">4</span></span><br><span class="line"><span class="meta">	.globl</span>	_main                   ## -- Begin function main</span><br><span class="line"><span class="meta">	.p2align</span>	<span class="number">4</span>, <span class="number">0x90</span></span><br><span class="line"><span class="symbol">_main:</span>                                  ## @main</span><br><span class="line"><span class="meta">	.cfi_startproc</span></span><br><span class="line">## %bb<span class="number">.0</span>:</span><br><span class="line">	pushq	%rbp</span><br><span class="line"><span class="meta">	.cfi_def_cfa_offset</span> <span class="number">16</span></span><br><span class="line"><span class="meta">	.cfi_offset</span> %rbp, -<span class="number">16</span></span><br><span class="line">	<span class="keyword">movq</span>	%rsp, %rbp</span><br><span class="line"><span class="meta">	.cfi_def_cfa_register</span> %rbp</span><br><span class="line">	movl	<span class="number">$2</span>, %eax</span><br><span class="line">	popq	%rbp</span><br><span class="line">	retq</span><br><span class="line"><span class="meta">	.cfi_endproc</span></span><br><span class="line">                                        ## -- End function</span><br></pre></td></tr></table></figure>

<p>可以看出汇编版本的代码中省略了所有和指针、引用及内存操作相关的代码，直接将返回值设置为2。</p>
<p>从这里可以看出，编译器的作用是将语言编写的代码翻译为合理的汇编代码，只要汇编代码可以源代码的真实意图执行即可。由于机器码可以表达的概念有限（基本上就是对于寄存器和内存的运算），而高级语言可以表达的概念十分多样，所以编译器就需要将高级语言中的各种复杂概念映射（也可以看做是翻译）为机器码中的简单概念，映射的过程可能会有多种方案，其最终选择是由编译器来决定的。在C++指针和引用的翻译中，主流的C++编译器都选择将它们映射为机器码中的地址，而舍弃了其中的类型信息。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>兰州小记</title>
    <url>/about_lanzhou/</url>
    <content><![CDATA[<p>时日已至伏末，先别问秋老虎可不可怕，仅是鼻炎已经足以让我怀疑有一个连的人在想我。</p>
<p>话归正题，兰州在我心中的形象由两部分，一半像兰州烟上（我最喜欢吉祥兰州硬盒上的那个红色镶金的图案）那样：悠悠兰州，九天揽秀，另一半是爽朗直接，像兰州公交车司机一样，可以跳下车跟出租车对骂。总体来讲，用人来形容就是一个很飘渺但又古朴纯净的三四十岁胡子邋遢瘦削的硬汉。总之，矛盾满满。不过这一点不想展开去说，说说最近在兰州的见闻吧。</p>
<p>按照惯例，每次回家都要去张掖路逛逛，每次去逛也都盼着能有点什么不一样，但又担心不一样的地方多了我会忘记之前是什么样子。不过到目前为止，我的担心都是多余的。对我来讲，上半年改变最大的大概就是共享单车了。张掖路也是如此，但不是漫山遍野的自行车。为了不让单车进入，步行街的路障间隙更小了——将将够钻进去一条腿——进去以后擦一把汗，开始感慨前些日子的减肥真他丫有效，不然老夫就要卡死在这里了。</p>
<span id="more"></span>

<p>为什么念念不忘的是张掖路？除了之前总在这里买些衣服鞋子，让我逐渐摸清哪家店的沙发睡觉舒服以外，就是人多。我喜欢这里，总能让我沾沾人气儿，但又不必拘束自己。我喜欢看这里的人。</p>
<p>有吹着口哨吊儿郎当的“小社会”，有大包小包打招呼都腾不出手的时尚 girl，有大胆往前走绝不向两边看的外卖小哥，也有讲着今儿鸡蛋多少钱亚欧超市是不是减价的大妈大爷，更多的是手扣着手面色红润的小情侣们。手里拎本儿 Kindle，眼睛像磕睡狗一样眯起来望着这条街的，可能就只我一个了。</p>
<p>看着，我突然发现一个大问题——每个人，他们，居然，都，在讲话！成群结队成双成对的人在互相讲话，独自一个的人要么在讲电话，要么不知嘴里在嘟囔着什么。“怎么会这样”我自言自语。</p>
<p>为什么人人都会说话，为什么人人都在说话，人人都在说什么话？想回答这几个问题，着实有些难度，也很难在一篇小记中去讲。但培根问我的一个问题很有意思：“很多科学实验证明，猩猩也有语言，那么它跟人有什么不一样呢？它们有意识么？”这个问题就更有意思了。我认为解答这个问题的关键大概在于大猩猩有没有形成判断动词——是，也就是英文中的 be 动词。如果没有，那么它们还不能领会“存在”，只能通过语言表达诸存在者。在这个角度看，它们没有存在意义上的意识。再来看人类，就很有意思了。他们不仅仅可以领会经验上的存在物，更能领会超验的东西。比如——金钱、国家、社会、甚至是爱情。这些存在者的存在，没有意识，是无法领会的。</p>
<p>话又说回到爱情。之前看过一个理论，如果情侣之前无话可说，就很难有幸福感可言。说明充分的交流沟通是人与人之间构成伴侣的一个非常重要的条件。回过神看见商圈门前的一对对们，虽然高矮胖瘦形态各异，甚至肤色都有所不同。但都可以相爱——他们的十指都紧扣在一起，开心地讲着什么事情。</p>
<p>说的也巧，最近从臻那边听到了两个真实的故事。</p>
<p>一个是臻的父母。</p>
<p>他老爸最开始不会做饭，直到他妈妈怀了他，他爸就磕磕绊绊在他妈妈的指导下学习做饭，每次他妈妈晚上饿了，他爸都二话不说去做夜宵，再后来，就是他爸一直做饭了。</p>
<p>他爸妈也不怎么吵架，就算吵得最厉害，也不超过半个小时，他爸就问他妈要不要泡个茶歇一会儿，他妈妈也欣然同意。他有一次问起他爸妈，“问题还没解决为啥就不吵了？”他妈妈说：“其实吵架的时候就已经想好要让一些步了，反正这么多年都是这样。”他爸爸说：“和你妈一吵架，我就心疼了，她肯定也知道我的想法了，所以我还是老老实实服软吧。”</p>
<p>另一个是臻在旅途中还遇到的一对金婚夫妇，在他们家中借宿了一天，听到了许多他们过往的故事。</p>
<p>夫妻俩都很大年纪了，奶奶叫那个阿公“酷哥”，阿公叫那个奶奶“宝贝”。那天阿公晚上要出去一趟，两个人还要拥抱之后，吻一下额头，才肯分开。奶奶趁着爷爷出去，偷偷告诉臻，她这一辈子最开心的事情，就是把当年那个连一句想你都不会说的闷葫芦，变成了现在只要离开一会儿，就关切的不行，还要用爱你结尾的老小孩~</p>
<p>听完这些故事，当时的心情已是惘然。</p>
<p>现在回想，能拥有这样的爱情的人，该是有多可爱呀。一辈子不长，撞上好运气，能享受大富大贵的可能都比遇到这样一个人并且相处的如此之美的机会大太多。所以，要珍惜身边的人儿，你相信她，她相信你，两人都相信这样的生活，以后才可能就是如此了。臻，你讲，是不是这样？</p>
<p>自张掖路一游之后，我对黄河风情线念念不忘。所以决定沿黄河南岸分别来一次骑行和跑步。</p>
<p>一路上最有意思的事情莫过于穿行在沿途的广场舞们中间，伴着异域风情高难度的新疆舞（是的，兰州今年流行这个），她们根本不为所动，就像冲进了一个正在被扭曲中的魔方，此情此景用一个字来形容，就是群魔乱舞。</p>
<p>另外，跑步的时候我还答应了一件事：未来要和“吃货”（此处简写）一起去东营逛逛，看看共和国最年轻的那片土地。或许，那边会的是一个比我曾经想去的巴颜喀拉山更神奇的地方呢。不，两个地方都要去，一起去看看究竟哪里更是希望。此处 at 她。</p>
<p>在黄河北岸骑车，穿过兰州音乐厅和城市规划馆的时候，我忍不住驻足，去欣赏她们。很有意思，一个被霓虹灯过度装点而另一个是被黑夜过度吞噬。终于，兰州也不再是那片朦朦胧胧的工业灰，她变得清晰年轻性感起来。</p>
<p>最后，贴几张雨后兰州的照片作结束吧。</p>
<p><a href="/wp-content/uploads/2017/08/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170831232345.jpg"><img data-src="/wp-content/uploads/2017/08/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170831232345.jpg"></a> <a href="/wp-content/uploads/2017/08/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170831232355.jpg"><img data-src="/wp-content/uploads/2017/08/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170831232355.jpg"></a> <a href="/wp-content/uploads/2017/08/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170831232401.jpg"><img data-src="/wp-content/uploads/2017/08/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170831232401.jpg"></a></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>兰州</tag>
      </tags>
  </entry>
  <entry>
    <title>《青年马克思》小感</title>
    <url>/about_yound_marx/</url>
    <content><![CDATA[<p>最近得知《青年马克思》上映，觉得有必要一看。于是上网搜了一下院线的排片，不出所料，排片量几乎是最近热映的《复联 3》的五分之一，甚至周末都少有商业影院有排期。于是只能等到周一约上阿文，去附近的影院一睹青年时期马克思的“芳容”。</p>
<p>刚入座，还在和朋友聊最近的中兴联想发生的一系列事件，电影就毫无防备地开始了。此时一个大概容纳五六十人的小影厅里只稀疏地坐着六七个人，多数还是学生（祖国未来还是很有希望的嘛）。</p>
<p>电影里的场景暂且不表，先来说说我对电影整体的感受吧。 首先，作为一部传记电影，而且讲述的是一位思想家的成长历程，如果没有一些对马克思生平以及思想的了解，可能就会在电影院呼呼大睡了。这可能会是观影的一个门槛。</p>
<p>其次，电影内容很丰富。短短不到两个小时，电影讲述了马克思从莱茵报编辑，到论战蒲鲁东，最后是完成《共产党宣言》这三个时期，同时又穿插了马克思与燕妮之间深沉的爱，马克思同恩格斯之间深切的友谊以及恩格斯同玛丽之间跨越阶级的感情。</p>
<span id="more"></span>

<p>电影不但对历史事件做到了真实还原，同时还把人物表现得有血有肉，把离我们很远的两位“大胡子”思想家拉到了和我们相仿的年纪，也做着和我们类似的事情——有为理想的奋斗的激情，有现实中碰钉子的无奈，也有有酒逢知己千杯少的感慨，更有和自己爱人待在一起缠绵，这对从感性上开始对马恩他们两个在我国近似于“符号化”存在的人物真正地了解，真的是太重要了。</p>
<p>最后，我觉得电影的确还缺乏一些对马克思思想令人深思的阐述。它讲述了马克思的成长历程，但却没有讲述出马克思思想的成长历程。比如影片用挺久时间讲述了马克思用《哲学的贫困》来反驳蒲鲁东《贫困的哲学》，我们得到的也只有他反驳蒲鲁东关于他的无政府主义，我们却始终没有听到具体反驳的声音到底在哪里。最后片中大声朗读《共产党宣言》中的内容，但是我相信多数人只是感觉热血沸腾，却不知其中平实语言中蕴含的深刻哲理。不过马克思思想的确庞杂而繁杂，不能对一个两个小时的电影求全责备，能讲出这些，已经很不容易了。</p>
<hr>
<p>电影中的一些桥段也十分精彩。</p>
<p>开场像一幅浓墨重彩的油画，很有欧洲片的感觉。场景是许多德国穷人在携家带口捡树上脱落的枯枝。然后警察就突然出现，穷人被他们无辜杀害驱逐抓捕。毫无疑问，这里是说马克思在大学刚毕业去莱茵报工作时期对《林木盗窃法》进行批判的事情。所以画面一转，就是马克思对莱茵报许多同事太过软弱的激烈吐槽，而警察开始在楼下围攻莱茵报办公室的场景。</p>
<p>那时候马克思一直希望用黑格尔的法哲学来批判莱茵省议会的所作所为，但是他的努力失败了，他意识到法律的本源并不是一种绝对精神，而是为了保护某一个阶级的阶级利益，更重要的是，他认识到当时的法律保护的不是人权，而根本上是资产阶级的私有财产。这是他从黑格尔学派转向辨证批判的一个开端，也很可能是“经济基础决定上层建筑”这一说法在思想上的一个开端。那时候的马克思应该和我们年岁相仿，二十三四岁的样子，对法律却有如此深刻的洞悉，我认为他不仅仅是“千古第一思想家”，他更是一位少年天才！</p>
<p>当然，这件事情的后果是《莱茵报》最终被查封，他和同伴们也去监狱反省人生，不久，他也将和刚成婚不久地妻子燕妮将前往巴黎，也会认识他一生的挚友恩格斯。</p>
<p>电影对马克思和燕妮的感情以及恩格斯和玛丽的感情都表达得也很到位，燕妮和玛丽在影片里不是一个很平很脸谱化的配角，而是两个活生生的女主。</p>
<p>燕妮生于贵族家庭，她受够了所在阶级的腐朽生活，抵抗住了来自各方的压力和马克思相爱，结婚。在当时贵族阶级还在享受生活的时候，她已经有如此感悟，可见她的思想境界一定非同寻常女性所能及。马克思也说，她一直是他思想灵感的重要来源。</p>
<p>在她和马克思刚结婚的时候，他们在家中打闹、斗嘴，到最后接吻、相拥而眠时候的场景让我印象深刻。说实话，以前我也从来没有想过（哪怕是一丝）他们俩之间的生活究竟是什么样的，但这一场景让我彻底明白，他们这对模范夫妇和一般小情侣的日常生活也没有太大的区别，让他们的爱情如此深刻的原因在于他们共同的理想和克服困难的斗志——随后，我便见证了这些。</p>
<p>第一次是她开玩笑给马恩合著的书取名叫《对批判的批判所做的批判》，后来这本书被命名为《神圣家族》，而副标题正是燕妮所起的《对批判的批判所做的批判》。可见她也是很有哲学思想，甚至是能和马克思探讨很多东西的。第二次是她几次在马克思被驱逐或者拿不到稿费饥寒交迫的时候毫无怨言，甚至在如此艰苦的条件下还成为了好几个孩子的母亲。如果没有满腔的革命热情和对马克思深沉的爱，她怎么能够如此地坚强。不过马克思也并非撇下孩子老婆不管的人，他也以同样的热情为这个家得以维继四处奔波，甚至答应了放弃写作并且低声下气做任何工作（然而他还是没有成功找到一份工作）。这些场景也让马克思的形象更加饱满，他也是和我们一样，为家庭为生计烦扰奔波的普通人。</p>
<p>玛丽也同样为恩格斯地事业做出了不可磨灭的贡献。恩格斯是一个“富二代”公子哥，但他却不想继承他父亲的衣钵，而是非常同情英国工人的状况，希望可以帮他们说话。所以他前往英国大大小小的工厂进行社会调查，但是由于他身份特殊，许多工人并不待见他。而玛丽帮助恩格斯联系了许多工厂中的工人，才使得他完成了《英国工人阶级状况》这一调查报告。后来她又促成了马恩同正义者同盟的领导者的见面，间接推动了《共产党宣言》的创作与发表。</p>
<p>马克思和恩格斯的友情也是片中也被着重呈现。片中用欲扬先抑而且有一些无厘头感的镜头把他们从相识到熟悉的经历表现出来。</p>
<p>马克思先是因为恩格斯代表的资产阶级而看不上他，但是当他们聊起天来的时候，甚是忘我，马克思居然都忘记他们是要去讨稿费才见的面。再之后，他们一起逃离法国警察追捕又相遇的镜头像极了一部小型警匪片，就像他俩是认识了多年的老搭档一样，在一路东躲西藏之后，又在一个隐秘的转角重新相逢，然后像没事儿人一样一起去喝酒。</p>
<p>在开怀大醉之后，马克思说出了那句令我震动的话：“哲学家们都在解释世界，而问题在于改变世界！”两位前辈就从这句话出发，一步一步地对这个世界进行剖析，并且将他们的一生贡献给了世界无产阶级的解放事业中去。</p>
<p>在后面的相处中，马克思是一个性格如火一般富有斗争热情又很有思想的角色，而恩格斯则显得内敛许多，他俩在性格上非常互补，成为了非常合适的搭档。特别是在最后由恩格斯拿着马克思的手稿主导正义者同盟的“改名大会”的时候，恩格斯不断呼吁寻求更多支持，马克思则火药味十足，他们两人配合，终于让《共产党宣言》成为了共产主义者同盟的行动纲领。<br>影片最后，马恩两家在海边度假，马克思说因为琐事太多，而且经济困难，所以没法写一部大部头的书，而且生活太累的时候，恩格斯说，欧洲的革命已经开始，资产阶级专制统治已经非常脆弱，各地的工人运动已经风起云涌，工人阶级将会自醒，解放事业可能很快就会成功。 </p>
<p>这让我从电影中跳出来，想到了之后发生的事情，令人唏嘘不已——直到马克思死后，世界上第一个社会主义国家苏联才建立，而直到两百年后的今天，世界仍处于资本主义的笼罩之下，而现在的资本也披上了金融这层看似温和的外衣。 </p>
<p>片中没有花很大笔墨介绍马克思同蒲鲁东的论战，而用很多镜头表现了他与魏特林的冲突。 </p>
<p>魏特林也是当时工人阶级的代表者，主张是“人人皆兄弟”，并且企图用这个口号和富有激情的演讲来感动所有人从而实现革命。但是魏特林的思想却还非常不成熟，他没有意识到冲突的根本是阶级斗争，所以非常反对马克思这种在他看来很形而上的“纲领”，而他所讲的仁慈博爱这种对工人运动毫无意义的词汇也让马克思反感。终于有一次会议上马克思爆发，正式和魏特林决裂。 </p>
<p>之后，在正义者同盟那位有智慧的老者的支持下，同盟最终站在了马克思这边，并同意马恩一起起草一份纲领性的宣言——《共产党宣言》。 </p>
<p>很多人应该都记得魏特林反驳马克思的这句名言：“批判会吞噬一切存在，当没有其他东西可吞噬的时候，它就只能吞噬它自己。”他显然认为这里的批判就是黑格尔学派所说的批判，因为但是黑格尔学派的一些人主张对一些哲学家的批判进行再次的批判，所以他认为当他们把旧的东西批判干净的时候，只能再次批判批判过旧的事物的批判了。不过他没有理解马克思所认识到的批判是什么意思。他如果认真读了当时马恩所写的《神圣家族》以及《德意志意识形态》，就会明白当时在他们面前说的这句话是很幼稚的。</p>
<hr>
<p>回想电影中的马克思，他对事业执着，对工作勤劳、对妻子挚爱，对家庭有责任心，对朋友真诚。他作为一个学者，把人性的真善美演绎得淋漓尽致。片中还没讲，他为了写成《资本论》，在大英图书馆中一坐就是几十年。 </p>
<p>再看看我们当下的学者，他们中有很大一部分人做事情的并不是潜心的研究，也并没有什么对未来的理想，而当下这个时代，他们最喜欢做的事情就是疯狂地“捞钱”。更令人不齿的是，最近全国接二连三出现多起类似导师让学生叫“爸爸”，导师性侵女学生的案件，这些都无不令人唏嘘。 </p>
<p>我认为马克思不仅为我们留下了几厚本文字作为遗产，他的勤勉好学，他的敢爱敢恨，他的崇高理想，也需要当下青年学生、学者们多去反思和学习。 </p>
<p>更可怕的一件事情是马克思被符号化。从我们小学开始，就一直在听这两个大胡子老头的事迹，知道他们是好友，知道他们的思想非常厉害，对我们现在的社会影响深远。却又觉得他们十分遥远，不知他们究竟是什么样的人，更不知道他们的思想究竟是何物。 </p>
<p>伴随着许多人对现实的不满，又受到西方意识形态的强烈灌输，以及他们从中学课本的只言片语出发所产生的对整个社会的片面的思考，许多人开始批评这两位老人，厌恶这两位老人，甚至诋毁这两位老人。看完电影以后我翻了翻豆瓣的影评，充满戾气。 </p>
<p>除去头脑中的偏见，要从感性的认识开始。我想，这些人更应该去看看这部电影，去了解他们的生活，他们的思想，认识一个不再符号化的马恩。所以从这个角度来看，电影之所以没有提及那么多的马克思的思想，也是因为它为大众所准备的，可以让观众从能理解的角度认识这个活生生的马克思。 </p>
<p>我想，看到电影中 18 世纪英国工人们被榨取剩余价值的惨烈场景，看到资产阶级警察们对无产阶级的草菅人命，不会有人还认为这个斗争是毫无价值的吧？如果没有工人阶级的运动，没有那么多人流血牺牲，现在的欧洲还会是当时的那个欧洲。不要再说什么现在生产力强大了，资本家就不会压迫工人了。影片中一位工厂主的话告诉我们：如果你不雇佣童工，如果不压迫工人，会有其他人为了获取更多的利益这么做，那么社会必要劳动时间会减少，产品的价值会下降，如果你不去这么做，你就会面临成本的上升，你就会破产。工人生产的产品越多，生产越快，那么他自己的价值却越低。别说这个规律只在那个时候起作用，在现在这个时代，对于各行各业，也都是完全一样的。 </p>
<p>现在我们身在“高大上”的互联网公司，拿着看起来挺高的薪水，但是人人不还是在没日没夜每周末像机器一样的 996 中度过，你所创造的价值，到底又有多少归你所有了呢？</p>
<p>当下依旧是技术与资本的时代，只是资本披上了另一层温和一些的外衣。所以并不是现在马克思思想已经过时了，马克思主义仍是当下的一个幽灵，始终盘旋在我们这个资本主义世界上空。也正是因为有了这一柄达摩克里斯之剑，才使得现在的资本主义变得温和，让我们无产者在被资本支配的同时，也可以享受到资本所带来的生产力的提升而产生的富足而美好的物质生活。 </p>
<p>所以，电影中的这两位主角，的的确确是如此的伟大。 </p>
<p>另一个角度去向，当资本发展到今天，以如此这般更加猖獗更加繁荣的面孔出现，这不更是一个从未有过的最好的研究和发展马克思主义思想的历史时期么？ </p>
<p>另外还想做两点科普。 </p>
<p>第一，马克思不是经济学家。《资本论》的副标题是《政治经济学批判》，他是在用以辩证法为核心的新的叫做批判的科学来对经济学进行批判。所以虽然马克思在经济学领域有很深的造诣，（也正因为他如此了解经济学）他却做了对经济学（确切说也不能是经济学，而是对当下现实）最的深刻批判。这门新的科学也可以运用在其他的领域，只是马克思去世太早，还没有精力把这把利剑插向别的范畴。 </p>
<p>第二，马克思所谓的共产主义，也并不是所有的东西都是公有制，不允许个人拥有一分一毫的个人物品。这里的共产指的是扬弃经济学中的资本，让所有物不再以私有财产的形式出现，而需要公有的是人们从事生产活动所需要的生产资料。许多人甚至认为共产主义连婚姻都要”共享“，这是多大的谬误。 </p>
<p>PS：拖延了一周终于按照之前所列的大纲基本写完了。对于马克思思想，我也只知皮毛，有很多想不清楚，没弄懂的地方。所以如果大家发现文中存在谬误，希望可以批评指正。 </p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="http://music.163.com/song/media/outer/url?id=26961953.mp3
"></iframe>

]]></content>
      <categories>
        <category>影评</category>
      </categories>
      <tags>
        <tag>马克思</tag>
        <tag>影评</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache下子域名设置方法</title>
    <url>/apache_sub_domain_name/</url>
    <content><![CDATA[<h1 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h1><p>切换到 apache 的配置文件目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/httpd/conf</span><br></pre></td></tr></table></figure>

<p>打开 apache 的配置文件</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> httpd.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>

<p>打开 apache 的 Rewrite 模块,如果有</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">LoadModule</span> rewrite_module modules/mod_rewrite.so</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>这句话，将#去掉即可，如果没有，需要自己加上这句话 在文件末尾输入</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">RewriteEngine</span> <span class="literal">on</span></span><br><span class="line"><span class="attribute">RewriteMap</span> lowercase int:tolower</span><br><span class="line"><span class="attribute">RewriteMap</span> vhost txt:/etc/httpd/vhost.map</span><br><span class="line"><span class="attribute">RewriteCond</span> <span class="variable">$&#123;lowercase:<span class="variable">%&#123;SERVER*NAME&#125;</span>&#125;</span> ^(.+)$</span><br><span class="line"><span class="attribute">RewriteCond</span> <span class="variable">$&#123;vhost:<span class="number">%1</span>&#125;</span> ^(/.*)$</span><br><span class="line"><span class="attribute">RewriteRule</span> ^/(.\_)$ %<span class="number">1</span>/$<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>重启 Apache，注意配置文件备份 在/etc/httpd/目录下新建 vhost.map，进行二级域名绑定</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">如：blog <span class="regexp">/var/</span>www<span class="regexp">/html/</span>wordpress</span><br></pre></td></tr></table></figure>

<p>不必重启 apache 就可以正常访问了</p>
<h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><ul>
<li>在 apache 配置文件中的 ServerName 配置项中需要使用域名而非 ip</li>
<li>在 DNS 配置中需要把*的 a 记录配置到 apache 所运行的服务器上</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Apache</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Apache</tag>
        <tag>域名</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建Apache+Wsgi+Flask的环境</title>
    <url>/apache_wsgi_flask/</url>
    <content><![CDATA[<p>突然想去学习一个 Python 的 Web 框架，当然第一步是先配置一下可以运行 Python 代码的环境。</p>
<p>从搜索引擎转了一圈，选择从熟悉的地方入手——Apache+Wsgi+Python 成为了我的选择，而框架暂选 Flask，而配置居然花了一个晚上的时间（而且还有许多问题没有解决）。</p>
<p>以下都是在 CentOS 下的操作，也默认在 Python2.7.5 下操作</p>
<h1 id="安装-Virtualenv"><a href="#安装-Virtualenv" class="headerlink" title="安装 Virtualenv"></a>安装 Virtualenv</h1><p>首先，参考文档：<a href="http://dormousehole.readthedocs.org/en/latest/installation.html">http://dormousehole.readthedocs.org/en/latest/installation.html</a> 安装 Virtualenv，安装 Flask，一切正常 注意，建立的目录最好在之前网站的目录之下，比如<code>/var/www/html/pythonTest</code> 这样</p>
<h1 id="安装-WSGI"><a href="#安装-WSGI" class="headerlink" title="安装 WSGI"></a>安装 WSGI</h1><p>然后安装 Wsgi，没想到直接用 yum 安装就可以</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> mod_wsgi</span><br></pre></td></tr></table></figure>

<p>如果没有的话，可以 i 从 github 下载 swgi：<a href="https://github.com/GrahamDumpleton/mod_wsgi/releases">https://github.com/GrahamDumpleton/mod_wsgi/releases</a> 然后编译安装：</p>
<figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">./configure --<span class="keyword">with</span>-python=<span class="regexp">/usr/local</span><span class="regexp">/bin/python</span>2.<span class="number">7</span></span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>

<p>（参考了<a href="http://www.cnblogs.com/shadowturtle/archive/2012/11/25/2787690.html">http://www.cnblogs.com/shadowturtle/archive/2012/11/25/2787690.html</a>）</p>
<h1 id="配置-Apache"><a href="#配置-Apache" class="headerlink" title="配置 Apache"></a>配置 Apache</h1><p>查看 Apache 的 moudle 目录（一般在/etc/httpd/moudles 下），发现其中多了一个 mod_wsgi.so 模块，说明安装成功。</p>
<p>然后打开 apache 的配置文件，一般在/etc/httpd/conf/conf.d 目录下，编辑加入以下代码（没有用虚拟主机）</p>
<figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Rules for WSGI</span></span><br><span class="line">WSGIScriptAlias /py /<span class="keyword">var</span>/www/html/py/py.wsgi/ <span class="comment">#脚本的路径</span></span><br><span class="line">WSGIScriptReloading <span class="literal">On</span> <span class="comment">#允许脚本改动之后自动重载</span></span><br><span class="line">AddType text/html .py <span class="comment">#应该是说在返回 Py 脚本的时候返回 html 标记</span></span><br><span class="line">&lt;<span class="literal">Directory</span> <span class="string">&quot;/var/www/html/py/py/&quot;</span>&gt;</span><br><span class="line">AllowOverride <span class="literal">None</span></span><br><span class="line">Require <span class="literal">all</span> granted</span><br><span class="line">&lt;/<span class="literal">Directory</span>&gt;</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>Apache 还可以配置成虚拟主机，这里采用 8080 端口调试（需要在防火墙打开 8080 端口）</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Listen</span> <span class="number">8080</span></span><br><span class="line"><span class="section">&lt;VirtualHost*<span class="number">:8080</span>&gt;</span></span><br><span class="line"><span class="attribute">ServerAdmin</span> webmaster@localhost</span><br><span class="line"><span class="attribute">DocumentRoot</span> /var/www/html/py</span><br><span class="line"><span class="attribute">WSGIScriptAlias</span> / /var/www/html/py/py.wsgi</span><br><span class="line"><span class="attribute">WSGIScriptReloading</span> <span class="literal">On</span></span><br><span class="line"><span class="section">&lt;Directory <span class="string">&quot;/var/www/html/py&quot;</span>&gt;</span></span><br><span class="line"><span class="section">&lt;Files py.wsgi&gt;</span></span><br><span class="line"><span class="attribute">Order</span> <span class="literal">deny</span>,<span class="literal">allow</span></span><br><span class="line"><span class="attribute">Allow</span> from <span class="literal">all</span></span><br><span class="line"><span class="section">&lt;/Files&gt;</span></span><br><span class="line"><span class="section">&lt;/Directory&gt;</span></span><br><span class="line"><span class="attribute">ErrorLog</span> /var/www/html/py/error.log</span><br><span class="line"><span class="attribute">LogLevel</span> warn</span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="配置-WSGI"><a href="#配置-WSGI" class="headerlink" title="配置 WSGI"></a>配置 WSGI</h1><p>我的目录结构是这样的</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="string">|---py</span></span><br><span class="line"><span class="string">|---py.wsgi</span></span><br><span class="line"><span class="string">|---py</span></span><br><span class="line"><span class="string">|---__init__.py</span></span><br><span class="line"><span class="string">|---static</span></span><br><span class="line"><span class="string">|----.(静态文件目录)</span></span><br><span class="line"><span class="string">|---templates</span></span><br><span class="line"><span class="string">|---.(模板目录)</span></span><br><span class="line"><span class="string">|---venv</span></span><br><span class="line"><span class="string">|---(虚拟环境文件)</span></span><br></pre></td></tr></table></figure>

<p>其实现在有用的也只有 py.wsgi，编辑之</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">application</span>(<span class="params">environ,start_response</span>):</span><br><span class="line">start_response(<span class="string">&#x27;200 OK&#x27;</span>,[(<span class="string">&#x27;Content-Type&#x27;</span>,<span class="string">&#x27;text/html&#x27;</span>)])</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;&lt;h1&gt;Hello Wsgi,Hello Flask&lt;/h1&gt;&quot;</span>+sys.version</span><br></pre></td></tr></table></figure>

<p>会输出 Hello Wsgi,Hello Flask 和 Python 的版本号 这时，WSGI 配置完成，可以从外部通过 Apache 访问 Python 搭建的网站</p>
<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>不过，也出现了一些问题，就是如何让 WSGI 使用 Python3 来解析之后的文件。</p>
<p>本来以为是 Virtualenv 的问题，但是关闭之后，问题依旧。所以很可能是使用 Yum 安装时候导致的问题，这个问题留作以后解决。</p>
<h1 id="Virtualenv-的简单使用方法"><a href="#Virtualenv-的简单使用方法" class="headerlink" title="Virtualenv 的简单使用方法"></a>Virtualenv 的简单使用方法</h1><h2 id="新建环境"><a href="#新建环境" class="headerlink" title="新建环境"></a>新建环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> xxx 目录</span><br><span class="line">virtualenv test_env</span><br></pre></td></tr></table></figure>

<p>默认情况下，虚拟环境会依赖系统环境中的 site packages，就是说系统中已经安装好的第三方 package 也会安装在虚拟环境中，如果不想依赖这些 package，那么可以加上参数 –no-site-packages。</p>
<h2 id="启动环境"><a href="#启动环境" class="headerlink" title="启动环境"></a>启动环境</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> ./bin/activate</span><br></pre></td></tr></table></figure>

<h2 id="退出环境"><a href="#退出环境" class="headerlink" title="退出环境"></a>退出环境</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">deactivate</span></span><br></pre></td></tr></table></figure>

<hr>
<p>次日更新</p>
<h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>后来查看 Apache 的 log 文件，发现是 WSGI 一直无法 import 其他文件，看来真的是因为我用 Yum 安装的 WSGI 有问题，解决方法如下： 用 Python2 的 pip 安装 WSGI</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">python2 pip <span class="keyword">install</span> mod_wsgi</span><br></pre></td></tr></table></figure>

<p>然后进入 WSGI 的目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/lib64/python2.7/site-packages/mod_wsgi</span><br></pre></td></tr></table></figure>

<p>进入 server 文件夹，将 <code>mod_wsgi-py27.so</code> 复制到 Apache 的 <code>modules</code> 文件夹，替换原有的 WSGI</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cp</span> mod_wsgi-py27.<span class="keyword">so</span> /etc/httpd/modules/mod_wsgi.<span class="keyword">so</span></span><br></pre></td></tr></table></figure>

<p>操作成功。</p>
<h1 id="接入-Flask-框架"><a href="#接入-Flask-框架" class="headerlink" title="接入 Flask 框架"></a>接入 Flask 框架</h1><p>还是按照配置 WSGI 时候的目录结构 在 py 目录下的<strong>init</strong>.py 中写入一个简单的测试网页</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello,Flask!&quot;</span></span><br><span class="line">if__name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>

<p>将 py.wsgi 文件内容改为</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">sys.path.<span class="keyword">insert</span>(<span class="number">0</span>,&quot;你的 py.wsgi 目录&quot;)</span><br><span class="line">sys.path.<span class="keyword">insert</span>(<span class="number">0</span>,&quot;你的__init__.py 目录&quot;)</span><br><span class="line"><span class="keyword">from</span> py <span class="keyword">import</span> app <span class="keyword">as</span> application（一定要有 <span class="keyword">as</span> application）</span><br></pre></td></tr></table></figure>

<p>然后去访问服务器，发现显示了”Hello，Flask”，大功告成！</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>CentOS</tag>
        <tag>Flask</tag>
        <tag>Python</tag>
        <tag>Wsgi</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次离奇的Apt Update 403错误</title>
    <url>/apt_update_403_aliyun/</url>
    <content><![CDATA[<p>因为要安装一些老版本软件，所以我在阿里云刚装好的 Ubuntu16.04 上面添加了一些 PPA 源，但是发现在</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo apt update</span></span><br></pre></td></tr></table></figure>

<p>时，所有的 PPA 源使用都会出现类似</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Err</span>:<span class="number">4</span> http://ppa.launchpad.net/ondrej/php/ubuntu xenial Release</span><br><span class="line">  <span class="attribute">403</span>  Forbidden \[IP: <span class="number">112.124.140.210</span> <span class="number">80</span>\]</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>这样的 403 错误提示，而且 IP 还很奇怪（查询以后发现是阿里云的 IP，但并不是本机）。 经过排查以后发现原来是阿里云在安装的时候默认使用了 apt 代理导致被 PPA 源 403。</p>
<p>解决方案：</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">sudo <span class="keyword">vim</span> /etc/apt/apt.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>

<p>删除其中的</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Acquire::http::Proxy <span class="string">&quot;http://mirrors.aliyun.com/&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>一行即可。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>apt</tag>
        <tag>Ubuntu</tag>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>秋天蒙太奇</title>
    <url>/autumn_montage/</url>
    <content><![CDATA[<p>秋天里，起风了。风声如电影一样，一帧一帧地走来，又一帧一帧地离开。</p>
<p>五月天是彩色的八月底。和乃凡去赶了个大早却没赶上开场。于是有了第一次在大半个鸟巢里像个运动员一样左右狂奔。结果是在“Do you every shine”里被打了鸡血，得到了 Live 鸟巢奔跑的 Buff。</p>
<p>耳朵逐渐适应被灌入反响后，也忍不住去回想。两年前在首体，第一次听演唱会，买不起前排，却忘记戴眼镜。陈老师在眼前却怎么也看不清楚。那时候听五月天似乎比陈绮贞更多一些，有意思的事如今情况却是倒转了。不变的呢，是对阿信和陈老师同台再唱《私奔到月球》的憧憬。话说那时还傻傻期待他俩可以在一起呢。</p>
<p><img data-src="/wp-content/uploads/2016/10/6d888c37673346e03f0ed54ad4497efa.jpg"></p>
<span id="more"></span>

<p><a href="/wp-content/uploads/2016/10/531425204057462844.jpg"><img data-src="/wp-content/uploads/2016/10/531425204057462844.jpg" alt="531425204057462844"></a></p>
<p><img data-src="/wp-content/uploads/2016/10/197204e8c45e4827cb363bd1c3db45b3.jpg" alt="阿丁SH　陈绮贞演唱会　型号 : EOS 5D Mark III 光圈 : f/4.0 曝光时间 : 1/200 ISO : 2000 焦距 : 106mm"></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="http://music.163.com/song/media/outer/url?id=28068839.mp3"></iframe>

<hr>
<p>博客更了有一年半的样子了。最近一直在想，为什么想开一个自己的博客，更一篇文章要好几个晚上睡不好觉，甚至没有思绪的时候要强行放空很久才能写出几个字，博客对于我真的有这个必要么？</p>
<p>最最开始的时候肯定是被策叔博客的高大上逼格征服，心潮澎湃急于做些什么证明自己。于是政子哥哥的博客一个雨后下午在 SAE 上线——没有固定风格，也不知道发一些什么，对于 WP 更是晕头转向。又用了半年，终于找到了一些感觉，跟小牛前后买了域名，迁移到阿里云上，并且把空间上的一部分随笔更新到了博客里，顺手把自己配置 Linux 服务器方面的经验归纳总结成一些简单的教程。没有 SEO，也没太多访问量，就是自己在不断更新，断断续续到了现在。</p>
<p>逐渐地，我发现 zhengzi.me 变成了一个我在偌大的互联网上的一片小小的自留地，在这里可以做很任性的事情，我任意分配二级域名，任意调整端口地址，随心更新博客，几乎不受任何约束和限制，我感到了前所未有的满足，这才是我要的生活。我确信我需要这样自由不约束的环境。</p>
<p>所以我想博客对我来说是很有必要的。以后的文章也要走出是总结、教程、意识流，用更加自由的形式，写出更多想表达出来的内容。</p>
<p>PS：这两天更新了一下友链实现方法，发现很多以前和我交换友链的博友已经 404，无奈之下只好将一些链接隐藏。</p>
<hr>
<p>九月是一个急转弯。</p>
<p>到现在我都调侃自己，上个月是不是就是一场梦。保研和找到导师放在我这个学渣的面前十分艰难，没有多位老师和师兄师姐的帮助，我几乎无法喘息，更无法坚持走过来。你们，一切，我都铭记在心。</p>
<p>记得在高考填报志愿结束，和妈妈走在中心街旁的大路上，听到“当天上星河转，我命已定盘”一句，望见漫天星辰，感慨颇深。今感受亦是如此，虽不知前路如何，却也已尘埃落定，只有大步向前。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=167691&auto=1&height=66"></iframe>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>五月天</tag>
        <tag>陈绮贞</tag>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Azure快速搭建SS服务器</title>
    <url>/azure_ss/</url>
    <content><![CDATA[<h1 id="先聊两句"><a href="#先聊两句" class="headerlink" title="先聊两句"></a>先聊两句</h1><p>感谢土豪的微软爸爸，前一阵刚拿到了 MSDN 的订阅，发现其中包含了国际版 Azure 的订阅，不能浪费，决定来搭建一个 ss 服务器，方便自己查论文搜代码。这是一篇入门版本的教程，有关 SS 的原理或者更多使用方法，我在后面可能会有更新。</p>
<p>关于 ss ，这里就不多说了。我对 Python 环境比较熟悉，在这里就使用 Python 版本的 SS 作为示例。顺便说一下，因为截图用处不大，所以我会尽量用文字说清楚每一步，有问题欢迎在文章下面留言讨论。</p>
<h1 id="创建-Azure-虚拟机环境"><a href="#创建-Azure-虚拟机环境" class="headerlink" title="创建 Azure 虚拟机环境"></a>创建 Azure 虚拟机环境</h1><p>首先登录 Azure 的 Protal（注意是国际版的，国内版的类似，这里不做介绍）：<a href="https://portal.azure.com/">https://portal.azure.com</a> 。</p>
<p>接着使用激活了 MSDN 订阅的微软账户登录，然后就可以看见控制面板了。</p>
<p>接着点击控制面板中的“新建”按钮，之后选择虚拟机。可以弹出一个虚拟机列表，因为我很熟悉 CentOS，所以我点击查看全部，然后在应用商店中搜索 CentOS，选择了“CentOS-based7.2”，在后面弹出的介绍卡片中选择“创建”，（部署类型选择默认的资源管理器即可）。</p>
<span id="more"></span>

<p>不出意外的话，现在会弹出创建虚拟机的选项卡。基本配置中填写名称（虚拟机的名字，随便起一个就行），用户名（用于远程登录的用户名，自己起一个，需要记住），验证类型为了方便选择密码就行，密码（用于远程登录，自己起，需要记住），订阅选择 Visual Studio Enterprise（如果有其他可用订阅也可以选择），以前没有建立过资源组的话就新建一个吧（照例名字随便起就可以），最后的位置看心情吧（我也没有测试过到底哪里更快，反正都不在国内可以随便选择，我选择了美国西部）,点击确定继续。</p>
<p>接着进入第二步，选择虚拟机大小，本着省钱的目的（ss 服务器也用不了多少资源的），选择 A1 就可以啦，然后放心进入第三步。</p>
<p>第三步里配置比较麻烦，下面一一叙述。 磁盘类型，选择标准（A1 也不让用 SSD）。</p>
<p>公共 IP 地址，在新的卡片里点击新建，创建的时候起一个名字，注意将分配选择静态就好，然后确定。</p>
<p>网络安全组，为了方便我们先允许所有的网络通信，等搭建完毕之后可以再行修改。点击创建网络安全组卡片里的添加入站规则，新的卡片中，先自己起一个名称，优先级填写 100（具体规则可以点击小感叹号图标查看），将目标端口改为<em>，剩下的设置不做改动，点击确定。再点击创建网络安全组卡片里的添加出站规则，新的卡片中，先起一个名字，优先级 100，再将目标端口范围改成</em>，点击确定即可。然后在创建网络安全组卡片中点击确定。</p>
<p>现在回到设置卡片中，将其余选项保持默认，点击确定。</p>
<p>进入第四步，点击确定即可。然后系统将会开始创建环境（需要等十分钟左右，具体进度可以点击页面右上角的铃铛图标查看）。</p>
<p>创建完成以后，在 portal 的左栏中选择虚拟机（没有的话点左栏最下面的浏览找一下），选择刚刚创建的虚拟机（显示的就是刚刚起的名字），记下概要中显示的公共 IP 地址。</p>
<h1 id="远程连接虚拟机"><a href="#远程连接虚拟机" class="headerlink" title="远程连接虚拟机"></a>远程连接虚拟机</h1><p>Windows 下推荐使用 SecurCRT 连接，这里使用 SecureCRT 为例，如果图方便的话也可以使用 Putty，使用方法类似。其余系统可以通过命令行连接。</p>
<p>打开 SecureCRT，按 Alt+Q 打开快速连接，Protocal 选择 SSH2，Hostname 填写刚刚记录下的公共 IP 地址，Port 选择 22，Firewall 选择 None，Username 输入创建虚拟机时候第一步自己起的用户名，其余设置保持默认，点击 Connect。不出意外的话会弹出对话框让你输入密码，这里的密码也是第一步创建虚拟机时候自己输入的密码，点击 ok 即可（可以选择 Save password 复选框记住密码）。现在就已经连接到刚刚在啊 azure 上面创建的服务器了。</p>
<h1 id="搭建-SS-服务器"><a href="#搭建-SS-服务器" class="headerlink" title="搭建 SS 服务器"></a>搭建 SS 服务器</h1><p>SS 的 github 地址：<a href="https://github.com/shadowsocks/shadowsocks">https://github.com/shadowsocks/shadowsocks</a></p>
<p>进入之后可能会发现啥都没有，别着急，在 branch 里面选择 master，就可以看见所有的代码了。接下来按照 readme.md 里面的说明安装 SS,注意执行一些命令时候需要使用 sudo 提升权限（可能需要输入密码）。如果执行命令出错很可能是没有使用 sudo 提权运行。</p>
<p>先安装 python 的包安装工具 pip</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo yum <span class="keyword">install</span> python-setuptools</span><br><span class="line">sudo easy_install pip</span><br></pre></td></tr></table></figure>

<p>再安装 SS</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">sudo pip <span class="keyword">install</span> shadowsocks</span><br></pre></td></tr></table></figure>

<p>让 SS 在后台运行起来</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">sudo ssserver -p <span class="number">443</span> -k password -m aes-<span class="number">256</span>-cfb --<span class="keyword">user</span> <span class="title">nobody</span> -d <span class="literal">start</span></span><br></pre></td></tr></table></figure>

<p>命令中的-p 后的字段是服务的端口号，可以自定义，-k 后面的字段是密码，可以自定义，剩下的不需要改动。 后台运行之后可以使用 ps -aux 命令查看是否运行成功。</p>
<h3 id="SS-开机自启动"><a href="#SS-开机自启动" class="headerlink" title="SS 开机自启动"></a>SS 开机自启动</h3><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/rc.<span class="keyword">local</span></span><br></pre></td></tr></table></figure>

<p>打开文件以后在 exit 0 之前键入</p>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">sh /usr/bin/python /usr/local/bin/ssserver -p <span class="number">443</span> -k password -m aes-<span class="number">256</span>-cfb --<span class="keyword">user</span> <span class="title">nobody</span> -d <span class="literal">start</span></span><br></pre></td></tr></table></figure>

<p>然后按 esc 输入:wq 保存退出，给 rc.local 可执行权限</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">chmod</span> +x /etc/rc.local</span><br></pre></td></tr></table></figure>

<p>这样，在下次开启的时候，SS 就会开机自启动了。</p>
<h1 id="使用-Windows-的-SS-客户端连接搭建好的-SS-服务器"><a href="#使用-Windows-的-SS-客户端连接搭建好的-SS-服务器" class="headerlink" title="使用 Windows 的 SS 客户端连接搭建好的 SS 服务器"></a>使用 Windows 的 SS 客户端连接搭建好的 SS 服务器</h1><p>github 地址：<a href="https://github.com/shadowsocks/shadowsocks-windows">https://github.com/shadowsocks/shadowsocks-windows</a></p>
<p>下载地址：<a href="https://github.com/shadowsocks/shadowsocks-windows/releases/download/3.0/Shadowsocks-3.0.zip">https://github.com/shadowsocks/shadowsocks-windows/releases/download/3.0/Shadowsocks-3.0.zip</a>（最新版本为 3.0，如果有新版可以在<a href="https://github.com/shadowsocks/shadowsocks-windows/releases%E9%A1%B5%E9%9D%A2%E4%B8%AD%E4%B8%8B%E8%BD%BD%EF%BC%89">https://github.com/shadowsocks/shadowsocks-windows/releases页面中下载）</a></p>
<p>其他系统的客户端可以在<a href="https://github.com/shadowsocks">https://github.com/shadowsocks</a>中自行查找下载。</p>
<p>下载客户端之后运行，Server IP 输入 Azure 虚拟机的 IP，Server Port 输入刚刚后台运行 SS 时候键入的端口号（比如 443），Password 输入刚刚后台运行 SS 时输入的密码字段，Encryption 选择 aes-256-cfb，然后点击左边一栏的 Add，再点击 OK，不出意外的话 SS 客户端已经启动成功了。</p>
<p>接下来就是配置浏览器代理了，按按照上面配置好 shadowsocks 客户端后，点击 OK 后会最小化到任务栏托盘，此时，右击托盘图标，指向 Server，确保勾选的是 PAC 模式（如果是 Global 的话是全局模式 PAC 则是 GFWList 智能模式），然后点击菜单最上面的启用后即可。IE 的代理配置会被自动配置好。如果要取消代理，再次点击“启用”即可，此时程序会自动修改系统代理配置，然后就可以通过浏览器自动代理了（确保浏览器的代理设置为“系统代理配置”）。如果您装有 360 等国产流氓软件，请确保把 shadowsocks 添加进白名单，不要阻拦其修改网络配置，最好直接将这类软件卸载，换成更加给力的国外软件。</p>
<p>不过我更喜欢浏览器配置代理模式。</p>
<p>firefox 上推荐使用插件 foxyproxy，具体教程百度上面有很多，可以自行搜索。只是注意 GFWList 的地址已经换成了<a href="https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt">https://raw.githubusercontent.com/gfwlist/gfwlist/master/gfwlist.txt</a>，以前的地址已经失效。</p>
<p>chrome 上也可以用 foxyproxy 插件，配置方法和 firefox 类似，也可以使用 Proxy SwitchySharp 插件，具体配置方法可以自行搜索。</p>
<p>最后填一个坑，配置网络安全组的时候不过滤端口可能会有一些风险，可以根据自己 SS 配置的端口号适当过滤端口号（但是要保证 SSH 的 22 端口可用）。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>azure</tag>
        <tag>SS</tag>
      </tags>
  </entry>
  <entry>
    <title>使用C#封装一个UWP Applicaion Data的结构化存储类</title>
    <url>/c_sharp_uwp_application_data/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在 <code>.Net</code> 中，Applicaion Data 相当于一个结构化存储器，在存储一些配置信息的时候，使用非常方便。在应用更新以后，配置不会丢失，在应用写在以后会自动删除，并且也使用了加密存储，没有安全问题。</p>
<p>这里是关于 App Settings 的一些特性</p>
<ul>
<li>用来保存配置数据，最深 32 层，不限数量，可以保存在本地且可以漫游。</li>
<li>AppSettings 支持除二进制外的所有 WinRT 数据格式，如果存储二进制数据得用文件。</li>
<li>系统只验证数据格式和长度，不验证数据是否正确。</li>
</ul>
<h1 id="主要存储类型"><a href="#主要存储类型" class="headerlink" title="主要存储类型"></a>主要存储类型</h1><p>存储分为本地存储和进行漫游，漫游的话可以在多设备之间同步。</p>
<p>存储分为直接存储、Composite 设置集合和 Container 容器。 其中这些存储类型可以相互嵌套。Container 容器类似于一个文件夹可以作为许多设置的抽象集合，而 Composite 集合类似于一个文件夹，可以将同类的设置放一起，而直接存储可以存储单条信息。</p>
<p>Container 中能够包含多个 Composite 和单条键值对，而 Composite 中可以包含多条键值对。之后将根据这些不同的存储方法对 ApplicationData 进行封装。</p>
<span id="more"></span>

<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><p>代码通过模拟 jQuery 的连缀操作，可以在单行完成存储复杂类型数据的操作。</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Windows.Storage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">SettingLib</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明存储容器</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationDataContainer dataSettings;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//声明一些临时变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> tempSettingName;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">object</span> tempSettingValue;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> tempContainerName;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> tempCompositeName;</span><br><span class="line">    <span class="keyword">private</span> ApplicationDataContainer tempContainer;</span><br><span class="line">    <span class="keyword">private</span> ApplicationDataCompositeValue tempComposite;</span><br><span class="line">    <span class="keyword">private</span> ApplicationDataCompositeValue tempReadComposite;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//是否自动清除缓存的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">bool</span> isAutoClearTemp;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数，默认为漫游设置和自动清除历史设置的缓存</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SettingLib</span>(<span class="params"><span class="built_in">bool</span> isRoaming = <span class="literal">true</span>, <span class="built_in">bool</span> isAutoClearTemp = <span class="literal">true</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isRoaming) &#123;</span><br><span class="line">            dataSettings = ApplicationData.Current.RoamingSettings;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dataSettings = ApplicationData.Current.LocalSettings;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.isAutoClearTemp = isAutoClearTemp;</span><br><span class="line">        tempContainer = <span class="literal">null</span>;</span><br><span class="line">        tempComposite = <span class="literal">null</span>;</span><br><span class="line">        tempReadComposite = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建直接存储,需要传入一个键值对</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SettingLib <span class="title">CreateSetting</span>(<span class="params"><span class="built_in">string</span> key, <span class="built_in">object</span> <span class="keyword">value</span></span>)</span> &#123;</span><br><span class="line">        tempSettingName = key;</span><br><span class="line">        tempSettingValue = <span class="keyword">value</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建存储集合，需要传入集合的名称和键值对的List</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SettingLib <span class="title">CreateComposite</span>(<span class="params"><span class="built_in">string</span> compositeName, List&lt;Tuple&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;&gt; vals</span>)</span> &#123;</span><br><span class="line">        ApplicationDataCompositeValue composite = <span class="keyword">new</span> ApplicationDataCompositeValue();</span><br><span class="line">        <span class="keyword">foreach</span> (Tuple&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt; v <span class="keyword">in</span> vals) &#123;</span><br><span class="line">            composite[v.Item1] = v.Item2;</span><br><span class="line">        &#125;</span><br><span class="line">        tempComposite = composite;</span><br><span class="line">        tempCompositeName = compositeName;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建存储容器，需要传入容器的名称</span></span><br><span class="line">    <span class="comment">//不考虑嵌套Container</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SettingLib <span class="title">CreateContainer</span>(<span class="params"><span class="built_in">string</span> containerName</span>)</span> &#123;</span><br><span class="line">        ApplicationDataContainer container = dataSettings.CreateContainer(containerName, ApplicationDataCreateDisposition.Always);</span><br><span class="line">        tempContainer = container;</span><br><span class="line">        tempContainerName = containerName;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将之前创建的各种存储类型进行组合之后进行存储</span></span><br><span class="line">    <span class="comment">//可以在Container中包含Composite或者键值对，可以在Composite中包含多条键值对，可以直接存储键值对</span></span><br><span class="line">    <span class="comment">//不考虑嵌套Container</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SettingLib <span class="title">SaveSetting</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (tempContainer != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dataSettings.Containers.ContainsKey(tempContainerName)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (tempComposite != <span class="literal">null</span>) &#123;</span><br><span class="line">                    dataSettings.Containers[tempContainerName].Values[tempCompositeName] = tempComposite;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dataSettings.Containers[tempContainerName].Values[tempSettingName] = tempSettingValue;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (tempComposite != <span class="literal">null</span>) &#123;</span><br><span class="line">                dataSettings.Values[tempCompositeName] = tempComposite;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dataSettings.Values[tempSettingName] = tempSettingValue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (isAutoClearTemp) &#123;</span><br><span class="line">            ClearTemp();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一次操作后清除缓存的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SettingLib <span class="title">ClearTemp</span>()</span> &#123;</span><br><span class="line">        tempSettingValue = <span class="literal">null</span>;</span><br><span class="line">        tempContainer = <span class="literal">null</span>;</span><br><span class="line">        tempComposite = <span class="literal">null</span>;</span><br><span class="line">        tempReadComposite = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果没有设置自动清除缓存的话可以手动清除缓存,需要传入清除缓存的类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SettingLib <span class="title">ClearTemp</span>(<span class="params"><span class="built_in">string</span> content</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (content) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Setting&quot;</span>:</span><br><span class="line">                tempSettingValue = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Container&quot;</span>:</span><br><span class="line">                tempContainer = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;Composite&quot;</span>:</span><br><span class="line">                tempComposite = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;ReadComposite&quot;</span>:</span><br><span class="line">                tempReadComposite = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="literal">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取键值对存储</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">ReadSetting</span>(<span class="params"><span class="built_in">string</span> key</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">object</span> <span class="keyword">value</span> = dataSettings.Values[key];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读取Composite中的所有键值对，并且以List返回</span></span><br><span class="line">    <span class="comment">//不考虑嵌套Container</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Tuple&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;&gt; ReadSetting(<span class="built_in">string</span> compositeName, List&lt;<span class="built_in">string</span>&gt; settingNames) &#123;</span><br><span class="line">        ApplicationDataCompositeValue composite;</span><br><span class="line">        <span class="keyword">if</span> (tempReadComposite != <span class="literal">null</span>) &#123;</span><br><span class="line">            composite = tempReadComposite;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            composite = (ApplicationDataCompositeValue)ReadSetting(compositeName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (composite == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            List&lt;Tuple&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;&gt; cs = <span class="keyword">new</span> List&lt;Tuple&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;&gt;();</span><br><span class="line">            <span class="keyword">foreach</span> (<span class="built_in">string</span> sn <span class="keyword">in</span> settingNames) &#123;</span><br><span class="line">                cs.Add(<span class="keyword">new</span> Tuple&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;(sn, composite[sn]));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> cs;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读取Container中指定名称的设置</span></span><br><span class="line">    <span class="comment">//不考虑嵌套Container</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">object</span> <span class="title">ReadSetting</span>(<span class="params"><span class="built_in">string</span> containerName, <span class="built_in">string</span> settingName</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">bool</span> hasContiner = dataSettings.Containers.ContainsKey(containerName);</span><br><span class="line">        <span class="built_in">bool</span> hasSetting = <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">object</span> settingValue = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (hasContiner) &#123;</span><br><span class="line">            hasSetting = dataSettings.Containers[containerName].Values.ContainsKey(settingName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (hasSetting) &#123;</span><br><span class="line">            settingValue = dataSettings.Containers[containerName].Values[settingName];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> settingValue;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//读取Container中设置集合中的所有键值对</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Tuple&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;&gt; ReadSetting(<span class="built_in">string</span> containerName, <span class="built_in">string</span> compositeName, List&lt;<span class="built_in">string</span>&gt; settingNames) &#123;</span><br><span class="line">        tempReadComposite = (ApplicationDataCompositeValue)ReadSetting(containerName, compositeName);</span><br><span class="line">        List&lt;Tuple&lt;<span class="built_in">string</span>, <span class="built_in">object</span>&gt;&gt; ret = ReadSetting(<span class="literal">null</span>, settingNames);</span><br><span class="line">        <span class="keyword">if</span> (isAutoClearTemp) &#123;</span><br><span class="line">            ClearTemp();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除某种设置</span></span><br><span class="line">    <span class="comment">//不考虑嵌套Container</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveSetting</span>(<span class="params"><span class="built_in">string</span> settingName, <span class="built_in">bool</span> isContainer = <span class="literal">false</span></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (isContainer) &#123;</span><br><span class="line">            dataSettings.DeleteContainer(settingName);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            dataSettings.Values.Remove(settingName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>可以使用连缀操作在单行进行复杂的设置</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeSettings</span>()</span> &#123;</span><br><span class="line">SettingLib settingLib = <span class="keyword">new</span> SettingLib();</span><br><span class="line">settingLib.CreateContainer(<span class="string">&quot;CampusNetwork&quot;</span>).CreateSetting(<span class="string">&quot;campusNetworkAccountId&quot;</span>, id).SaveSetting();</span><br><span class="line"><span class="built_in">string</span> id = (<span class="built_in">string</span>)settingLib.ReadSetting(<span class="string">&quot;CampusNetwork&quot;</span>, <span class="string">&quot;campusNetworkAccountId&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要注意的点：</p>
<ul>
<li>在存储的时候使用连续的 Create 创建结构化的存储，最后使用 SaveStting 方法进行最终存储。</li>
<li>使用 ReadSetting 读取数据，具体使用可以参考 ReadingSetting 方法的每一种重载中的注释</li>
<li>在创建结构化存储的时候，可以在 Container 中包含 Composite 或者键值对，可以在 Composite 中包含多条键值对，可以直接存储键值对</li>
</ul>
<h1 id="获取文中代码"><a href="#获取文中代码" class="headerlink" title="获取文中代码"></a>获取文中代码</h1><p>在 GitHub 的 HelloBUPT 项目中可以得到代码：<a href="https://github.com/imaginezz/helloBUPT/blob/master/beiyou/CommonLibrary/SettingLib.cs">https://github.com/imaginezz/helloBUPT/blob/master/beiyou/CommonLibrary/SettingLib.cs</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>Windows 10 UWP 开发：如何读取和保存设置：<a href="http://edi.wang/post/2015/11/20/uwp-read-write-settings?utm_source=tuicool&utm_medium=referral">http://edi.wang/post/2015/11/20/uwp-read-write-settings?utm_source=tuicool&amp;utm_medium=referral</a></p>
<p>windows 8 开发 Application Data：<a href="http://www.cnblogs.com/icuit/archive/2012/06/06/2538246.html">http://www.cnblogs.com/icuit/archive/2012/06/06/2538246.html</a></p>
<p>MSDN ApplicationDataContainer Class：<a href="https://msdn.microsoft.com/zh-cn/library/windows/apps/windows.storage.applicationdatacontainer.aspx">https://msdn.microsoft.com/zh-cn/library/windows/apps/windows.storage.applicationdatacontainer.aspx</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>UWP</tag>
        <tag>存储</tag>
      </tags>
  </entry>
  <entry>
    <title>使用C#封装一个UWP的HTTP Get和Post的类</title>
    <url>/c_sharp_uwp_http_get_and_post/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>HttpWebRequest 是 .net 基类库中的一个类，也在 UWP 中有所体现。它在命名空间 System.Net 之下，可以使用 HTTP 协议和服务器交互。但是 UWP 中的 HttpWebRequest 同之前.Net 中的还是有一定的区别，少了许多方法。</p>
<p>HttpWebRequest 对 HTTP 协议封装的比较完备，可以设置 Header 和 Content，也可以自行设置 Cookie。</p>
<p>多数 Http 访问以 Get 和 Post 为主，所以在这里也是对 Get 和 Post 两种方法进行封装。</p>
<h1 id="Http-Get"><a href="#Http-Get" class="headerlink" title="Http Get"></a>Http Get</h1><p>要使用 Get 进行一个链接的访问，最基本的 url，Get 的参数和网页的编码形式需要以参数形式输入，最终一般只需要拿到返回的 Content 即可。</p>
<span id="more"></span>

<p>以下是实现的代码</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">HttpGet</span>(<span class="params"><span class="built_in">string</span> url, <span class="built_in">string</span> getDataStr = <span class="literal">null</span>, <span class="built_in">string</span> encode = <span class="string">&quot;utf-8&quot;</span>,CookieCollection cc = <span class="literal">null</span></span>)</span> &#123;</span><br><span class="line">        <span class="comment">//Get 方式提交数据只需要在网址后面使用？即可，如果多组数据，需要在提交的时候使用&amp;连接</span></span><br><span class="line">        HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url + (getDataStr == <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;?&quot;</span>) + getDataStr);</span><br><span class="line">        <span class="comment">//将 Cookie 写入</span></span><br><span class="line">        request.CookieContainer = <span class="keyword">new</span> CookieContainer();</span><br><span class="line">        <span class="keyword">if</span> (cc != <span class="literal">null</span>) &#123;</span><br><span class="line">            request.CookieContainer.Add(<span class="keyword">new</span> Uri(url), cc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//设置 request 的方式为 GET</span></span><br><span class="line">        request.Method = <span class="string">&quot;GET&quot;</span>;</span><br><span class="line">        <span class="comment">//设置 HTTP 头的内容类型,如果需要在 Http 头中加入其他内容，可以直接使用 request.Headers[&quot;头名称&quot;]=&quot;头内容&quot; 来添加</span></span><br><span class="line">        request.ContentType = <span class="string">&quot;text/html;charset=UTF-8&quot;</span>;</span><br><span class="line">        <span class="comment">//通过异步方法拿到回应</span></span><br><span class="line">        HttpWebResponse response = (HttpWebResponse)<span class="keyword">await</span> request.GetResponseAsync();</span><br><span class="line">        <span class="comment">//写入流</span></span><br><span class="line">        Stream myResponseStream = response.GetResponseStream();</span><br><span class="line">        <span class="comment">//注册编码转换器（这里同之前 WPF 开发中不同，需要事先注册编码转换器才能使用）</span></span><br><span class="line">        Encoding.RegisterProvider(CodePagesEncodingProvider.Instance);</span><br><span class="line">        <span class="comment">//进行内容编码转换</span></span><br><span class="line">        StreamReader myStreamReader = <span class="keyword">new</span> StreamReader(myResponseStream, Encoding.GetEncoding(encode));</span><br><span class="line">        <span class="comment">//将转换后的内容转化为字符串并返回</span></span><br><span class="line">        <span class="built_in">string</span> retString = myStreamReader.ReadToEnd();</span><br><span class="line">        <span class="keyword">return</span> retString;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="Http-Post"><a href="#Http-Post" class="headerlink" title="Http Post"></a>Http Post</h1><p>使用 Post 发送数据时候需要将参数以流的形式写入 Request 的 Header 中，其余和 Get 非常相似。</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="built_in">public</span> static async Task&lt;string&gt; HttpPost(string url, string postDataStr, string encode = &quot;utf-8&quot;, CookieCollection cc = <span class="keyword">null</span>) &#123;</span><br><span class="line">    HttpWebRequest request = (HttpWebRequest)WebRequest.<span class="keyword">Create</span>(url);</span><br><span class="line">    request.CookieContainer = <span class="built_in">new</span> CookieContainer();</span><br><span class="line">    <span class="keyword">if</span> (cc != <span class="keyword">null</span>) &#123;</span><br><span class="line">        request.CookieContainer.<span class="keyword">Add</span>(<span class="built_in">new</span> Uri(url), cc);</span><br><span class="line">    &#125;</span><br><span class="line">    //设置请求方式为POST</span><br><span class="line">    request.<span class="keyword">Method</span> = &quot;POST&quot;;</span><br><span class="line">    //在POST里一定要注意写入Content—Length，这里的长度是指POST上传的数据的长度，可以使用<span class="keyword">Encoding</span>中的GetByteCount方法完成</span><br><span class="line">    request.Headers[&quot;Content-Length&quot;] = <span class="keyword">Encoding</span>.UTF8.GetByteCount(postDataStr).ToString();</span><br><span class="line">    //ContentType设置为Web表单模式</span><br><span class="line">    request.ContentType = &quot;application/x-www-form-urlencoded&quot;;</span><br><span class="line"></span><br><span class="line">    //test request <span class="keyword">header</span></span><br><span class="line">    //request.Accept = &quot;text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8&quot;;</span><br><span class="line">    //request.Headers[&quot;Accept-Encoding&quot;] = &quot;gzip, deflate&quot;;</span><br><span class="line">    //request.Headers[&quot;Accept-Language&quot;] = &quot;zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3&quot;;</span><br><span class="line">    //request.Headers[&quot;Connection&quot;] = &quot;keep-alive&quot;;</span><br><span class="line">    //request.Headers[&quot;DNT&quot;] = &quot;1&quot;;</span><br><span class="line">    //request.Headers[&quot;Host&quot;] = &quot;10.3.8.211&quot;;</span><br><span class="line">    //request.Headers[&quot;Referrer&quot;] = &quot;http://10.3.8.211/&quot;;</span><br><span class="line">    //request.Headers[&quot;User-Agent&quot;] = &quot;Mozilla/5.0 (Windows NT 10.0; WOW64; rv:47.0) Gecko/20100101 Firefox/47.0&quot;;</span><br><span class="line"></span><br><span class="line">    //拿到request的输入流</span><br><span class="line">    Stream myRequestStream = await request.GetRequestStreamAsync();</span><br><span class="line"></span><br><span class="line">    //use this <span class="keyword">function</span> <span class="keyword">to</span> register the <span class="keyword">encoding</span> machine <span class="keyword">or</span> it will throw expect <span class="keyword">Encoding</span>.RegisterProvider(CodePagesEncodingProvider.Instance);</span><br><span class="line"></span><br><span class="line">    //I Don<span class="string">&#x27;t know why it doesn&#x27;</span>t <span class="keyword">work</span>, so I use direct <span class="keyword">function</span> <span class="keyword">to</span> <span class="keyword">write</span></span><br><span class="line">    //StreamWriter myStreamWriter = <span class="built_in">new</span> StreamWriter(myRequestStream, <span class="keyword">Encoding</span>.GetEncoding(encode));</span><br><span class="line">    //myStreamWriter.<span class="keyword">Write</span>(postDataStr);</span><br><span class="line"></span><br><span class="line">    //将传输的数据转化为ASCII码写入输入流</span><br><span class="line">    byte[] bs = <span class="keyword">Encoding</span>.ASCII.GetBytes(postDataStr);</span><br><span class="line">    myRequestStream.<span class="keyword">Write</span>(bs, <span class="number">0</span>, bs.Length);</span><br><span class="line"></span><br><span class="line">    //异步得到Response并且将Response转换为String</span><br><span class="line">    HttpWebResponse response = (HttpWebResponse)await request.GetResponseAsync();</span><br><span class="line">    Stream myResponseStream = response.GetResponseStream();</span><br><span class="line">    StreamReader myStreamReader = <span class="built_in">new</span> StreamReader(myResponseStream, <span class="keyword">Encoding</span>.GetEncoding(encode));</span><br><span class="line">    string retString = myStreamReader.ReadToEnd();</span><br><span class="line">    <span class="keyword">return</span> retString;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="获取文中代码"><a href="#获取文中代码" class="headerlink" title="获取文中代码"></a>获取文中代码</h1><p>在 GitHub 的 HelloBUPT 项目中可以得到代码：<a href="https://github.com/imaginezz/helloBUPT/blob/master/beiyou/CommonLibrary/WebLib.cs">https://github.com/imaginezz/helloBUPT/blob/master/beiyou/CommonLibrary/WebLib.cs</a></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>msdn 文档：<a href="https://msdn.microsoft.com/zh-cn/library/mt185489.aspx">https://msdn.microsoft.com/zh-cn/library/mt185489.aspx</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>UWP</tag>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>使用C#封装一个UWP的Toast通知类</title>
    <url>/c_sharp_uwp_toast/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>在 UWP 开发中，可以使用 Toast 方式直接生成系统通知，并出现在 Windows 的通知中心中。 Toast 通知的核心是一个 XML 文档，其中包含了通知的图标、文字和式样。系统中提供了该 XML 文档的模板。</p>
<p>在这里使用了类似于 jQuery 的连缀操作的形式使用 C#封装了一个关于通知的类，不过还不支持 win10 可交互通知，以后会加入。</p>
<h1 id="模板类型"><a href="#模板类型" class="headerlink" title="模板类型"></a>模板类型</h1><p>消息通知的模板一共有 8 中，这里有每一种模板的介绍。</p>
<span id="more"></span>

<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Summary:</span></span><br><span class="line"><span class="comment">// 指定要在消息通知中使用的模版。</span></span><br><span class="line"><span class="string">[ContractVersion(typeof(UniversalApiContract), 65536)]</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ToastTemplateType</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Summary:</span></span><br><span class="line"><span class="comment">// 在三行文本中被包装的大型图像和单个字符串。</span></span><br><span class="line">ToastImageAndText01 = <span class="number">0</span>,</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Summary:</span></span><br><span class="line"><span class="comment">// 大图像、加粗文本的一个字符串在第一行、常规文本的一个字符串包装在第二、三行中。</span></span><br><span class="line">ToastImageAndText02 = <span class="number">1</span>,</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Summary:</span></span><br><span class="line"><span class="comment">// 大图像、加粗文本的一个字符串被包装在开头两行中、常规文本的一个字符串包装在第三行中。</span></span><br><span class="line">ToastImageAndText03 = <span class="number">2</span>,</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Summary:</span></span><br><span class="line"><span class="comment">// 大图像、加粗文本的一个字符串在第一行、常规文本的一个字符串在第二行中、常规文本的一个字符串在第三行中。</span></span><br><span class="line">ToastImageAndText04 = <span class="number">3</span>,</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Summary:</span></span><br><span class="line"><span class="comment">// 包装在三行文本中的单个字符串。</span></span><br><span class="line">ToastText01 = <span class="number">4</span>,</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Summary:</span></span><br><span class="line"><span class="comment">// 第一行中加粗文本的一个字符串、覆盖第二行和第三行的常规文本的一个字符串。</span></span><br><span class="line">ToastText02 = <span class="number">5</span>,</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Summary:</span></span><br><span class="line"><span class="comment">// 覆盖第一行和第二行的加粗文本的一个字符串。第三行中常规文本的一个字符串。</span></span><br><span class="line">ToastText03 = <span class="number">6</span>,</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Summary:</span></span><br><span class="line"><span class="comment">// 第一行中加粗文本的一个字符串、第二行中常规文本的一个字符串、第三行中常规文本的一个字符串。</span></span><br><span class="line">ToastText04 = <span class="number">7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以下是每一种通知的 XML 模板内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类型 0</span></span><br><span class="line">&lt;toast&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">binding</span> <span class="attr">template</span>=<span class="string">&quot;ToastImageAndText01&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">image</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">binding</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span></span><br><span class="line">&lt;/toast&gt;</span><br><span class="line"><span class="comment">//类型 1</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">toast</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">binding</span> <span class="attr">template</span>=<span class="string">&quot;ToastImageAndText02&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">image</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">binding</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">toast</span>&gt;</span></span></span><br><span class="line"><span class="comment">//类型 2</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">toast</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">binding</span> <span class="attr">template</span>=<span class="string">&quot;ToastImageAndText03&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">image</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">binding</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">toast</span>&gt;</span></span></span><br><span class="line"><span class="comment">//类型 3</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">toast</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">binding</span> <span class="attr">template</span>=<span class="string">&quot;ToastImageAndText04&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">image</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">binding</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">toast</span>&gt;</span></span></span><br><span class="line"><span class="comment">//类型 4</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">toast</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">binding</span> <span class="attr">template</span>=<span class="string">&quot;ToastText01&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">binding</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">toast</span>&gt;</span></span></span><br><span class="line"><span class="comment">//类型 5</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">toast</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">binding</span> <span class="attr">template</span>=<span class="string">&quot;ToastText02&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">binding</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">toast</span>&gt;</span></span></span><br><span class="line"><span class="comment">//类型 6</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">toast</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">binding</span> <span class="attr">template</span>=<span class="string">&quot;ToastText03&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">binding</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">toast</span>&gt;</span></span></span><br><span class="line"><span class="comment">//类型 7</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">toast</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">binding</span> <span class="attr">template</span>=<span class="string">&quot;ToastText04&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">&quot;3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">binding</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">visual</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">toast</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h1 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h1><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> Windows.Data.Xml.Dom;</span><br><span class="line"><span class="keyword">using</span> Windows.UI.Notifications;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title">ToastLib</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义通知模板和XML节点</span></span><br><span class="line">    <span class="keyword">private</span> ToastTemplateType toastTemplate;</span><br><span class="line">    <span class="keyword">private</span> XmlDocument toastXml;</span><br><span class="line">    <span class="keyword">private</span> IXmlNode toastNode;</span><br><span class="line">    <span class="keyword">private</span> XmlNodeList toastTextElements;</span><br><span class="line">    <span class="keyword">private</span> XmlNodeList toastImageAttributes;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消息类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> toastType;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> ToastType &#123;</span><br><span class="line">        <span class="keyword">set</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">value</span> &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">value</span> &lt;= <span class="number">7</span>) &#123;</span><br><span class="line">                toastType = <span class="keyword">value</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentOutOfRangeException();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> toastType;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数，传入通知模板种类即可</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ToastLib</span>(<span class="params"><span class="built_in">int</span> type = <span class="number">0</span></span>)</span> &#123;</span><br><span class="line">        ToastType = type;</span><br><span class="line">        toastTemplate = (ToastTemplateType)ToastType;</span><br><span class="line">        toastXml = ToastNotificationManager.GetTemplateContent(toastTemplate);</span><br><span class="line">        toastTextElements = toastXml.GetElementsByTagName(<span class="string">&quot;text&quot;</span>);</span><br><span class="line">        toastImageAttributes = toastXml.GetElementsByTagName(<span class="string">&quot;image&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成通知XML的关键函数，用于传入通知图片的连接和通知文字的内容</span></span><br><span class="line">    <span class="comment">//传入字符串sample &quot;消息内容&quot; or $&quot;ms-appx:///assets/图片文件名&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ToastLib <span class="title">makeToast</span>(<span class="params">List&lt;<span class="built_in">string</span>&gt; toastPara</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">int</span>[] toastParaNumArr = &#123; <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span> &#125;;</span><br><span class="line">        <span class="keyword">if</span> (toastPara.Count == toastParaNumArr[ToastType]) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (ToastType) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    toastTextElements[<span class="number">0</span>].AppendChild(toastXml.CreateTextNode(toastPara[<span class="number">0</span>]));</span><br><span class="line">                    ((XmlElement)toastImageAttributes[<span class="number">0</span>]).SetAttribute(<span class="string">&quot;src&quot;</span>, toastPara[<span class="number">1</span>]);</span><br><span class="line">                    ((XmlElement)toastImageAttributes[<span class="number">0</span>]).SetAttribute(<span class="string">&quot;alt&quot;</span>, <span class="string">&quot;logo&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    ((XmlElement)toastImageAttributes[<span class="number">0</span>]).SetAttribute(<span class="string">&quot;src&quot;</span>, toastPara[<span class="number">0</span>]);</span><br><span class="line">                    ((XmlElement)toastImageAttributes[<span class="number">0</span>]).SetAttribute(<span class="string">&quot;alt&quot;</span>, <span class="string">&quot;logo&quot;</span>);</span><br><span class="line">                    toastTextElements[<span class="number">0</span>].AppendChild(toastXml.CreateTextNode(toastPara[<span class="number">1</span>]));</span><br><span class="line">                    toastTextElements[<span class="number">1</span>].AppendChild(toastXml.CreateTextNode(toastPara[<span class="number">2</span>]));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                    ((XmlElement)toastImageAttributes[<span class="number">0</span>]).SetAttribute(<span class="string">&quot;src&quot;</span>, toastPara[<span class="number">0</span>]);</span><br><span class="line">                    ((XmlElement)toastImageAttributes[<span class="number">0</span>]).SetAttribute(<span class="string">&quot;alt&quot;</span>, <span class="string">&quot;logo&quot;</span>);</span><br><span class="line">                    toastTextElements[<span class="number">0</span>].AppendChild(toastXml.CreateTextNode(toastPara[<span class="number">1</span>]));</span><br><span class="line">                    toastTextElements[<span class="number">1</span>].AppendChild(toastXml.CreateTextNode(toastPara[<span class="number">2</span>]));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                    ((XmlElement)toastImageAttributes[<span class="number">0</span>]).SetAttribute(<span class="string">&quot;src&quot;</span>, toastPara[<span class="number">0</span>]);</span><br><span class="line">                    ((XmlElement)toastImageAttributes[<span class="number">0</span>]).SetAttribute(<span class="string">&quot;alt&quot;</span>, <span class="string">&quot;logo&quot;</span>);</span><br><span class="line">                    toastTextElements[<span class="number">0</span>].AppendChild(toastXml.CreateTextNode(toastPara[<span class="number">1</span>]));</span><br><span class="line">                    toastTextElements[<span class="number">1</span>].AppendChild(toastXml.CreateTextNode(toastPara[<span class="number">2</span>]));</span><br><span class="line">                    toastTextElements[<span class="number">2</span>].AppendChild(toastXml.CreateTextNode(toastPara[<span class="number">3</span>]));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                    toastTextElements[<span class="number">0</span>].AppendChild(toastXml.CreateTextNode(toastPara[<span class="number">0</span>]));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">                    toastTextElements[<span class="number">0</span>].AppendChild(toastXml.CreateTextNode(toastPara[<span class="number">0</span>]));</span><br><span class="line">                    toastTextElements[<span class="number">1</span>].AppendChild(toastXml.CreateTextNode(toastPara[<span class="number">1</span>]));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    toastTextElements[<span class="number">0</span>].AppendChild(toastXml.CreateTextNode(toastPara[<span class="number">0</span>]));</span><br><span class="line">                    toastTextElements[<span class="number">1</span>].AppendChild(toastXml.CreateTextNode(toastPara[<span class="number">1</span>]));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">                    toastTextElements[<span class="number">0</span>].AppendChild(toastXml.CreateTextNode(toastPara[<span class="number">0</span>]));</span><br><span class="line">                    toastTextElements[<span class="number">1</span>].AppendChild(toastXml.CreateTextNode(toastPara[<span class="number">1</span>]));</span><br><span class="line">                    toastTextElements[<span class="number">2</span>].AppendChild(toastXml.CreateTextNode(toastPara[<span class="number">2</span>]));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入点按通知进入App以后向App传入的参数</span></span><br><span class="line">    <span class="comment">//para example &quot;&#123;&quot;type&quot;:&quot;toast&quot;,&quot;param1&quot;:&quot;12345&quot;,&quot;param2&quot;:&quot;67890&quot;&#125;&quot;</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ToastLib <span class="title">addToastLaunchPara</span>(<span class="params"><span class="built_in">string</span> launchPara</span>)</span> &#123;</span><br><span class="line">        ((XmlElement)toastNode).SetAttribute(<span class="string">&quot;launch&quot;</span>, launchPara);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//改变通知的声音</span></span><br><span class="line">    <span class="comment">//the avaliable tones are here:Default,IM,Mail,Reminder,SMS,Looping.Alarm,Looping.Alarm2,Looping.Alarm3,Looping.Alarm4,Looping.Alarm5,Looping.Alarm6,Looping.Alarm7,Looping.Alarm8,Looping.Alarm9,Looping.Alarm10,Looping.Call,Looping.Call2,Looping.Call3,Looping.Call4,Looping.Call5,Looping.Call6,Looping.Call7,Looping.Call8,Looping.Call9,Looping.Call10</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ToastLib <span class="title">setToastTone</span>(<span class="params"><span class="built_in">string</span> tone</span>)</span> &#123;</span><br><span class="line">        XmlElement audio = toastXml.CreateElement(<span class="string">&quot;audio&quot;</span>);</span><br><span class="line">        audio.SetAttribute(<span class="string">&quot;src&quot;</span>, <span class="string">$&quot;ms-winsoundevent:Notification.&quot;</span> + tone);</span><br><span class="line">        toastNode.AppendChild(audio);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//改变通知的时长</span></span><br><span class="line">    <span class="comment">//only 2 types of paras short or long</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ToastLib <span class="title">setToastDuringTime</span>(<span class="params"><span class="built_in">string</span> duringTime</span>)</span> &#123;</span><br><span class="line">        ((XmlElement)toastNode).SetAttribute(<span class="string">&quot;duration&quot;</span>, duringTime);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示通知</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showToast</span>()</span> &#123;</span><br><span class="line">        ToastNotification toast = <span class="keyword">new</span> ToastNotification(toastXml);</span><br><span class="line">        ToastNotificationManager.CreateToastNotifier().Show(toast);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><p>使用方式非常简单，类似于 jQuery 的连缀操作，可以有选择地对通知进行定制。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">void</span> <span class="title function_">toastInfo</span>(<span class="params"><span class="built_in">string</span> info</span>) &#123;</span><br><span class="line">    <span class="comment">//默认使用第 0 个模板，如果构造时候传入其他参数则可以使用其他模板</span></span><br><span class="line">    <span class="title class_">ToastLib</span> toastLib = <span class="keyword">new</span> <span class="title class_">ToastLib</span>();</span><br><span class="line">    <span class="comment">//需要将要传入 makeToast 的字符串写入一个 List 中</span></span><br><span class="line">    <span class="title class_">List</span>&lt;<span class="built_in">string</span>&gt; toastStrs = <span class="keyword">new</span> <span class="title class_">List</span>&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line">    toastStrs.<span class="title class_">Add</span>(info);</span><br><span class="line">    toastStrs.<span class="title class_">Add</span>(<span class="string">&quot;there&#x27;s no logo :(&quot;</span>);</span><br><span class="line">    <span class="comment">//最简单的 toast，其余参数均使用默认</span></span><br><span class="line">    toastLib.<span class="title function_">makeToast</span>(toastStrs).<span class="title function_">showToast</span>();</span><br><span class="line">    <span class="comment">//使用连缀操作进行 toast 定制化设置，最终调用 showToast()进行展示，具体参数可以参考对于每一个函数的注释</span></span><br><span class="line">    toastLib.<span class="title function_">makeToast</span>(toastStrs).<span class="title function_">setToastTone</span>(<span class="string">&quot;IM&quot;</span>).<span class="title function_">setToastDuringTime</span>(<span class="string">&quot;long&quot;</span>).<span class="title function_">showToast</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="获取文中代码"><a href="#获取文中代码" class="headerlink" title="获取文中代码"></a>获取文中代码</h1><p>在 GitHub 的 HelloBUPT 项目中可以得到代码：<a href="https://github.com/imaginezz/helloBUPT/blob/master/beiyou/CommonLibrary/ToastLib.cs">https://github.com/imaginezz/helloBUPT/blob/master/beiyou/CommonLibrary/ToastLib.cs</a></p>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>Windows 10 UWP 开发：如何弹出消息通知：<a href="http://edi.wang/post/2015/11/8/uwp-toast-notification?utm_source=tuicool&utm_medium=referral">http://edi.wang/post/2015/11/8/uwp-toast-notification?utm_source=tuicool&amp;utm_medium=referral</a></p>
<p>自适应和交互式 Toast 通知：<a href="https://msdn.microsoft.com/zh-cn/windows/uwp/controls-and-patterns/tiles-and-notifications-adaptive-interactive-toasts">https://msdn.microsoft.com/zh-cn/windows/uwp/controls-and-patterns/tiles-and-notifications-adaptive-interactive-toasts</a></p>
<p>使用 Nuget 包发送本地通知：<a href="https://msdn.microsoft.com/windows/uwp/controls-and-patterns/tiles-and-notifications-sending-a-local-tile-notification">https://msdn.microsoft.com/windows/uwp/controls-and-patterns/tiles-and-notifications-sending-a-local-tile-notification</a></p>
<p>ToastNotification Class：<a href="https://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.notifications.toastnotification.aspx">https://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.notifications.toastnotification.aspx</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>CSharp</category>
      </categories>
      <tags>
        <tag>CSharp</tag>
        <tag>UWP</tag>
        <tag>Toast</tag>
        <tag>通知</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7+Apache配置PHP7</title>
    <url>/centos7_apache_php7/</url>
    <content><![CDATA[<h1 id="下载和准备工作"><a href="#下载和准备工作" class="headerlink" title="下载和准备工作"></a>下载和准备工作</h1><p>在 PHP 官网找到 PHP7.0.5 的下载地址，并且使用 wget 下载</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wget</span> http://cn2.php.net/get/php-<span class="number">7</span>.<span class="number">0</span>.<span class="number">5</span>.tar.gz/from/this/mirror</span><br></pre></td></tr></table></figure>

<p>下载之后解压</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">tar -vzxf mirror</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>安装之前，确定一些 PHP 的依赖包已经安装，如果没有，可以一并安装</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">yum</span> -y install libjpeg libjpeg-devel libpng libpng-devel free<span class="keyword">type</span> freetype-devel libxml2 libxml2-devel mysql pcre-devel php-mcrypt libmcrypt libmcrypt-devel</span><br></pre></td></tr></table></figure>

<p>如果没法安装一些库的话，可以先为 centos 配置 rpmforge 及 epel 源，具体方法可以搜索一下。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>进入解压之后的文件夹，进行配置，并输入配置参数</p>
<figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/php7 <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-config-file-path=/usr/local/php7/etc <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-mcrypt=/usr/include <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-mysqli=mysqlnd <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-pdo-mysql=mysqlnd <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-gd <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-iconv <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-zlib <span class="string">\</span></span><br><span class="line">--enable-xml <span class="string">\</span></span><br><span class="line">--enable-bcmath <span class="string">\</span></span><br><span class="line">--enable-shmop <span class="string">\</span></span><br><span class="line">--enable-sysvsem <span class="string">\</span></span><br><span class="line">--enable-inline-optimization <span class="string">\</span></span><br><span class="line">--enable-mbregex <span class="string">\</span></span><br><span class="line">--enable-fpm <span class="string">\</span></span><br><span class="line">--enable-mbstring <span class="string">\</span></span><br><span class="line">--enable-ftp <span class="string">\</span></span><br><span class="line">--enable-gd-<span class="keyword">native</span>-ttf <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-openssl <span class="string">\</span></span><br><span class="line">--enable-pcntl <span class="string">\</span></span><br><span class="line">--enable-sockets <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-xmlrpc <span class="string">\</span></span><br><span class="line">--enable-zip <span class="string">\</span></span><br><span class="line">--enable-soap <span class="string">\</span></span><br><span class="line">--without-pear <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-gettext <span class="string">\</span></span><br><span class="line">--enable-session <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-curl <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-jpeg-dir <span class="string">\</span></span><br><span class="line">--<span class="keyword">with</span>-freetype-dir <span class="string">\</span></span><br><span class="line">--enable-opcache</span><br></pre></td></tr></table></figure>

<p>然后编译安装</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="built_in">make</span> &amp;&amp; <span class="built_in">make</span> install</span><br></pre></td></tr></table></figure>

<h1 id="配置-PHP7"><a href="#配置-PHP7" class="headerlink" title="配置 PHP7"></a>配置 PHP7</h1><p>复制一些配置文件</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">cp php.ini<span class="operator">-</span>production <span class="regexp">/usr/</span>local<span class="regexp">/php7/</span>etc<span class="operator">/</span>php.ini</span><br><span class="line">cp sapi<span class="regexp">/fpm/</span><span class="keyword">init</span>.d.php<span class="operator">-</span>fpm <span class="regexp">/etc/</span><span class="keyword">init</span>.d<span class="operator">/</span>php7<span class="operator">-</span>fpm</span><br><span class="line">chmod <span class="operator">+</span>x <span class="regexp">/etc/</span><span class="keyword">init</span>.d<span class="operator">/</span>php7<span class="operator">-</span>fpm</span><br><span class="line">cp <span class="regexp">/usr/</span>local<span class="regexp">/php7/</span>etc<span class="regexp">/php-fpm.conf.default /</span>usr<span class="regexp">/local/</span>php7<span class="regexp">/etc/</span>php<span class="operator">-</span>fpm.conf</span><br><span class="line">cp <span class="regexp">/usr/</span>local<span class="regexp">/php7/</span>etc<span class="regexp">/php-fpm.d/</span>www.conf.default <span class="regexp">/usr/</span>local<span class="regexp">/php7/</span>etc<span class="regexp">/php-fpm.d/</span>www.conf</span><br></pre></td></tr></table></figure>

<p>启动 php-fpm</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/</span><span class="keyword">init</span>.d<span class="operator">/</span>php7<span class="operator">-</span>fpm start</span><br></pre></td></tr></table></figure>

<p>再启动 php-fpm 之后，如果出现问题，可以修改配置文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/usr/</span>local<span class="regexp">/php7/</span>etc<span class="regexp">/php-fpm.d/</span>www.conf</span><br></pre></td></tr></table></figure>

<p>把监听的端口改变一下 然后可以查看 php 版本</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/php7/</span>bin/php -v</span><br></pre></td></tr></table></figure>

<p>可以看到，已经是 PHP7 了。</p>
<p>安装方法可以参考：<a href="http://www.tuicool.com/articles/BR7Bza">http://www.tuicool.com/articles/BR7Bza</a></p>
<h1 id="配置-Apache"><a href="#配置-Apache" class="headerlink" title="配置 Apache"></a>配置 Apache</h1><p>这里，使用 php-fpm 和 fast-cgi 进行配合，抛弃之前的 php_moudel。</p>
<p>使用 Apache2.4 可以支持的最简单的 ProxyPass 方法，在 Apache 配置文件中的<code>&lt;/Directory&gt;</code> 之后加入</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;LocationMatch ^(.*\.php)$&gt;</span></span><br><span class="line"><span class="attribute">ProxyPass</span> fcgi://<span class="number">127.0.0.1:9000</span>/path/to/webroot/</span><br><span class="line"><span class="attribute">ProxyErrorOverride</span> <span class="literal">on</span></span><br><span class="line"><span class="section">&lt;/LocationMatch&gt;</span></span><br></pre></td></tr></table></figure>

<p>重启 Apache，完成！</p>
<p>具体配置方法可以参考：<a href="https://cnzhx.net/blog/apache-httpd-mod_proxy_fcgi-php-fpm/">https://cnzhx.net/blog/apache-httpd-mod_proxy_fcgi-php-fpm/</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Apache</tag>
        <tag>CentOS</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7下安装Python3</title>
    <url>/centos7_python3/</url>
    <content><![CDATA[<p>CentOS 默认使用的 Python 版本是 Python 2.7.5，将 Python 默认版本平稳升级到 Python3 而不影响 Yum（Yum 依赖于 Python2.7）还是需要一些步骤的。</p>
<h1 id="下载编译安装"><a href="#下载编译安装" class="headerlink" title="下载编译安装"></a>下载编译安装</h1><p>下载最新的 Python3.5.1，解压之后进入目录</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">wget</span> https://www.python.org/ftp/python/<span class="number">3</span>.<span class="number">5</span>.<span class="number">1</span>/Python-<span class="number">3</span>.<span class="number">5</span>.<span class="number">1</span>.tgz</span><br><span class="line"><span class="attribute">tar</span> -xf Python-<span class="number">3</span>.<span class="number">5</span>.<span class="number">1</span>.tgz</span><br><span class="line"><span class="attribute">cd</span> Python-<span class="number">3</span>.<span class="number">5</span>.<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>编译安装 Python3.5.1（安装到/usr/python3）</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /usr/<span class="keyword">python3</span></span><br><span class="line">./configure --prefix=/usr/<span class="keyword">python3</span></span><br><span class="line"><span class="keyword">make</span></span><br><span class="line"><span class="keyword">make</span> install</span><br></pre></td></tr></table></figure>

<p><code>./configure</code> 命令执行完毕之后创建一个文件 creating Makefile，供下面的 make 命令使用 ；执行 <code>make install</code> 之后就会把程序安装到指定的目录中去 这三条命令都需要等待一段时间，需要耐心等待</p>
<h1 id="让系统默认使用-Python3"><a href="#让系统默认使用-Python3" class="headerlink" title="让系统默认使用 Python3"></a>让系统默认使用 Python3</h1><p>进入 <code>/usr/bin</code>目录下，查看 python 有关的文件信息</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> /usr/bin</span><br><span class="line"><span class="keyword">ll</span> | <span class="keyword">grep</span> <span class="keyword">python</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>可以看见该目录中有 python、python2、python2.7 三个文件，并且都依次指向了 python2.7 而刚刚将 Python3.5 编译安装之后在/usr/python3/bin 下会自动生成一个 python3 的连接，他指向 bin 目录中的 python3.5 现在让默认的 python 文件指向 python3（先把指向 python2 的 python 文件备份一份）</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">mv <span class="keyword">python</span> <span class="keyword">python</span>.bak</span><br><span class="line"><span class="keyword">ln</span> -s /usr/<span class="keyword">python3</span>/bin/<span class="keyword">python3</span> /usr/bin/<span class="keyword">python</span></span><br></pre></td></tr></table></figure>

<p>现在查看一下 python 的版本</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">python</span> --<span class="keyword">version</span></span><br><span class="line">python2 --<span class="keyword">version</span></span><br></pre></td></tr></table></figure>

<p>发现默认 python 的版本为刚刚编译安装的 3.5.1，而 python2 的版本为系统自带的 2.7.5，已经调整成功</p>
<h1 id="让-Yum-继续使用-Python2-7"><a href="#让-Yum-继续使用-Python2-7" class="headerlink" title="让 Yum 继续使用 Python2.7"></a>让 Yum 继续使用 Python2.7</h1><p>修改 Yum 配置文件，使其调用 Python2.7</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/usr/</span>bin/yum</span><br></pre></td></tr></table></figure>

<p>将第一行的</p>
<figure class="highlight d"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/python</span></span><br></pre></td></tr></table></figure>

<p>修改为</p>
<figure class="highlight d"><table><tr><td class="code"><pre><span class="line"><span class="meta">#! /usr/bin/python2</span></span><br><span class="line">或者</span><br><span class="line"><span class="meta">#! /usr/bin/python2.7</span></span><br></pre></td></tr></table></figure>

<p>如果使用 yum 时候还出错的话，将出错的文件开头也按照上述说明改写即可。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 下安装Ftp服务</title>
    <url>/centos_7_ftp/</url>
    <content><![CDATA[<p>vsftpd 是 Linux 下非常流行的 ftp 服务器，这次就是用这款软件在 CentOS 7 下搭建一个 ftp 服务器。</p>
<h1 id="安装-vsftpd"><a href="#安装-vsftpd" class="headerlink" title="安装 vsftpd"></a>安装 vsftpd</h1><p>检查是否安装 vsftpd</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">rpm -<span class="keyword">qa</span> | <span class="keyword">grep</span> vsftpd</span><br></pre></td></tr></table></figure>

<p>如果没有安装，就使用 yum 安装，并且设置开机启动</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">yum install -y vsftpd</span><br><span class="line">systemctl <span class="built_in">enable</span> vsftpd</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="基于虚拟用户配置-ftp-服务器"><a href="#基于虚拟用户配置-ftp-服务器" class="headerlink" title="基于虚拟用户配置 ftp 服务器"></a>基于虚拟用户配置 ftp 服务器</h1><p>虚拟用户就是指只针对于 ftp 服务的用户，这些用户并不是 Linux 管理，没有使用真实的帐户，只是通过映射到真实帐户和设置权限的目的。虚拟用户不能登录系统。</p>
<!-- more -->

<h2 id="打开配置文件并修改"><a href="#打开配置文件并修改" class="headerlink" title="打开配置文件并修改"></a>打开配置文件并修改</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/vsftpd/vsftpd.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>

<p>作如下修改</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">anonymous_enable</span>=<span class="literal">NO</span> //设定不允许匿名访问</span><br><span class="line"><span class="attr">local_enable</span>=<span class="literal">YES</span> //设定本地用户可以访问。注：如使用虚拟宿主用户，在该项目设定为 <span class="literal">NO</span> 的情况下所有虚拟用户将无法访问</span><br><span class="line"><span class="attr">chroot_list_enable</span>=<span class="literal">YES</span> //使用户不能离开主目录</span><br><span class="line"><span class="attr">ascii_upload_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">ascii_download_enable</span>=<span class="literal">YES</span> //设定支持 ASCII 模式的上传和下载功能</span><br><span class="line"><span class="attr">pam_service_name</span>=vsftpd //PAM 认证文件名。PAM 将根据/etc/pam.d/vsftpd 进行认证</span><br></pre></td></tr></table></figure>

<p>并添加这些配置项</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">guest_enable</span>=<span class="literal">YES</span> //设定启用虚拟用户功能</span><br><span class="line"><span class="attr">guest_username</span>=ftp //指定虚拟用户的宿主用户，CentOS 中已经有内置的 ftp 用户了</span><br><span class="line"><span class="attr">user_config_dir</span>=/etc/vsftpd/vuser_conf //设定虚拟用户个人 vsftp 的 CentOS FTP 服务文件存放路径。存放虚拟用户个性的 CentOS FTP 服务文件(配置文件名=虚拟用户名）</span><br></pre></td></tr></table></figure>

<h2 id="对虚拟用户进行认证"><a href="#对虚拟用户进行认证" class="headerlink" title="对虚拟用户进行认证"></a>对虚拟用户进行认证</h2><p>首先，安装 Berkeley DB 工具，如果找不到 db_load 就是没有安装这个包</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> db4 db4-utils</span><br></pre></td></tr></table></figure>

<p>接着，创建用户密码文本</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>vsftpd/vuser_passwd.txt</span><br></pre></td></tr></table></figure>

<p>编辑内容例如：</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">test</span></span><br><span class="line"><span class="keyword"></span>123</span><br></pre></td></tr></table></figure>

<p>注意奇行是用户名，偶行是密码，可以有多个用户名和密码，只需要遵循上面法则即可。 生成虚拟用户文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">db_load -T -t hash -f <span class="regexp">/etc/</span>vsftpd<span class="regexp">/vuser_passwd.txt /</span>etc<span class="regexp">/vsftpd/</span>vuser_passwd.db</span><br></pre></td></tr></table></figure>

<p>编辑认证文件/etc/pam.d/vsftpd，全部注释掉原来语句，再增加以下两句：</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">auth required pam_userdb.so <span class="attribute">db</span>=/etc/vsftpd/vuser_passwd</span><br><span class="line">account required pam_userdb.so <span class="attribute">db</span>=/etc/vsftpd/vuser_passwd</span><br></pre></td></tr></table></figure>

<p>注意：需要加在文件开头，或者注释掉之前的语句 最后，创建虚拟用户配置文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">mkdir <span class="regexp">/etc/</span>vsftpd<span class="regexp">/vuser_conf/</span></span><br><span class="line">vim <span class="regexp">/etc/</span>vsftpd<span class="regexp">/vuser_conf/</span>test <span class="regexp">//</span>文件名等于 vuser_passwd.txt 里面的账户名，否则下面设置无效</span><br></pre></td></tr></table></figure>

<p>文件内容如下</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_root</span>=/var/www/html //虚拟用户根目录,根据实际情况修改</span><br><span class="line"><span class="attr">write_enable</span>=<span class="literal">YES</span> //可写</span><br><span class="line"><span class="attr">anon_umask</span>=<span class="number">022</span> //掩码</span><br><span class="line"><span class="attr">anon_world_readable_only</span>=<span class="literal">NO</span></span><br><span class="line"><span class="attr">anon_upload_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">anon_mkdir_write_enable</span>=<span class="literal">YES</span></span><br><span class="line"><span class="attr">anon_other_write_enable</span>=<span class="literal">YES</span></span><br></pre></td></tr></table></figure>

<h1 id="另参考"><a href="#另参考" class="headerlink" title="另参考"></a>另参考</h1><ul>
<li><p><a href="http://www.osyunwei.com/archives/9006.html">http://www.osyunwei.com/archives/9006.html</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/xiongpq/p/3384759.html">http://www.cnblogs.com/xiongpq/p/3384759.html</a></p>
</li>
<li><p><a href="http://os.51cto.com/art/201002/184610.htm">http://os.51cto.com/art/201002/184610.htm</a></p>
</li>
</ul>
<h1 id="有坑提示"><a href="#有坑提示" class="headerlink" title="有坑提示"></a>有坑提示</h1><p>在设置文件权限的时候，不能将 ftp 目录的权限设置为 777，这样 vsftp 是禁止登陆的（但是错误提示不是权限设置有误而是密码错误），如果需要更高权限的操作，可以将该目录嵌套于另一个低权限的目录下面。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>FTP</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7下使用iptables代替FireWall防火墙</title>
    <url>/centos_7_iptables/</url>
    <content><![CDATA[<p>CentOS 7 中默认的防火墙是 FireWall，不是很会用，所以想改成原来使用的 iptables。</p>
<h1 id="关闭-FireWall"><a href="#关闭-FireWall" class="headerlink" title="关闭 FireWall"></a>关闭 FireWall</h1><figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">systemctl <span class="keyword">stop</span> firewalld.service <span class="meta">#停止 firewall</span></span><br><span class="line">systemctl <span class="keyword">disable</span> firewalld.service <span class="meta">#禁止 firewall 开机启动</span></span><br></pre></td></tr></table></figure>

<h1 id="安装-iptables"><a href="#安装-iptables" class="headerlink" title="安装 iptables"></a>安装 iptables</h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> iptables-services</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="配置-iptables"><a href="#配置-iptables" class="headerlink" title="配置 iptables"></a>配置 iptables</h1><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>sysconfig/iptables</span><br></pre></td></tr></table></figure>

<p>配置文件参考：</p>
<figure class="highlight pf"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sample configuration for iptables service</span></span><br><span class="line"><span class="comment"># you can edit this manually or use system-config-firewall</span></span><br><span class="line"><span class="comment"># please do not ask us to add additional ports/services to</span></span><br><span class="line">this <span class="keyword">default</span> configuration</span><br><span class="line">*filter</span><br><span class="line">:INPUT ACCEPT [<span class="number">0</span>:<span class="number">0</span>]</span><br><span class="line">:FORWARD ACCEPT [<span class="number">0</span>:<span class="number">0</span>]</span><br><span class="line">:OUTPUT ACCEPT [<span class="number">0</span>:<span class="number">0</span>]</span><br><span class="line">-A INPUT -m <span class="keyword">state</span> --state RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line">-A INPUT -p icmp -j ACCEPT</span><br><span class="line">-A INPUT -i lo -j ACCEPT</span><br><span class="line">-A INPUT -p tcp -m <span class="keyword">state</span> --state NEW -m tcp --dport <span class="number">22</span> -j A</span><br><span class="line">CCEPT</span><br><span class="line">-A INPUT -p tcp -m <span class="keyword">state</span> --state NEW -m tcp --dport <span class="number">21</span> -j A</span><br><span class="line">CCEPT</span><br><span class="line">-A INPUT -p tcp -m <span class="keyword">state</span> --state NEW -m tcp --dport <span class="number">20</span> -j A</span><br><span class="line">CCEPT</span><br><span class="line">-A INPUT -p tcp -m <span class="keyword">state</span> --state NEW -m tcp --dport <span class="number">80</span> -j A</span><br><span class="line">CCEPT</span><br><span class="line">-A INPUT -p tcp -m <span class="keyword">state</span> --state NEW -m tcp --dport <span class="number">10020</span>:<span class="number">1</span></span><br><span class="line"><span class="number">0030</span> -j ACCEPT</span><br><span class="line">-A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">-A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><br><span class="line">COMMIT</span><br></pre></td></tr></table></figure>

<p>红色为新加入的行，开放了 21,20 和 80 端口作为 ftp 和 http 使用，开放了 10020 到 10030 端口作为 ftp 的 pasv 模式。</p>
<h1 id="保存配置"><a href="#保存配置" class="headerlink" title="保存配置"></a>保存配置</h1><figure class="highlight nsis"><table><tr><td class="code"><pre><span class="line"><span class="params">system</span>ctl restart iptables.service <span class="comment">#最后重启防火墙使配置生效</span></span><br><span class="line"><span class="params">system</span>ctl enable iptables.service <span class="comment">#设置开机启动</span></span><br></pre></td></tr></table></figure>

<h1 id="注：关闭-SELINUX-的方法："><a href="#注：关闭-SELINUX-的方法：" class="headerlink" title="注：关闭 SELINUX 的方法："></a>注：关闭 SELINUX 的方法：</h1><p>打开 SELINUX 配置文件</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">vim /etc/selinux/config</span><br></pre></td></tr></table></figure>

<p>修改配置文件</p>
<figure class="highlight clean"><table><tr><td class="code"><pre><span class="line">#SELINUX=enforcing #注释之</span><br><span class="line">#SELINUXTYPE=targeted #注释之</span><br><span class="line">SELINUX=disabled #增加</span><br></pre></td></tr></table></figure>

<p>使配置生效</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">setenforce</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>CentOS</tag>
        <tag>FireWall</tag>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title>在CentOS下搭建一个适用于个人的SVN环境</title>
    <url>/centos_svn/</url>
    <content><![CDATA[<h1 id="安装-SVN"><a href="#安装-SVN" class="headerlink" title="安装 SVN"></a>安装 SVN</h1><h2 id="检查是否安装"><a href="#检查是否安装" class="headerlink" title="检查是否安装"></a>检查是否安装</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rpm -qa subversion</span></span><br></pre></td></tr></table></figure>

<h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">yum <span class="built_in">remove</span> subversion</span><br></pre></td></tr></table></figure>

<h2 id="安装最新版本"><a href="#安装最新版本" class="headerlink" title="安装最新版本"></a>安装最新版本</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> subversion</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="检查是否安装成功"><a href="#检查是否安装成功" class="headerlink" title="检查是否安装成功"></a>检查是否安装成功</h2><figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">svnserve <span class="comment">--version</span></span><br></pre></td></tr></table></figure>

<p>（–之后一般跟选项的完整名称，-之后一般跟选项的单个字母缩写）</p>
<h1 id="创建项目仓库"><a href="#创建项目仓库" class="headerlink" title="创建项目仓库"></a>创建项目仓库</h1><h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /var/svn/svnrepos</span><br></pre></td></tr></table></figure>

<p>(-p 命令是当父目录不存在时创建它）</p>
<h2 id="创建项目仓库-1"><a href="#创建项目仓库-1" class="headerlink" title="创建项目仓库"></a>创建项目仓库</h2><figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">svnadmin <span class="keyword">create</span> /<span class="keyword">var</span>/svn/svnrepos</span><br></pre></td></tr></table></figure>

<h2 id="检查是否创建成功"><a href="#检查是否创建成功" class="headerlink" title="检查是否创建成功"></a>检查是否创建成功</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /var/svn/svnrepos</span><br></pre></td></tr></table></figure>

<p>之后使用 ll 查看是否多了一些文件夹（如果成功）</p>
<h1 id="配置项目库"><a href="#配置项目库" class="headerlink" title="配置项目库"></a>配置项目库</h1><h2 id="进入-conf-目录，了解配置文件："><a href="#进入-conf-目录，了解配置文件：" class="headerlink" title="进入 conf 目录，了解配置文件："></a>进入 conf 目录，了解配置文件：</h2><p><code>authz</code> 是权限控制文件 <code>passwd</code> 是账号密码文件 <code>svnserve.conf</code> 是 SVN 服务配置文件</p>
<h2 id="配置-passwd"><a href="#配置-passwd" class="headerlink" title="配置 passwd"></a>配置 <code>passwd</code></h2><p>根据 <code>users</code> 标签中的提示进行配置即可，等号左边是用户名，右边是密码</p>
<h2 id="配置-authz"><a href="#配置-authz" class="headerlink" title="配置 authz"></a>配置 <code>authz</code></h2><p>只有自己用，所以只是限定自己的用户有 rw 权限即可，在文末加入用户名和读写权限就可以了</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#example</span></span><br><span class="line"><span class="selector-attr">[/]</span></span><br><span class="line"><span class="function"><span class="title">abc</span><span class="params">(your username)</span></span> = rw</span><br></pre></td></tr></table></figure>

<h2 id="配置-svnserve-conf"><a href="#配置-svnserve-conf" class="headerlink" title="配置 svnserve.conf"></a>配置 <code>svnserve.conf</code></h2><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">anon-access</span> = none <span class="comment"># 使非授权用户无法访问</span></span><br><span class="line"><span class="attr">auth-access</span> = write <span class="comment"># 使授权用户有写权限</span></span><br><span class="line"><span class="attr">password-db</span> = password</span><br><span class="line"><span class="attr">authz-db</span> = authz <span class="comment"># 访问控制文件</span></span><br><span class="line"><span class="attr">realm</span> = imagine<span class="string">&#x27;s svn server # 认证命名空间，subversion 会在认证提示里显示，并且作为凭证缓存的关键字。</span></span><br></pre></td></tr></table></figure>

<p>采用默认配置. 以上语句都必须顶格写, 左侧不能留空格, 否则会出错.</p>
<h1 id="开放-SVN-端口"><a href="#开放-SVN-端口" class="headerlink" title="开放 SVN 端口"></a>开放 SVN 端口</h1><h2 id="修改-iptables"><a href="#修改-iptables" class="headerlink" title="修改 iptables"></a>修改 iptables</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">iptables -<span class="selector-tag">I</span> <span class="selector-tag">INPUT</span> -<span class="selector-tag">p</span> tcp <span class="attr">--dport</span> <span class="number">3690</span> -j ACCEPT</span><br></pre></td></tr></table></figure>

<h2 id="保存-iptables-配置"><a href="#保存-iptables-配置" class="headerlink" title="保存 iptables 配置"></a>保存 iptables 配置</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/</span>rc.d<span class="regexp">/init.d/i</span>ptables save</span><br></pre></td></tr></table></figure>

<h2 id="重启-iptables"><a href="#重启-iptables" class="headerlink" title="重启 iptables"></a>重启 iptables</h2><figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">service iptables restart</span></span><br></pre></td></tr></table></figure>

<h2 id="查看-iptables-状态"><a href="#查看-iptables-状态" class="headerlink" title="查看 iptables 状态"></a>查看 iptables 状态</h2><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/</span><span class="keyword">init</span>.d<span class="operator">/</span>iptables status</span><br></pre></td></tr></table></figure>

<h1 id="启动-SVN-服务"><a href="#启动-SVN-服务" class="headerlink" title="启动 SVN 服务"></a>启动 SVN 服务</h1><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">svnserve -d -r /<span class="keyword">var</span>/svn/svnrepos</span><br></pre></td></tr></table></figure>

<p>-d:守护进程   -r:svn 根目录</p>
<h1 id="连接-SVN"><a href="#连接-SVN" class="headerlink" title="连接 SVN"></a>连接 SVN</h1><p>使用 TortioseSVN 连接到 <code>svn://我的 ip 地址/</code> 输入前面设置的用户名密码即可访问</p>
<h1 id="配置开机启动"><a href="#配置开机启动" class="headerlink" title="配置开机启动"></a>配置开机启动</h1><p>编写脚本 <code>svn_startup.sh</code>，放在<code>/root/svn_startup.sh</code>，代码如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">export</span> LC_CTYPE=<span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br><span class="line">/usr/bin/svnserve -d -r /var/svn/svnrepos</span><br></pre></td></tr></table></figure>

<p>（关于绝对路径：在启动的时候环境变量可能没有加载，所以采用绝对路径比较保险，可以使用 <code>which svnserve</code> 命令来查询绝对路径）</p>
<h2 id="修改脚本权限"><a href="#修改脚本权限" class="headerlink" title="修改脚本权限"></a>修改脚本权限</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> ug+x svn_startup.sh</span><br></pre></td></tr></table></figure>

<p>或者</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">chmod</span> <span class="number">777</span> svn_startup.sh</span><br></pre></td></tr></table></figure>

<h2 id="添加自启动"><a href="#添加自启动" class="headerlink" title="添加自启动"></a>添加自启动</h2><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">vim /etc/rc.d/rc.<span class="keyword">local</span></span><br></pre></td></tr></table></figure>

<p>在文件末尾添加命令行脚本</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/root/</span>svn_startup.sh</span><br></pre></td></tr></table></figure>

<h2 id="重启之后确认启动成功"><a href="#重启之后确认启动成功" class="headerlink" title="重启之后确认启动成功"></a>重启之后确认启动成功</h2><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ps</span> -ef|<span class="keyword">grep</span> svnserve</span><br></pre></td></tr></table></figure>

<h1 id="checkout-网站工作目录"><a href="#checkout-网站工作目录" class="headerlink" title="checkout 网站工作目录"></a>checkout 网站工作目录</h1><figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line">svn co svn:<span class="string">//localhost</span> <span class="string">/var/www/html/</span> <span class="params">--username</span> user <span class="params">--password</span> passwd</span><br></pre></td></tr></table></figure>

<h1 id="使得-SVN-可以自动同步网站代码"><a href="#使得-SVN-可以自动同步网站代码" class="headerlink" title="使得 SVN 可以自动同步网站代码"></a>使得 SVN 可以自动同步网站代码</h1><h2 id="将工作目录转移到钩子文件夹"><a href="#将工作目录转移到钩子文件夹" class="headerlink" title="将工作目录转移到钩子文件夹"></a>将工作目录转移到钩子文件夹</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cd <span class="regexp">/var/</span>svn<span class="regexp">/svnrepos/</span>hooks</span><br></pre></td></tr></table></figure>

<h2 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h2><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">cp <span class="built_in">post</span>-commit.tmpl <span class="built_in">post</span>-commit</span><br><span class="line">chmod <span class="number">777</span> <span class="built_in">post</span>-commit</span><br></pre></td></tr></table></figure>

<h2 id="修改-post-commit-文件，加入以下代码"><a href="#修改-post-commit-文件，加入以下代码" class="headerlink" title="修改 post-commit 文件，加入以下代码"></a>修改 post-commit 文件，加入以下代码</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> LANG=zh.CN.UTF-8</span><br><span class="line"><span class="built_in">cd</span> /var/www/html/</span><br><span class="line">/usr/bin/svn update --username usrname --password passwd --no-auth-cache</span><br><span class="line"><span class="built_in">echo</span>`<span class="built_in">date</span>`,`<span class="built_in">whoami</span>`,<span class="variable">$REPOS</span>,<span class="variable">$REV</span> &gt;&gt;/var/svn/svnrepos/hooks/svn_hook.log</span><br></pre></td></tr></table></figure>

<h1 id="SVN-同步时注意"><a href="#SVN-同步时注意" class="headerlink" title="SVN 同步时注意"></a>SVN 同步时注意</h1><h2 id="工作目录需要先-checkout-前面已经-checkout-过了"><a href="#工作目录需要先-checkout-前面已经-checkout-过了" class="headerlink" title="工作目录需要先 checkout(前面已经 checkout 过了)"></a>工作目录需要先 checkout(前面已经 checkout 过了)</h2><p>先切换到工作目录 再用 SVN 的 <code>co</code> 或者 <code>checkout</code>命令进行 checkout</p>
<h2 id="如果工作目录有更改，需要-commit"><a href="#如果工作目录有更改，需要-commit" class="headerlink" title="如果工作目录有更改，需要 commit"></a>如果工作目录有更改，需要 <code>commit</code></h2><p>先切换到工作目录 再用 SVN 的 <code>commit</code> 或者 <code>ci</code> 命令进行同步 可能需要—message 或者-m 参数，后面跟上这次修改的一些信息即可</p>
<h2 id="如果工作目录中有新的文件，需要先添加到-SVN-中在同步"><a href="#如果工作目录中有新的文件，需要先添加到-SVN-中在同步" class="headerlink" title="如果工作目录中有新的文件，需要先添加到 SVN 中在同步"></a>如果工作目录中有新的文件，需要先添加到 SVN 中在同步</h2><p>使用 SVN 的 add 命令进行添加文件或者文件夹 如果需要添加的文件很多，可以使用 Linux 的 _通配符： svn add _/*</p>
<h2 id="批量添加-删除-SVN-同步的文件"><a href="#批量添加-删除-SVN-同步的文件" class="headerlink" title="批量添加/删除 SVN 同步的文件"></a>批量添加/删除 SVN 同步的文件</h2><p>使用 bash 命令</p>
<h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">svn status|<span class="type">grep</span> ? |<span class="type">awk</span> &#x27;&#123;print $<span class="number">2</span>&#125;&#x27;|<span class="type">xargs</span> svn add</span><br></pre></td></tr></table></figure>

<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight coq"><table><tr><td class="code"><pre><span class="line">svn status|<span class="type">grep</span> ! |<span class="type">awk</span> &#x27;&#123;print $<span class="number">2</span>&#125;&#x27;|<span class="type">xargs</span> svn del</span><br></pre></td></tr></table></figure>

<p>（转自：<a href="http://blog.csdn.net/ownfire/article/details/7930370">http://blog.csdn.net/ownfire/article/details/7930370</a>）</p>
<p>可以添加到 PATH 中，如<code>/usr/local/bin</code>，命令叫做 <code>svnaddall</code>和<code>svndelall</code></p>
<h2 id="如果-SVN-同步目录中出现中文，钩子无法正常运行需要修改系统的-locale"><a href="#如果-SVN-同步目录中出现中文，钩子无法正常运行需要修改系统的-locale" class="headerlink" title="如果 SVN 同步目录中出现中文，钩子无法正常运行需要修改系统的 locale"></a>如果 SVN 同步目录中出现中文，钩子无法正常运行需要修改系统的 locale</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> <span class="attribute">LC_CTYPE</span>=<span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br></pre></td></tr></table></figure>

<p>之后可以用 <code>locale</code> 命令检查 （添加 locale 的命令已经包含在自启动文件中了）</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>SVN</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title>记在ChromeBook中装入Ubuntu</title>
    <url>/chromebook_ubuntu/</url>
    <content><![CDATA[<p>前一阵升级了 Windows10 周年更新以后发现系统内自带了一个 Ubuntu 的 Bash，想去跑一些东西试试，结果令我失望。比如一些网络的命令没法正常使用，而且 jdk 似乎跑起来也有问题，后台服务也很奇怪（貌似把 shell 关掉以后就自己停止），所以种种原因让我不得不试着用别的办法来干活儿。</p>
<p>于是，从师兄那里拿到了一个 HP 的 ChromeBook14，长的挺漂亮，性能也还不错——CPU 是赛扬双核，4G 内存，16G 的 SSD（之后证明这么小的硬盘的确不够用）。所以准备把它的 ChromeOS 改装成 Ubuntu。查了一下，网上也有挺多资料。</p>
<h1 id="方案-1"><a href="#方案-1" class="headerlink" title="方案 1"></a>方案 1</h1><p>这个方案是利用 ChromeBook 中的 crouton 进行安装 Ubuntu。基本原理可以参考<a href="https://github.com/dnschneid/crouton">crouton 在 github 中的 readme</a>。 首先，在 ChromeBook 中开启开发者模式。【注意：这个操作会清理掉所有数据】</p>
<ul>
<li>按住 Esc+F3 (Refresh)，然后按 Power，接着就会进入恢复模式;</li>
<li>接着，按 Ctrl+D，它会提示您是否取消 Verification，按 Enter，关闭 verification</li>
<li>接着，Esc+F3 (Refresh)，然后按 Power，重启</li>
<li>接着按 Ctrl+D， 提示是否进入开发者模式，您的数据会被清除;</li>
<li>再次按 Ctrl+D，或者等待 30 秒左右，系统会引导您进入开发者模式。</li>
<li>漫长的等待。</li>
</ul>
<span id="more"></span>

<p>打开以后就可以去安装 crouton 了。但是这里遇到了一个问题，就是任何操作都需要翻墙，在 ChromeOS 中因为都是在浏览器的基础上的设置，所以基本都可以使用 SS 作 Socket5 代理，但是一旦进入命令行模式，这些代理可能都将会失效，导致无法下载系统镜像。所以，在我只有 SS 代理的情况下，这个方案最终失败。</p>
<p>如果有办法翻越长城，可以使用个方案让 ChromeOS 和 Ubuntu 都存在。 之后的具体步骤可以参考：</p>
<ul>
<li><p>ChromeBook 折腾小记：<a href="https://www.zybuluo.com/chopsticks/note/68204">https://www.zybuluo.com/chopsticks/note/68204</a></p>
</li>
<li><p>How to install ubuntu and minrcraft on chomebook：<a href="http://www.everydaylinuxuser.com/2014/03/how-to-install-ubuntu-and-minecraft-on.html">http://www.everydaylinuxuser.com/2014/03/how-to-install-ubuntu-and-minecraft-on.html</a></p>
</li>
<li><p>ChromeBook 玩机汇总：<a href="https://tieba.baidu.com/p/3507150438">https://tieba.baidu.com/p/3507150438</a></p>
</li>
</ul>
<h1 id="方案-2"><a href="#方案-2" class="headerlink" title="方案 2"></a>方案 2</h1><p>由于网络问题，我决定干掉原生的 ChromeOS，直接安装 Ubuntu。方法很简单，使用上一种方法中的办法开启开发者模式。</p>
<p>接着在开机时候会提示系统认证错误，然后按【Ctrl+L】进入 seaBios，这时候会发现 ChromeBook 已经和一台普通 PC 没有任何区别了。 现在，在其他电脑上准备一个 Ubuntu 镜像并且制作一个启动 U 盘（怎么做这里就不多说了）。</p>
<p>然后在启动之前插入 U 盘，进入警告画面的时候按 Ctl+L 进入 SeaBios，然后按照提示引导 U 盘（应该默认也会引导），接着按照正常的办法安装 Ubuntu 即可。注意在分区的时候直接删除掉 ChromeOS 的分区。</p>
<p>我这里使用的版本是 Ubuntu 16.04 LTS，屏幕亮度调节、WiFi、声音等一切驱动都正常，键盘上的功能按键也可以正常使用，除了触控板不是很灵敏，现在还没有找到解决方法，可以先用外接鼠标替代。</p>
<p>PS：启动以后可能会提示系统错误，不必管它，正常使用即可。</p>
<p>最后，晒一张安装成功的图片~</p>
<p><a href="/wp-content/uploads/2016/11/660408137320180608.jpg"><img data-src="/wp-content/uploads/2016/11/660408137320180608-1024x768.jpg" alt="660408137320180608"></a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Ubuntu</tag>
        <tag>ChromeBook</tag>
      </tags>
  </entry>
  <entry>
    <title>使用c++和XAML开发UWP程序</title>
    <url>/cpp_xaml_uwp/</url>
    <content><![CDATA[<h1 id="Windows-桌面程序开发一些方案"><a href="#Windows-桌面程序开发一些方案" class="headerlink" title="Windows 桌面程序开发一些方案"></a>Windows 桌面程序开发一些方案</h1><p>开发 Windows GUI 程序的方案有很多，接触过比较流行的大概有三种，一种是 C++和 Qt，一种是 HTML5+浏览器内核，最后一种是 C#+WPF。另外古老的 WinForms 和更古老的 MFC 也不多说了。</p>
<p>Qt 的跨平台特性得以开发的项目可以跨平台，而且各种 C++的组件非常丰富。但是但是 Qt 本身库的并不小，我也不是很喜欢 QML 那种 JSON 的书写方式，而且 Qt Creator 用起来也不太顺手，所以一般没怎么用过这种开发模式进行桌面应用的开发。</p>
<p>H5 和浏览器内核是一个不错的方式，可以轻松跨平台，而且 H5+JS 可以有很快的开发速度。主流的方案有 Electron、nwjs、cef 和 wke（其中<a href="http://www.danmakupie.com/">弹幕派</a>所用的方案就是 wke），但是 Electron 同样体积巨大，不利于应用的分发。wke 虽小但也很久没有更新，内核很老，bug 比较多。最近志鹏同学正在研究之前 wke 开发者新开发的 miniblink 内核，相信这个方案会比较优秀。</p>
<p>WPF 必须依赖于.NetFramework，所以无法跨平台，而且 XP 也不自带.Net，需要用户安装。另外，XAML 虽然写起来麻烦一些，但是开发漂亮的 GUI 还是比较方便。而最新的 UWP 技术也利用了 WPF 的 XAML 进行 UI 的设计，转型起来并不困难。</p>
<span id="more"></span>

<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>上周受到卤蛋同学的启发，如果需要使用 C++开发 GUI 程序难道只能用 Qt（或者北邮老师专用的 ege）？能不能使用熟悉的就技术来开发呢？于是在 Windows Dev Center 里找到了使用 C++和 XAML 开发 UWP 程序的方式。粗略看了一下，大概是使用经过微软扩展的 C++，名字叫 c++/cx，基于 Windows RT，但是不受.Net 的托管，也就是要自己处理垃圾回收（这方面理解不够深入，感觉大概是这个意思吧）。</p>
<p>但不管如何，可以使用 C++和 XAML 开发 Windows 应用还是让人眼前一亮，忍不住去尝试一下。所以，下面开工吧！</p>
<h1 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h1><p>开发环境必须使用 Visual Studio 2017，在新建项目中选择 Visua C++语言的 Windows 通用选项，建立一个空白应用即可。如果没有下载 SDK，上方会提示下载，如果没有显示该选项，说明需要在 VS 安装程序中安装一下 VS 对 C++ UWP 的支持。</p>
<p><img data-src="/wp-content/uploads/2017/09/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170924163941.png"></p>
<p>在几秒种后，Visual Studio 就会打开一个新建的应用。假设你对 WPF 很熟悉，你可以看见熟悉的 XAML 设计器，在左侧的解决方案管理器中，也可以看见 C++的文件以代码隐藏文件的形式被嵌在 xaml 文件之后，包含一个.h 文件和一个.cpp 文件。整个工程的组织形式和 WPF 极其相似，这足以让人很激动了。</p>
<h1 id="开始-Coding"><a href="#开始-Coding" class="headerlink" title="开始 Coding"></a>开始 Coding</h1><p>进一步熟悉一下项目组织形式，可以发现，除了 C++的语法和 C#有区别，开发思路和 WPF 中的 C#是基本一致的，于是对应卤蛋的大作业题目，我建立了一些类的头文件和相关实现，需要注意的是字符串的处理问题，如果要支持中文需要使用 wstring（其实这个问题也并不仅仅是这种时候才会遇到），但关键在于 XAML 中的字符串使用了另外一种并不是 C++标准库中的字符串类型 <code>Platform::String^</code>，所以需要一些函数来在这些字符串中进行转换。</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Platform</span><span class="symbol">:</span><span class="symbol">:String^</span> <span class="title class_">Runtime</span><span class="symbol">:</span><span class="symbol">:stops</span>(std::string s)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> ref new <span class="title class_">Platform</span><span class="symbol">:</span><span class="symbol">:String</span>(stows(s).c_str());</span><br><span class="line">&#125;</span><br><span class="line">std::wstring <span class="title class_">Runtime</span><span class="symbol">:</span><span class="symbol">:stows</span>(std::string s)</span><br><span class="line">&#123;</span><br><span class="line">  std::wstring ws;</span><br><span class="line">  ws.assign(s.<span class="keyword">begin</span>(), s.<span class="keyword">end</span>());</span><br><span class="line">  <span class="keyword">return</span> ws;</span><br><span class="line">&#125;</span><br><span class="line">std::string <span class="title class_">Runtime</span><span class="symbol">:</span><span class="symbol">:pstos</span>(<span class="title class_">Platform</span><span class="symbol">:</span><span class="symbol">:String^</span> ps)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> wstos(std::wstring(ps-&gt;<span class="title class_">Data</span>()));</span><br><span class="line">&#125;</span><br><span class="line">std::string <span class="title class_">Runtime</span><span class="symbol">:</span><span class="symbol">:wstos</span>(std::wstring ws)</span><br><span class="line">&#123;</span><br><span class="line">  std::string s;</span><br><span class="line">  s.assign(ws.<span class="keyword">begin</span>(), ws.<span class="keyword">end</span>());</span><br><span class="line">  <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br><span class="line">std::wstring <span class="title class_">Runtime</span><span class="symbol">:</span><span class="symbol">:pstows</span>(<span class="title class_">Platform</span><span class="symbol">:</span><span class="symbol">:String^</span> ps) &#123;</span><br><span class="line">  <span class="keyword">return</span> std::wstring(ps-&gt;<span class="title class_">Data</span>());</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Platform</span><span class="symbol">:</span><span class="symbol">:String^</span> <span class="title class_">Runtime</span><span class="symbol">:</span><span class="symbol">:wstops</span>(std::wstring ws) &#123;</span><br><span class="line">  <span class="keyword">return</span> ref new <span class="title class_">Platform</span><span class="symbol">:</span><span class="symbol">:String</span>(ws.c_str());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>具体转换关系可以参考下图，图片来自<a href="http://www.cnblogs.com/nio-nio/p/3511843.html">http://www.cnblogs.com/nio-nio/p/3511843.html</a></p>
<p><img data-src="/wp-content/uploads/2017/09/4f5f2392683c3f7111fe8c8f6adf7bdd.png"></p>
<p>在完成对底层数据对象的抽象以后，就可以着手设计界面和应用逻辑了。UI 的设计因为使用了 XAML，所以非常简单，所有的 XAML 特性都可以使用。而 UI 的事件绑定也和 C#非常类似，如果让 Vs 自动生成事件响应程序的话，它会在代码隐藏文件的头文件和实现文件中分别生成函数的声明和函数体，然后就可以直接在函数中写代码来控制它了。</p>
<h1 id="简单的尝试"><a href="#简单的尝试" class="headerlink" title="简单的尝试"></a>简单的尝试</h1><h2 id="页面导航"><a href="#页面导航" class="headerlink" title="页面导航"></a>页面导航</h2><p>首先说页面的导航，这里和 UWP 的概念非常吻合，只需要一行代码就可以实现。比如我现在需要导航到 UserPage.xaml，我只需要：</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="type">Frame</span>-&gt;<span class="type">Navigate</span>(<span class="type">UserPage</span>::typeid);</span><br></pre></td></tr></table></figure>

<p>就可以完成，有一点需要提醒的就是必须在.h 文件中引入 <code>UserPage.xaml.h</code> 才可以这样调用。</p>
<h2 id="获取事件触发者"><a href="#获取事件触发者" class="headerlink" title="获取事件触发者"></a>获取事件触发者</h2><p>获取事件触发者也很容易，和 C#中思路相当，事件委托的 Handler 中触发者和参数会被以 sender 和 e 的形式传入，只需要做一些类型转换就可以获得到，下面是一个例子：</p>
<figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line">void App1::QuestionListPage::OnPointerPressed(Platform::Object ^sender, Windows::UI::Xaml::Input::PointerRoutedEventArgs ^e)</span><br><span class="line">&#123;</span><br><span class="line">  StackPanel^ s = safe_cast&lt;StackPanel^&gt;(sender);</span><br><span class="line">  <span class="keyword">int</span> questionId =_wtoi(QA::Runtime::pstows( s-&gt;Name).c_str());</span><br><span class="line">  QA::Runtime::currentQuestion = QA::Runtime::questionList[questionId];</span><br><span class="line">  Frame-&gt;Navigate(QuestionPage::typeid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="生成-XAML-元素"><a href="#生成-XAML-元素" class="headerlink" title="生成 XAML 元素"></a>生成 XAML 元素</h2><p>不多说，直接贴上代码：</p>
<figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line">QuestionListPage::QuestionListPage()</span><br><span class="line">&#123;</span><br><span class="line">  InitializeComponent();</span><br><span class="line">  vector&lt;QA::Question*&gt;::iterator iter;</span><br><span class="line">  <span class="keyword">for</span> (iter = QA::Runtime::questionList.begin(); iter != QA::Runtime::questionList.end(); iter++) &#123;</span><br><span class="line">    auto questionStack = ref <span class="keyword">new</span> StackPanel();</span><br><span class="line">    QA::Question *question = *iter;</span><br><span class="line">    auto info = question-&gt;getInfo();</span><br><span class="line">    auto questionTitle = ref <span class="keyword">new</span> TextBlock();</span><br><span class="line">    questionTitle-&gt;Text = L<span class="string">&quot;问题:&quot;</span> + QA::Runtime::wstops(info[<span class="number">0</span>]);</span><br><span class="line">    questionTitle-&gt;FontSize = +<span class="number">30</span>;</span><br><span class="line">    auto userName = ref <span class="keyword">new</span> TextBlock();</span><br><span class="line">    userName-&gt;Text = L<span class="string">&quot;用户：&quot;</span> + QA::Runtime::wstops(QA::Runtime::currentUser-&gt;getUserName());</span><br><span class="line">    questionStack-&gt;Children-&gt;Append(questionTitle);</span><br><span class="line">    questionStack-&gt;Children-&gt;Append(userName);</span><br><span class="line">    questionStack-&gt;Name = question-&gt;getQuestionId().ToString();</span><br><span class="line">    questionStack-&gt;PointerPressed += ref <span class="keyword">new</span> Windows::UI::Xaml::Input::PointerEventHandler(this, &amp;App1::QuestionListPage::OnPointerPressed);</span><br><span class="line">    questionList-&gt;Items-&gt;Append(questionStack);</span><br><span class="line">    QA::Runtime::currentQuestion = question;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上代码在界面初始化以后动态加载了一个问题列表，其中包含了 Title 和 UserName，并且给 StackPanel 绑定了一个叫做 OnPointerPressed 的事件。（就是之前获取触发者中的代码） 一切都非常简单，不得不说微软已经把 c++/cx 改造得很像 C#了，甚至连委托都被加入了进去。</p>
<h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>最后想说说的就是应用中全局变量的实现。 本程序采用了静态类的方式实现了全局变量和一些基础方法的封装（比如各种字符串转换函数）。只需要把需要全局的变量设置成 static，并且赋予初始值，在需要的时候调用即可。以下是代码中全局的例子：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//classes.h</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Runtime</span> &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="type">static</span> <span class="type">int</span> userNum;</span><br><span class="line">  <span class="type">static</span> <span class="type">int</span> questionNum;</span><br><span class="line">  <span class="type">static</span> <span class="type">int</span> answerNum;</span><br><span class="line">  <span class="type">static</span> User *currentUser;</span><br><span class="line">  <span class="type">static</span> Question *currentQuestion;</span><br><span class="line">  <span class="type">static</span> vector&lt;User*&gt; userList;</span><br><span class="line">  <span class="type">static</span> vector&lt;Question*&gt; questionList;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//classes.cpp</span></span><br><span class="line"><span class="type">int</span> Runtime::userNum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> Runtime::questionNum = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> Runtime::answerNum = <span class="number">0</span>;</span><br><span class="line">Question *Runtime::currentQuestion = <span class="literal">nullptr</span>;</span><br><span class="line">User *Runtime::currentUser = <span class="literal">nullptr</span>;</span><br><span class="line">vector&lt;User*&gt; Runtime::userList = <span class="built_in">vector</span>&lt;User*&gt;();</span><br><span class="line">vector&lt;Question_&gt; Runtime::questionList = <span class="built_in">vector</span>&lt;Question_&gt;();</span><br></pre></td></tr></table></figure>

<p>对于全局方法，用法一样，不再赘述。</p>
<h1 id="可用的资源"><a href="#可用的资源" class="headerlink" title="可用的资源"></a>可用的资源</h1><ul>
<li>官方介绍：<a href="https://docs.microsoft.com/en-us/windows/uwp/get-started/create-a-basic-windows-10-app-in-cpp">https://docs.microsoft.com/en-us/windows/uwp/get-started/create-a-basic-windows-10-app-in-cpp</a>（目前也只找到了这一篇）</li>
<li>C++ WinRT 介绍：<a href="https://msdn.microsoft.com/zh-cn/magazine/mt745094">https://msdn.microsoft.com/zh-cn/magazine/mt745094</a></li>
<li>官方 GitHub 仓库：<a href="https://github.com/Microsoft/Windows-universal-samples/tree/master/Samples">https://github.com/Microsoft/Windows-universal-samples/tree/master/Samples</a>（每个例子的 C++文件夹中都是一些示例，文档有限，这些例子非常珍贵）</li>
</ul>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>说应用跑不起来是假的，自己写的应用，含着泪都要让它跑起来</p>
<p><img data-src="/wp-content/uploads/2017/09/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170924172202.png"></p>
<p>不过仔细思考一下，如果不是必须要用 C++，这种开发方案作用并不很大。首先资料太少，连 MSDN 上面都只能搜到 API，几乎没有任何示例，而社区中也几乎一丁点都见不到对这种方案的讨论，所以如果遇到坑基本只能自己靠经验解决（但如果太大呢），比如研究事件委托怎么写我就研究了半个晚上，没有 API 也没有文档。另外这种方案开发出的应用也只能跑在 Windows10 中，对于老版本的 Windows 和其他系统（感觉 Xarmain 也不会支持这种模式），所以应用范围也很受限。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>UWP</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>UWP</tag>
      </tags>
  </entry>
  <entry>
    <title>弹幕派——原来弹幕可以这样玩</title>
    <url>/danmakupie_so_cool/</url>
    <content><![CDATA[<h1 id="最新进展"><a href="#最新进展" class="headerlink" title="最新进展"></a>最新进展</h1><p>弹幕派已经更新到 3.0，直接登录官网<a href="http://www.danmakupie.com/">弹幕派官网:www.danmakupie.com</a>即可使用</p>
<h1 id="经历"><a href="#经历" class="headerlink" title="经历"></a>经历</h1><p>经历了半年多利用业余时间走走停停的开发，这个弹幕项目终于从一个花瓶的展示状态到了一个基本可用的地步。</p>
<p>记的最初有这个想法是在微软 Hackathon 上，本来想做一个 Office 的时间天气地点人物的增强插件，但是后面不知怎么的就想到了去做个 PPT 弹幕玩玩，和志龙商量了一下，决定就去做这个。今天回忆起来，可能是惠东去年夏天时候给我打的一个电话问我 PPT 怎么加弹幕时候就有的灵感了。后来得到 MSRA 的支持，就一直走了过来。</p>
<h1 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h1><p>使用方法个人感觉还是比较简单。</p>
<p>进入<a href="http://danmu.zhengzi.me/">弹幕派后台管理网站</a>先输入账户密码，点击注册，注册成功后点击登录，然后创建房间，就进入房间管理页面，可以看到房间和用户发送弹幕的的一些信息，最关键的是记住房间 ID。</p>
<p>然后再网站下方点击<a href="http://7xr64j.com1.z0.glb.clouddn.com//danmu/release/Danmu%20v1.1.1.zip">下载桌面端</a>，运行里面的 DanMu.exe，如果没有问题（也就是你安装了.NetFrameWork 4.0 以上版本）的话，就打开了我们的应用，输入刚刚申请的用户名和密码，就可以进入应用，应用会自动运行，会自动接收到发来的弹幕。你可以在任务栏托盘中看见任务图标，点击右键可以进行设置、暂停等操作。</p>
<span id="more"></span>

<p>如果要发送弹幕的话，扫描左侧的微信二维码，关注我们的官方微信，然后回复“弹幕”二字，输入房间号，就可以发送弹幕了，想换房间需要先退出。</p>
<p>如果你想用自己的微信号接入的话，需要在管理页面的最下方点击绑定公众号，输入您的公众号 ID（AppID）、公众号名称、公众号令牌（Token）和加解密密钥（EncodingAESKey）之后（这些都可以在公众号后台开发选 项卡中的基本配置选项找到），然后可以在页面看到到您的 URL，之后进入公众号管理后台（<a href="http://mp.weixin.qq.com/">mp.weixin.qq.com</a>）开发选项卡中的基本配置选项，将 URL 服务器地址修改为页面给您的地址即可。</p>
<h2 id="意见或反馈"><a href="#意见或反馈" class="headerlink" title="意见或反馈"></a>意见或反馈</h2><p>在下方留言回复或者发送邮件到 imaginezz#outlook.com 或 thesharing#163.com（将#替换为@即可）我们团队都会第一时间反馈。</p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>.Net</tag>
        <tag>应用</tag>
        <tag>弹幕</tag>
        <tag>微信</tag>
      </tags>
  </entry>
  <entry>
    <title>数据挖掘基本概念框架</title>
    <url>/dataming_notes/</url>
    <content><![CDATA[<h1 id="认识"><a href="#认识" class="headerlink" title="认识"></a>认识</h1><p>数据挖掘类似挖矿–&gt;找出事先不知道的潜在的有用知识</p>
<p>更多是要挖掘出模式，而不只是知识，所以数据挖掘–&gt;机器学习</p>
<p>过程：数据–清洗–集成–选择（指标、算法模型）–找到知识</p>
<h2 id="与统计学："><a href="#与统计学：" class="headerlink" title="与统计学："></a>与统计学：</h2><p>关系： 统计学与数据挖掘目标类似，方法类似（回归、聚类、分类等等）；</p>
<p>区别：统计学：统计分析建模；数据挖掘：融合计算机</p>
<span id="more"></span>

<h2 id="与数据分析："><a href="#与数据分析：" class="headerlink" title="与数据分析："></a>与数据分析：</h2><p>分析：假设–验证假设</p>
<p>挖掘：事先不知道假设（发现驱动），前提是有充分的数据分析，所以是包含关系</p>
<h2 id="与机器学习："><a href="#与机器学习：" class="headerlink" title="与机器学习："></a>与机器学习：</h2><p>机器学习：不仅包含数据挖掘，还有统计学、模式识别、自然语言处理；可以自动学习新知识</p>
<p>数据挖掘：不具有自动学习的功能，它是机器学习的一些方法，只是从历史数据挖掘出一些模式</p>
<p>流程：CRISP-DM</p>
<p>商业理解-数据理解-数据准备-建立模型-数据评估-发布</p>
<p>商业理解：从商业角度理解项目的目标和要求（类似需求分析）</p>
<p>数据理解：数据质量检查、数据探索、找出分布和基本统计量（知道数据长什么样和一些规则）</p>
<p>数据准备：样本和属性选择，按照建模工具要求对数据转换和清洗</p>
<p>建模：模型选择和参数调优</p>
<p>评估：模型是否满足商业目标，分析时一些问题是不是没有考虑到，结果的使用范围</p>
<p>发布：根据项目的建设目标进行发布，软件集成和报告</p>
<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="监督性学习算法"><a href="#监督性学习算法" class="headerlink" title="监督性学习算法"></a>监督性学习算法</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>预测分类标号（离散取值）</p>
<p>根据数据集合标签模型，构建模型分类现有数据，并用生成的模型对新数据分类</p>
<p>流程</p>
<p>建立模型：描述预定数据类集合概念集</p>
<p>训练样本，测试样本</p>
<p>使用模型：将未来或未知的对象进行分类</p>
<p>首先进行评估，常用指标包括准确率和召回率</p>
<p>要注意：训练和测试的样本需要完全分离，否则会造成波动拟合的问题</p>
<p>算法</p>
<h3 id="决策树算法"><a href="#决策树算法" class="headerlink" title="决策树算法"></a>决策树算法</h3><p>模拟人类识别的问题</p>
<p>每个树节点可以是叶节点，对应某一类，也可以对应一个划分</p>
<p>将样本进行自上而下分而治之</p>
<p>包含 C4.5 算法和 C5.0 算法</p>
<p>核心是在决策树各级节点上选择属性，使得在每个非叶子节点上进行测试时，能获得被测试例子最大的类别信息</p>
<p>选择方法有两种：</p>
<p>C4.5：信息增益，所有的指标都是离散的</p>
<p>C5.0：信息增益率，既可以适用于离散，也可以适用于连续，为了避免属性选择不准</p>
<p>构造方法：</p>
<p>计算信息量、计算信息期望、计算信息增益</p>
<p>使用过程：训练过程–测试过程</p>
<p>剪枝——提出无关紧要的分枝</p>
<h3 id="贝叶斯分类法"><a href="#贝叶斯分类法" class="headerlink" title="贝叶斯分类法"></a>贝叶斯分类法</h3><p>用贝叶斯定律预测类成员的概率，给定类成员相关属性，计算该成员属于某类别的相关概率（后验概率）</p>
<p>前提是假设每个属性都相互独立，假设每个属性对类别产生的影响都是等价的（朴素贝叶斯算法）</p>
<p>网络贝叶斯算法：考虑属性之间的相关性（使用比较多）</p>
<p>难点：需要概率的初始知识，或者一些背景知识；计算代价比较大</p>
<h3 id="Logistic-回归算法："><a href="#Logistic-回归算法：" class="headerlink" title="Logistic 回归算法："></a>Logistic 回归算法：</h3><p>研究观测结果为分类变量与响应因素之间的回归关系的多因素统计分析算法</p>
<p>通过计算因变量对目标变量的影响，分析目标变量的归类</p>
<p>二分类回归、多分类回归（转化为二分类问题，进行组合）</p>
<p>是神经网络和深度学习的核心算法</p>
<p>分为一元和多元的逻辑回归</p>
<p>参数确定：</p>
<p>最大似然估计法，梯度下降法、EM 算法</p>
<p>KNN 算法：（很少用）</p>
<p>K 最近邻算法，最简单的算法之一，不需要训练可以直接计算，但输出的结果解释性不强</p>
<p>如果一个样本在特征空间中的 K 个最相似的样本中的大多数属于某一个类别，则该样本也属于这个类别</p>
<p>前提：所选的邻居样本已经正确分类</p>
<p>核心思想：计算样本之间的距离：如欧氏距离、马氏距离等</p>
<p>其他算法：SVM、神经网络</p>
<h3 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h3><p>构造和使用模型评估无样本类，或评估给定样本可能的属性和值空间</p>
<p>目标变量连续</p>
<p>预测空缺值和价格等等</p>
<p>算法</p>
<p>回归预测算法</p>
<p>线性回归</p>
<p>多元回归</p>
<p>非线性回归</p>
<p>模型评估</p>
<p>指标：准确率、召回率、平均绝对误差等</p>
<p>分类：</p>
<p>保持方法</p>
<p>将给定数据划分为两个数据集合：训练集（2/3）和测试集（1/3）–&gt;严格来说，还会有验证集，用来调参</p>
<p>随机子选样方法</p>
<p>将保持方法重复 k 次，选取指标的平均值作为最终的评估结果</p>
<p>比保持方法更科学</p>
<p>k-折交叉确认</p>
<p>将数据分为 k 个分类，一定比例选择测试集和训练集，不断迭代</p>
<p>无监督性学习算法</p>
<p>有监督学习算法有类标签，无监督学习算法没有类标签（不知道属于哪一类）</p>
<p>聚类算法</p>
<p>同一个类中样本相似度最大，不同类中样本差异度最大</p>
<p>K-Means 算法（k-均值聚类）</p>
<p>以最小化误差函数为基础</p>
<p>需要定义聚类数目、迭代次数或者收敛条件，并指定 K 个中心点，根据一定的相似性度量准则进行聚类，反复迭代</p>
<p>降维算法</p>
<p>将几千个特征压缩为若干特征，去除冗余信息，减少特征数量，提高算法性能，便于可视化</p>
<p>PCA 算法（分解矩阵）、SVD 算法（分解矩阵）、张量分解算法（更高维度分解）–&gt;将数据压缩成少数几个维度</p>
<p>特殊算法</p>
<p>智能推荐算法</p>
<p>和搜索引擎</p>
<p>相同：帮助用户快速发现有用信息</p>
<p>不同：搜索引擎需要用户主动获取关键词；推荐算法不需要用户明确提出需求，而是分析历史行为</p>
<p>两者是互补关系</p>
<p>算法</p>
<p>关联规则算法</p>
<p>从信息存储中发现有趣的隐藏的频繁出现的模式</p>
<p>算法：Apriori 算法等</p>
<p>计算支持度和置信度，指定阈值，生成规则</p>
<p>支持度：事务集中，同时包含 A 和 B 的百分比</p>
<p>置信度：事务集中，包含 A 的情况下也包含 B 的概率</p>
<p>k-项集</p>
<p>顶集的频率：包含指定项集的事务数的占比</p>
<p>根据最小支持度阈值，找到频繁项集</p>
<p>协同过滤算法</p>
<p>新上线的推荐系统，第一个算法就是协同过滤算法</p>
<p>基于用户的协同过滤</p>
<p>假设：如果用户对一些物品的评分比较相似，那么他们对其他物品的评分也很相似</p>
<p>基于物品的协同过滤</p>
<p>假设：用户对项目的评分和用户对其他相似项目的评分很相似</p>
<p>问题：数据的稀疏性（很难找到相似用户），数据的扩展性（相似度关系代码需要很长的计算时间）</p>
<p>计算相似度</p>
<p>余弦相似度</p>
<p>修正的余弦相似性</p>
<p>相关相似性</p>
<p>评分估算公式</p>
<p>其他：内容推荐、标签推荐、社交网络推荐、位置推荐</p>
<p>半监督性学习算法：机器学习应用很多</p>
<p>一部分数据有标签，另一部分没有，用一部分有标签的数据来扩展没有标签的数据</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><p>Python</p>
<p>工具包 Numpy Pandas Matplotlib Scipy Sklearn NLTK（自然语言处理） NetworkX</p>
<p>集成工具 Anaconda</p>
<p>参考书 《利用 Python 进行数据分析》《Python 数据分析基础教程》《利用 Python 机型自然语言处理》</p>
<p>《数据挖掘导论》（一定看，翻译很烂） 《机器学习实战》 《python 数据分析与挖掘实战》 《大嘴巴漫谈数据挖掘》 <a href="http://www.36dsj.com/">www.36dsj.com</a> 《数据挖掘与数据化运营实战》（比较初级） 机器学习基石（台湾大学？）</p>
<p>实际应用：过拟合（应用中过度透视数据，忽略数据的一些不可预测性）</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>数据挖掘</category>
      </categories>
      <tags>
        <tag>数据挖掘</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云/腾讯云中CentOS 7中文乱码解决方法</title>
    <url>/deal_with_centos_chinese_messy_code/</url>
    <content><![CDATA[<p>在阿里云和腾讯云中安装 CentOS 7 之后，中文输入显示？？ 使用命令</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">locale</span></span><br></pre></td></tr></table></figure>

<p>查看，果然都是 en_US.UTF-8，（万恶的美帝！！） 博主想，没有的话可以安装嘛，所以又使用命令</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">yum</span> groupinstall <span class="type">Chinese</span>-sup<span class="keyword">port</span></span><br></pre></td></tr></table></figure>

<p>安装中文支持时出现了没有可用的安装包的情况，这让博主非常郁闷。</p>
<p>接着，抱着一不做二不休的态度，把源转到了网易，看看是不是可以解决这个问题。</p>
<p>（具体方法可以参见<a href="http://mirrors.163.com/.help/centos.html">http://mirrors.163.com/.help/centos.html</a>）</p>
<p>但结果依然令人失望，网易的源里也没有这个包。</p>
<p>然后，我想，作为一个中国提供商的云服务器，不包含中文不太合适吧。于是直接使用命令</p>
<span id="more"></span>

<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">LANG</span><span class="operator">=</span>zh_CN.utf8</span><br></pre></td></tr></table></figure>

<p>直接修改系统语言，结果如我所料，在修改 Secure CRT 的“Character encoding”为 UTF-8 之后，奇迹发生了——甭说中文输入可以被支持，就连界面中的英文提示也变成了中文（测试后发现，只有腾讯云都是如此，阿里云只是支持中文字符集，不过这已经很棒了呀）！</p>
<p>哈哈，问题解决了，原来真的是自带中文语言包和字体哒~ 那么，接下来就是让系统字符集永久变成中文了。</p>
<p>可是，CentOS 7 已经不再使用</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/</span>sysconfig/i18n</span><br></pre></td></tr></table></figure>

<p>来设置字符集了。</p>
<p>历尽一些搜索之后，发现可以在</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/etc/</span>locale.conf</span><br></pre></td></tr></table></figure>

<p>中进行设置，改为</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">LANG</span><span class="operator">=</span><span class="string">&quot;zh_CN.UTF-8&quot;</span></span><br></pre></td></tr></table></figure>

<p>即可（对，我就这么羞耻的只留下了这一条），具体可以参考这个</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">LANG</span><span class="operator">=</span><span class="string">&quot;zh_CN.GB18030&quot;</span></span><br><span class="line"><span class="attribute">LANGUAGE</span><span class="operator">=</span><span class="string">&quot;zh_CN.GB18030:zh_CN.GB2312:zh_CN&quot;</span></span><br><span class="line"><span class="attribute">SUPPORTED</span><span class="operator">=</span><span class="string">&quot;zh_CN.UTF-8:zh_CN:zh:en_US.UTF-8:en_US:en&quot;</span></span><br><span class="line"><span class="attribute">SYSFONT</span><span class="operator">=</span><span class="string">&quot;lat0-sun16&quot;</span></span><br></pre></td></tr></table></figure>

<p>（原文来自：<a href="http://blog.chinaunix.net/uid-21976322-id-5079489.html">http://blog.chinaunix.net/uid-21976322-id-5079489.html</a>）</p>
<p>好，大事已成，试着重启一下，没有问题。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>CentOS</tag>
        <tag>阿里云</tag>
        <tag>中文</tag>
        <tag>乱码</tag>
        <tag>腾讯云</tag>
      </tags>
  </entry>
  <entry>
    <title>关于跨域问题的一个解决方法</title>
    <url>/deal_with_cors/</url>
    <content><![CDATA[<h1 id="为什么要跨越"><a href="#为什么要跨越" class="headerlink" title="为什么要跨越"></a>为什么要跨越</h1><p>当需要允许其他人使用自己网站的一些 API 时，跨域就是一个必须要解决的问题了。</p>
<h1 id="跨域解决方案"><a href="#跨域解决方案" class="headerlink" title="跨域解决方案"></a>跨域解决方案</h1><h2 id="JsonP"><a href="#JsonP" class="headerlink" title="JsonP"></a>JsonP</h2><p>因为 HTML 中的标签的 Src 属性可以跨域，所以该方案通过动态引入<code>&lt;script&gt;</code>标签并添加 Src 属性完成跨域请求 但是在这种情况下，服务器不能仅仅返回一段 JSON，而是要返回一段完整的 JavaScript 代码（比如一个函数），这样调用它的代码才能成功调用到返回的数据。并且这种情况下因为是插入了一个标签，所以在调用 API 的时候只能以 GET 方式调用（这是我的理解，或许还有其他方法可以调用 POST？）。</p>
<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><p>通过设置 HTTP 头</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Access</span>-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>使得任意网站都可以直接使用 Ajax 像调用源站 API 一样来跨域访问其他站点的 API 但是这种方案也有一定的限制，它只允许三种操作：GET、HEAD、POST 并且允许的 Content-Type 只有三种：</p>
<ul>
<li><code>application/x-www-form-urlencoded</code></li>
<li><code>multipart/form-data</code></li>
<li><code>text/plain</code></li>
</ul>
<p>注意这里并没有熟悉的 application/json，所以这也给使用造成了一些困难。</p>
<p>这里可以参考 FireFox 关于跨域的开发者文档：<a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS">https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS</a></p>
<h1 id="使用-Ajax-解决跨域的一个例子"><a href="#使用-Ajax-解决跨域的一个例子" class="headerlink" title="使用 Ajax 解决跨域的一个例子"></a>使用 Ajax 解决跨域的一个例子</h1><p>这里为了方便，以 Angular 和 Node 为例： 前端：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> url = <span class="string">&#x27;xxx.xxx/api/xxx&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> para = <span class="string">&#x27;a=4&#x27;</span>;</span><br><span class="line">$http.post(url, para, &#123;</span><br><span class="line">    headers: &#123;</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(function (response) &#123;</span><br><span class="line">    console.<span class="keyword">log</span>(response);</span><br><span class="line">    <span class="keyword">if</span> (response.<span class="built_in">data</span>.success) &#123;</span><br><span class="line">        $scope.videoSrc = response.<span class="built_in">data</span>.videoLink;</span><br><span class="line">        $scope.frameVideoSrc = $sce.trustAsResourceUrl($scope.videoSrc);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $scope.videoSrc = response.<span class="built_in">data</span>.errInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>需要注意 para 的格式（这里是 Form 的上传格式）和 post 时候的 Headers 设置 后台：</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/searchvideo/:vendorName?/:productId?&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    res.setHeader(<span class="string">&quot;Access-Control-Allow-Origin&quot;</span>, <span class="string">&quot;\*&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.<span class="built_in">log</span>(req);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>服务器这边只需要在 Header 里声明可以跨域就可以了</p>
<h1 id="还要完善"><a href="#还要完善" class="headerlink" title="还要完善"></a>还要完善</h1><p>在跨域的时候还遇到了 Client 先给 Server 发送 Option，Server 同意以后才发起跨域请求的机制，这里需要再去看一些资料，并且也还需要尝试实现以下 JSONP</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>Using CORS：<a href="https://www.html5rocks.com/en/tutorials/cors/#toc-adding-cors-support-to-the-server">https://www.html5rocks.com/en/tutorials/cors/#toc-adding-cors-support-to-the-server</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>Angular</tag>
        <tag>JavaScript</tag>
        <tag>Node</tag>
        <tag>跨域</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Qemu和GDB对Linux内核进行调试</title>
    <url>/debug-linux-kernel-with-qemu-and-gdb/</url>
    <content><![CDATA[<p>使用Qemu对Linux内核进行调试是一种较为便捷的方式，近日进行了一番实践，并将大致步骤与其中一些小坑记录了下来。</p>
<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>由于放长假赋闲在家，所以手头只有一台装有MacOS的MBP可用，而Linux内核的开发与调试使用Linux环境下会比较方便，所以就使用VMware Fusion创建了一台安装有Ubuntu 18.04系统的虚拟机。由于编译Linux内核及相关软件需要的资源较多，所以为虚拟机配置了双核CPU、2GB内存和20GB磁盘空间（笔记本本身资源有限），但实际使用（特别是物理内存和硬盘）捉襟见肘，于是又在系统中添加了3GB的SWAP内存并扩容了20GB的磁盘空间（其实还是不太够）才解决问题。</p>
<h1 id="编译Linux内核"><a href="#编译Linux内核" class="headerlink" title="编译Linux内核"></a>编译Linux内核</h1><p>首先，尝试对内核进行编译，在编译前需要使用通过KConfig启动内核的调试配置。</p>
<h2 id="下载内核源码"><a href="#下载内核源码" class="headerlink" title="下载内核源码"></a>下载内核源码</h2><p>由于Linux内核代码量非常大，且由于国内网络大家都懂的原因，所以的下载内核源码是一项较为复杂的体力活动。</p>
<span id="more"></span>

<p>第一种方法是直接Clone Linux源码的Git仓库，当前，其仓库大约为3.7GB。在通过内核官网(<a href="https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/">https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/</a>)或者GitHub(<a href="https://github.com/torvalds/linux">https://github.com/torvalds/linux</a>)进行Clone的过程中，经常会遇到连接断开的情况，非常捉急。而如果通过国内镜像源，如<a href="https://mirror.tuna.tsinghua.edu.cn/help/linux.git/">清华Kernel Git镜像</a>进行Clone的时候，最开始速度飞快，但是后面速度会越来越慢。因此，如果不像我这样头铁的话，不建议使用这样的方式下载Kernel的源码。</p>
<p>另一种较为简单的方式是下载特定版本的源码，这些源码的tarball包可以从<a href="https://www.kernel.org/">内核官网</a>或者镜像站获得。我在实验中使用的内核版本为4.19，gz压缩包的大小约为150MB。</p>
<h2 id="配置内核"><a href="#配置内核" class="headerlink" title="配置内核"></a>配置内核</h2><p>如果是使用Git Clone的方式获取的内核源码，需要通过<code>git checkout v4.19</code>将内核源码置位4.19版本。</p>
<p>在编译之前，首先需要安装相关的依赖（如果提示缺少其它依赖按需安装即可）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install libncurses5-dev libssl-dev bison flex libelf-dev gcc make openssl libc6-dev</span><br></pre></td></tr></table></figure>

<p>在编译之前，需要使用KConfig对内核编译选项进行配置，在内核文件夹下，使用<code>make menuconfig</code>（命令行界面）或<code>make gconfig</code>（基于gtk的图形化界面）对内核进行配置。在配置时，需要打开如下选项：</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">K<span class="function"><span class="title">ernel</span> hacking -&gt;</span> Kernel debugging</span><br><span class="line">K<span class="function"><span class="title">ernel</span> hacking -&gt;</span> KGDB:kernel debugger</span><br><span class="line">K<span class="function"><span class="title">ernel</span> hacking -&gt;</span> C<span class="function"><span class="title">ompile</span> <span class="built_in">time</span> checks <span class="built_in">and</span> compiler options -&gt;</span> Provide GDB scripts <span class="keyword">for</span> kernel debugging</span><br></pre></td></tr></table></figure>
<p>并保证如下选项没有开启：</p>
<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line">K<span class="function"><span class="title">ernel</span> hacking -&gt;</span> C<span class="function"><span class="title">ompile</span> <span class="built_in">time</span> checks <span class="built_in">and</span> compiler options -&gt;</span> Reduce debugging information</span><br></pre></td></tr></table></figure>

<p>在退出配置后，可以发现内核目录中生成了一个名为<code>.config</code>的配置文件。</p>
<h2 id="编译内核"><a href="#编译内核" class="headerlink" title="编译内核"></a>编译内核</h2><p>配置完成后，就可以使用<code>make</code>编译内核，在多核CPU中可以使用<code>make -jx</code>启动多线程编译（x为启动的线程数）。</p>
<p>如果一切正常，在漫长的等待后，内核将编译完成。编译会在内核根目录下生成<code>vmlinux  </code>文件，它是编译出的原始内核文件（含有调试信息），而会在<code>arch/x86/boot/bzImage</code>目录下生成压缩后的内核文件（当然是在编译的体系结构为x86的情况下）。</p>
<h1 id="编译安装GDB和Qemu"><a href="#编译安装GDB和Qemu" class="headerlink" title="编译安装GDB和Qemu"></a>编译安装GDB和Qemu</h1><p>由于内核调试所需的GDB和Qemu版本可能会比apt源中的版本高，所以，最好自行编译安装这些软件。</p>
<h2 id="编译安装GDB"><a href="#编译安装GDB" class="headerlink" title="编译安装GDB"></a>编译安装GDB</h2><p>首先，从官网(<a href="http://www.gnu.org/software/gdb/download/">http://www.gnu.org/software/gdb/download/</a>)下载GDB的源码并解压（这里使用的是官网中最新的GDB 9.1），需要注意的是，网上有些博客中提到需要修改GDB的源码，其实是不必要的，报错的原因是没有自动检测到目标体系结构的类型，所以只需设置该类型即可。</p>
<p>解压后进入GDB文件夹，执行下列指令，即可完成编译安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> build </span><br><span class="line"><span class="built_in">cd</span> build</span><br><span class="line">../configure</span><br><span class="line">make -j4</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p>最后，通过使用<code>gdb -v</code>确定gdb的版本是否为9.1，如果是，则说明安装成功。</p>
<h2 id="编译安装Qemu"><a href="#编译安装Qemu" class="headerlink" title="编译安装Qemu"></a>编译安装Qemu</h2><p>首先，从官网下载(<a href="https://www.qemu.org/download/#source">https://www.qemu.org/download/#source</a>)Qemu的源码并解压（这里使用的是Qemu 5.0.0）。</p>
<p>由于在Ubuntu GUI中使用Qemu还需要多媒体图形库SDL，所以需要首先使用apt安装sdl：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install libsdl2-2.0-0 libsdl2-dev libsdl2-gfx-1.0-0 libsdl2-gfx-dev libsdl2-image-2.0-0 libsdl2-image-dev </span><br></pre></td></tr></table></figure>

<p>进入Qemu目录后，执行<code>./configure</code>检查系统配置并生成Makefile，需要注意检查的时候是否检测到了SDL的支持，其输出的部分内容如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">profiler          no</span><br><span class="line">static build      no</span><br><span class="line">SDL support       <span class="built_in">yes</span> (2.0.8)</span><br><span class="line">SDL image support <span class="built_in">yes</span></span><br><span class="line">GTK support       no </span><br><span class="line">GTK GL support    no</span><br><span class="line">VTE support       no </span><br><span class="line">TLS priority      NORMAL</span><br></pre></td></tr></table></figure>

<p>然后执行<code>make &amp;&amp; make install</code>即可完成Qemu的编译与安装。</p>
<p>在安装完Qemu后，会生成如<code>qemu-xxx</code>和<code>qemu-system-xxx</code>的一系列命令，用于仿真不同体系结构的用户态应用和操作系统，可以通过如<code>qemu-system-x86_64 --version</code>命令确认Qemu是否安装成功。</p>
<h1 id="制作ROOTFS"><a href="#制作ROOTFS" class="headerlink" title="制作ROOTFS"></a>制作ROOTFS</h1><p>在内核启动后需要一个带有init程序的rootfs，所以在调试内核前需要制作一个rootfs。</p>
<h2 id="构建基于initrd的rootfs"><a href="#构建基于initrd的rootfs" class="headerlink" title="构建基于initrd的rootfs"></a>构建基于initrd的rootfs</h2><p>initrd是一种位于内存的根文件系统，它可以在硬盘被驱动之前载入系统。这里为了方便，只将一个简单的程序写入initrd，并将其作为init程序（即系统启动后的第一个用户态进程）。除此之外，也可以使用busybox作为initrd中的init程序。</p>
<p>创建一下简单的c程序，命名为<code>fakeinit.c</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello linux!&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello world!&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello linux!&quot;</span>);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后使用gcc编译这段代码，在编译的时候需要使用静态链接，并且如果如果在配置内核的时候没有启用64位支持（64-bit kernel），则需要将代码编译为32位程序，方法是在gcc命令行中添加<code>-m32</code>选项。</p>
<p>编译命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc --static -o fakeinit fakeinit.c</span><br><span class="line">gcc --static -o fakeinit fakeinit.c -m32 (编译为32位可执行程序)</span><br></pre></td></tr></table></figure>

<p>在编译后，使用cpio程序进行打包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> fakeinit | cpio -o --format=newc &gt; initrd_rootfs.img</span><br></pre></td></tr></table></figure>

<p>这样，一个基于initrd的rootfs即制作完成。</p>
<h2 id="构建基于硬盘镜像的rootfs"><a href="#构建基于硬盘镜像的rootfs" class="headerlink" title="构建基于硬盘镜像的rootfs"></a>构建基于硬盘镜像的rootfs</h2><p>这里使用busybox构建基于硬盘镜像的rootfs。其中，busybox是一个集成了数百个Linux常用命令和工具的单个软件，在对内核进行测试的时候非常方便，号称“The Swiss Army Knife of Embedded Linux”。</p>
<h3 id="下载编译busybox"><a href="#下载编译busybox" class="headerlink" title="下载编译busybox"></a>下载编译busybox</h3><p>首先，从官网(<a href="https://busybox.net/downloads/">https://busybox.net/downloads/</a>)下载busybox的源码并解压（这里使用的是最新的busybox-1.31.1）。</p>
<p>在解压并进入busybox文件夹后，首先使用<code>make gconfig</code>或<code>make menuconfig</code>对其进行配置，需要启用如下选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Settings -&gt; Build Options -&gt; Build static binary (no shared libs)</span><br></pre></td></tr></table></figure>

<p>如果需要将其编译为32位版本，则需要将<code>-m32</code>命令填入如下选项：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Settings -&gt; Build Options -&gt; Additional CFLAGS</span><br><span class="line">Settings -&gt; Build Options -&gt; Additional LDFLAGS</span><br></pre></td></tr></table></figure>

<p>与内核相同，在退出后，会在目录中生成一个名为<code>.config</code>的配置文件。</p>
<p>然后，使用<code>make</code>命令编译busybox。</p>
<h3 id="使用busybox创建rootfs"><a href="#使用busybox创建rootfs" class="headerlink" title="使用busybox创建rootfs"></a>使用busybox创建rootfs</h3><p>首先，创建一个空的磁盘镜像文件，然后将其格式化：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=/dev/zero of=./busybox_rootfs.img bs=1M count=10</span><br><span class="line">mkfs.ext3 ./busybox_rootfs.img</span><br></pre></td></tr></table></figure>

<p>然后，挂载刚刚创建的磁盘镜像（需要使用loop设备）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> rootfs_mount</span><br><span class="line">sudo mount -t ext3 -o loop ./busybox_rootfs.img ./rootfs_mount</span><br></pre></td></tr></table></figure>

<p>接着，在busybox源码目录中，将编译好的busybox目标文件安装到rootfs文件夹：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">make install CONFIG_PREFIX=/path/to/rootfs_mount/</span><br></pre></td></tr></table></figure>

<p>最后，配置busybox的init，并卸载rootfs：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /path/to/rootfs_mount/proc</span><br><span class="line"><span class="built_in">mkdir</span> /path/to/rootfs_mount/dev</span><br><span class="line"><span class="built_in">mkdir</span> /path/to/rootfs_mount/etc</span><br><span class="line"><span class="built_in">cp</span> busybox-source-code/examples/bootfloppy/* /path/to/rootfs_mount/etc/</span><br><span class="line">sudo umount /path/to/rootfs_mount</span><br></pre></td></tr></table></figure>

<p>现在，一个基于busybox的rootfs磁盘镜像就制作成功了。</p>
<h1 id="使用Qemu和GDB调试内核"><a href="#使用Qemu和GDB调试内核" class="headerlink" title="使用Qemu和GDB调试内核"></a>使用Qemu和GDB调试内核</h1><h2 id="使用Qemu启动内核"><a href="#使用Qemu启动内核" class="headerlink" title="使用Qemu启动内核"></a>使用Qemu启动内核</h2><p>由于编译的内核体系结构为x86，所以使用<code>qemu-system-x86_64</code>程序来载入并启动内核。</p>
<p>如果使用intird作为rootfs，则具体命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-system-x86_64 \</span><br><span class="line">  -kernel ./linux/arch/x86/boot/bzImage \  <span class="comment"># 指定编译好的内核镜像</span></span><br><span class="line">  -initrd ./rootfs/initrd_rootfs.img \  <span class="comment"># 指定rootfs</span></span><br><span class="line">  -serial stdio \ <span class="comment">#指定使用stdio作为输入输出</span></span><br><span class="line">  -append <span class="string">&quot;root=/dev/ram rdinit=/fakeinit console=ttyS0 nokaslr&quot;</span> \ <span class="comment"># 内核参数，指定使用initrd作为rootfs，禁止地址空间布局随机化</span></span><br><span class="line">  -s -S <span class="comment"># 指定Qemu在启动时暂停并启动gdb server，等待gdb的连入（端口默认为1234）</span></span><br></pre></td></tr></table></figure>

<p>如果使用磁盘镜像作为rootfs，则具体命令为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-system-x86_64 \</span><br><span class="line">  -kernel ./linux/arch/x86/boot/bzImage \</span><br><span class="line">  -hda ./rootfs/busybox_rootfs.img \ <span class="comment"># 指定磁盘镜像</span></span><br><span class="line">  -serial stdio \</span><br><span class="line">  -append <span class="string">&quot;root=/dev/sda console=ttyS0 nokaslr&quot;</span> \ <span class="comment"># 内核参数，指定root磁盘，禁止地址空间布局随机化</span></span><br><span class="line">  -s -S</span><br></pre></td></tr></table></figure>

<h2 id="使用GDB调试内核"><a href="#使用GDB调试内核" class="headerlink" title="使用GDB调试内核"></a>使用GDB调试内核</h2><p>最后一步，由于刚刚Qemu开启了远程调试，所以只需要将gdb通过连入即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb ./linux/vmlinux <span class="comment"># 指定调试文件为包含调试信息的内核文件</span></span><br></pre></td></tr></table></figure>

<p>如果此时直接在gdb调试器中使用<code>target remote:1234</code>连入Qemu的gdb server，则会出现报错<code>Remote ‘g’ packet reply is too long</code>，这是由于gdb没有正确识别调试目标的体系结构造成的（有些博客认为需要修改源代码屏蔽这个错误，实际上是不必要的），所以只需要在远程attach之前使用<code>set arch i386:x86-64:intel</code>设置目标体系结构即可。</p>
<p>例如，你希望在start_kernel函数设置断点进行调试，则在启动Qemu后，gdb的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gdb ~/linux/vmlinux</span><br><span class="line">(gdb) <span class="built_in">set</span> <span class="built_in">arch</span> i386:x86-64:intel</span><br><span class="line">(gdb) add-auto-load-safe-path ~/linux</span><br><span class="line">(gdb) target remote:1234</span><br><span class="line">(gdb) b start_kernel</span><br><span class="line">(gdb) c</span><br></pre></td></tr></table></figure>

<p>可以发现，内核在启动后被中断在start_kernel函数上。</p>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><h2 id="内核文档"><a href="#内核文档" class="headerlink" title="内核文档"></a>内核文档</h2><p>在内核的文档中，有一篇详细讲解了如何使用GDB调试内核。</p>
<p>该文档的最新版本可见于内核的官网：<a href="https://www.kernel.org/doc/html/latest/dev-tools/gdb-kernel-debugging.html">https://www.kernel.org/doc/html/latest/dev-tools/gdb-kernel-debugging.html</a>。</p>
<p>而具体的版本就需要在内核源码中编译文档了，例如html版本的文档可以使用<code>make htmldocs</code>进行编译，在启动HTTP服务器后，可以在浏览器中进行访问，例如，<a href="http://127.0.0.1:8000/dev-tools/gdb-kernel-debugging.html">http://127.0.0.1:8000/dev-tools/gdb-kernel-debugging.html</a>。</p>
<h2 id="参考来源"><a href="#参考来源" class="headerlink" title="参考来源"></a>参考来源</h2><p>本文参考了两篇较为优质的博客：</p>
<ul>
<li><a href="https://freemandealer.github.io/2015/10/04/debug-kernel-with-qemu-2/">用QEMU来调试内核 – 亲身体验篇 </a></li>
<li><a href="http://rainlin.top/archives/201">利用VS Code+Qemu+GDB调试Linux内核</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Kernel</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>使用VSCode对Linux内核进行调试</title>
    <url>/debug-linux-kernel-with-vscode/</url>
    <content><![CDATA[<p>在上一篇博客<a href="/debug-linux-kernel-with-vscode">使用Qemu和GDB对Linux内核进行调试</a>中已经介绍了使用Qemu和GDB对Linux内核进行调试的方法，但是GDB调试对于用惯了GUI工具的人（比如我）来说并不是很直观，所以就希望尝试使用比较熟悉的GUI编辑器，如VSCode，对内核进行调试。</p>
<p>由于VSCode的调试方式同样基于GDB，所以需要先在GDB中测试没有问题。</p>
<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>需要在VSCode的插件市场中安装微软官方的C/C++插件，该插件可用于IntellSence和GDB调试。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>为了使VSCode支持内核的调试，需要配置launch.json，特备注意需要配置<code>setupCommands</code>属性，以便在GDB启动后对其进行设置，大致的配置文件如下：</p>
<span id="more"></span>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// Use IntelliSense to learn about possible attributes.</span></span><br><span class="line">    <span class="comment">// Hover to view descriptions of existing attributes.</span></span><br><span class="line">    <span class="comment">// For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) linux&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceRoot&#125;/vmlinux&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;miDebuggerServerAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost:1234&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;miDebuggerArgs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-n&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;targetArchitecture&quot;</span><span class="punctuation">:</span> <span class="string">&quot;x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;set arch i386:x86-64:intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dir .&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;add-auto-load-safe-path ./&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">          <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在添加配置后，直接在VSCode中设置断点，然后启动Qemu，最后在VSCode中启动调试即可。</p>
<h2 id="其它配置"><a href="#其它配置" class="headerlink" title="其它配置"></a>其它配置</h2><p>如果不仅需要使用VSCode对内核进行调试，还希望进行编辑，特别是激活IntelliSence以及格式化等功能，还需要对VSCode进行进一步的配置，具体配置已经置于GitHub仓库<a href="https://github.com/imaginezz/vscode_config_debug_kernel">https://github.com/imaginezz/vscode_config_debug_kernel</a>中，可以直接Clone为内核文件夹中的<code>.vscode</code>目录。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Kernel</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Kernel</tag>
      </tags>
  </entry>
  <entry>
    <title>记DevDays Asia 2016 @Beijing</title>
    <url>/devday_asia_2016/</url>
    <content><![CDATA[<p>作为一个参加了许多次 Hackathon 的老司机，恰巧见到微软的 Office 主题 Hackathon，想去凑凑热闹。没想到这成了我到目前参与过的逼格最高也是感悟最多的一次 Hackathon。</p>
<p><a href="/wp-content/uploads/2016/10/163668315694259371.jpg"><img data-src="/wp-content/uploads/2016/10/163668315694259371-1024x768.jpg" alt="163668315694259371"></a></p>
<p>话不多说，先放出我们的作品：一款 PowerPoint 插件——ClassPie。总的来说，ClassPie 是一款可以帮助老师在课堂中更加高效地同学生互动的 PowerPoint 插件。可以把每一页 Slide 中的题目直接分发给在课堂中或者远程听课的同学，同时实时搜集同学们的答案并汇总到 PPT 中；同学们也可以把不懂的问题直接通过弹幕的形式发送到 PPT 中（在这里调用了以前的项目<a href="/319.html">DanmakuPie</a>的 API）直接同老师互动。</p>
<p><a href="/wp-content/uploads/2016/10/527513761386604399.jpg"><img data-src="/wp-content/uploads/2016/10/527513761386604399-768x1024.jpg" alt="527513761386604399"></a></p>
<p>半成品的 Github 链接：<a href="https://github.com/Thesharing/ClassPieAddin">https://github.com/Thesharing/ClassPieAddin</a>。</p>
<p>说完作品，我更多想来谈谈这两天在微软的感受。</p>
<p>作为微软最有钱任性的 Office 部门，到来的讲师也都非常厉害。他们由来自 Redmond 和上海的大佬组成，阵容豪华。更重要的是多数讲师都非常 Nice，帮助了我们许多。</p>
<span id="more"></span>

<p>在 Kickoff 结束以后，我们团队开始讨论这次要做的主题，这时一位美籍华人 Donny 主动来到我们这边参与讨论中，虽然他的中文不是很好，但还是坚持用中文和我们来聊想法和思路，并且跟许多同事求证我们所想要的效果在新的 add-in 技术中是否具有解决方案。虽然最终结果是不可行的，但他的鼓励给了我们很强的动力去用各种办法来达到我们想要的效果。</p>
<p><img data-src="/wp-content/uploads/2016/11/9381fac5e60bb04a59262138f3453de6.jpg"></p>
<p>之后在两天的开发中，一位印度小哥 Tarun 更是帮助了我们许多。在我们确定许多方案不可行之后一筹莫展的时候又是他主动凑过来询问项目进展（这也终于使我达成了听懂印式英语的成就，交流上的困难也并没有构成多大的障碍，我们很快可以自由地表达各自的想法）。在听完我们的困惑以后他给出了 VSTO 的方案并让我们尝试，之后向我要了电子邮箱，给我发了好几封相关的文档或者教程。这对我们帮助很大。不仅仅如此，第二天一大早，他主动打招呼问我们问题解决得怎么样，我们如实说还是有一些关于 WinForms 的小问题。没先到他就真的拿来自己的电脑打开 Visual Studio 按照我们的说法和一些 Sample 敲了一遍，接着去 Debug，然后搜索出现的问题，并叫来另一位大神一起讨论，找到了解决方案，并且耐心讲给我们。更令我们惊讶的是，在他走后一阵又主动跑来告诉我们旁边会场的下一个主讲人可能会讲到我们遇到的问题，强烈建议我们去听一下。</p>
<p><img data-src="/wp-content/uploads/2016/11/045f7157652bd1cf83b29c02daebdd8f.jpg"></p>
<p>嗯，终于，经过这两位工程师的帮助，我们居然还算顺利地完成了预想的所有功能，在这儿给他们点一个大大的赞。</p>
<p>我想他们一定是非常热爱自己的工作，不然是不可能每天以如此充沛的精力投入到问题的解决中。他们也可以利用各种可以利用的方法去思考解决问题，甚至愿意自己亲手去写代码（我的感觉里级别这么高的人不可能会亲自写代码），更愿意很热心毫无怨言帮助像我们这样如此小白的学生。嗯，以后，一定要和这样一群优秀的人共事。</p>
<p>伙食住宿方面，也都非常周到。</p>
<p><img data-src="/wp-content/uploads/2016/11/20fe814c659cc97a2edca582cbfb5db7.jpg"></p>
<p>第一天晚上的自助非常给力，忍不住多吃了些。之后早饭都是麦当劳，午饭是盒饭，另外还有一顿 pizza。值得一提的是微软并没有因为有这么多外国人就多准备西餐（不过还是多准备了勺子），在我们嫌弃盒饭的时候，眼看着那些来自国外的大牛们直冲冲拿起一盒走去桌子边上就开吃，毫无违和感。而在吃 Pizza 的时候他们来晚了，也好不嫌弃看见哪桌还有 pizza 抓起来就开吃。另外，组委会也贴心地准备了怎么也吃不完的零食和水果，还有泡面 ！这也导致我两天后腰带都必须得松上一圈。</p>
<p>住宿方面除了不能洗澡剩下我都非常喜欢。组委会准备了许多睡垫、毛巾毯和洗漱包。在微软大厦温暖的空调和柔软的地板上睡了两晚也是别有滋味。</p>
<p>作品评比方面也还不错，抛弃了往常的 PosterSession 和主题路演，而是采用了现由评委去每一个团队的位子上来观看团队展示，之后晋级的团队再去做主题演讲的形式（还贴心地请了一位超级厉害的美女同传）。过程比较随意，但也不会感到无聊。</p>
<p><img data-src="/wp-content/uploads/2016/11/1493f428f1a1dd3337730108598b3052.jpg"></p>
<p>（PS：两天里真的是受够了用蹩脚的英语同歪果仁交流的感觉，好羡慕英语好能够和老外轻松愉快地交流的同学 T-T。）</p>
<p>有趣的是和我们一起组队的一位神奇的大叔这时候仿佛开了天眼，在初赛我们表现不佳的时候鼓励我们说“我们一定可以进入复赛”，结果如他所料，而在复赛还没开始的时候又转了一圈回来说“我们这次应该是第三名”，果不其然又如他所料。</p>
<p>第一名是几位法律人士做的一个 Word 法律助手，可以快速更正错误用法，也可以快速插入各种法条模板，非常贴切需求，给我留了非常深刻的印象。像他们这样可以在工作中发现刚性需求，然后用技术去解决的，必然冠军无疑。</p>
<p>最终的奖品是团队里每个人一人一台九号平衡车，第一次拿到奖品难免有些激动，于是又和志龙奖励给自己一顿好吃的春卷。</p>
<p><img data-src="/wp-content/uploads/2016/11/4119d4456c31676ae552545f8e52f98e.jpg"></p>
<p>两天的 Hackathon 结束，但 ClassPie 并没有结束。我们还是想把这个项目继续做下去。也希望有兴趣来改变课堂教学现状的同学加入我们，一起为学弟学妹做一些有意思的事情！</p>
<p><a href="/wp-content/uploads/2016/10/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20161107012941.png"><img data-src="/wp-content/uploads/2016/10/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20161107012941-1024x771.png" alt="%e5%be%ae%e4%bf%a1%e6%88%aa%e5%9b%be_20161107012941"></a></p>
<p>最后，附上 MSDN 的博客链接：<a href="http://blog.sina.com.cn/s/blog_6408cdc70102wyd1.html">DevDays Asia 2016 精彩回顾</a></p>
]]></content>
      <categories>
        <category>活动小记</category>
      </categories>
      <tags>
        <tag>应用</tag>
        <tag>Hackathon</tag>
        <tag>Office</tag>
        <tag>微软</tag>
        <tag>课堂派</tag>
      </tags>
  </entry>
  <entry>
    <title>别总想着起飞，你还没装上轮子</title>
    <url>/donot_want_to_fly/</url>
    <content><![CDATA[<p>终于到了这个时候，没有了需要，没有了理想，没有了思考。</p>
<p>别人看来，你已经飞起:在学校社会各种好玩组织之间游弋，并且还经常去某高大上的公司。</p>
<p>我差点也被这表象迷惑了，某时也感觉飘飘然。连说话都不知觉变得飘了起来。</p>
<p>历经了一早晨的迷醉，自以为也是时候反省了。</p>
<p>也许我就想爵爷说的，我也只是一介书生，书也没读好，反倒这一年扔了许多。</p>
<p>读书就像造轮子，或者说绕变压器，一圈一圈很费时间，却也要用心去做。</p>
<p>是的，我太浮躁了。</p>
<p>没有了书本，没有了思想，没有了自我。</p>
<p>空有情怀？No，是犯傻。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title>空</title>
    <url>/empty/</url>
    <content><![CDATA[<p>就在刚刚，我还在对着这个题目窃喜——既然是“空”，当然不需要一个字的正文。因为数据库中的 Null 就是空。 然而，我却应景地忆起了午时地天“空”。</p>
<p>时光广场，四周仰望，皑皑一片。不是白雪，不是雾霾，却只能去用皑皑两字形容——只是因为太空，颜色都没有，真的太空了。嗯，我第一次开始认真考虑“太空”一词的来由。</p>
<p>仅仅是因为昨夜一阵秋风？当然不。秋风只是卷走了树梢的残叶，却没有带来“空”。那我所见的皑皑之状径为何物，它是不是空？</p>
<p>——2016 年 11 月 20 日下午 1：48</p>
<span id="more"></span>

<hr>
<p>今天的主题还是空。</p>
<p>我放空自己，力求均匀地吸气吐气。双手贴在键盘上，不由自主地开始打字。我像一个刚刚学习写作的初中生一样，不知这篇文章会写成什么样子。这样一定也算作空。</p>
<p>最近愈发繁忙，给自己留的思考时间愈发地少，这不是个好兆头。我还是要尽量每周给自己留下几个小时的时间什么都不去做，只是放空去想，像现在这样。</p>
<p>看了这一阵儿很火的一部片子《西部世界》，每当看完以后，我就会觉得已经辨认不清我所存在的世界，我的自由意志，究竟是真实的存在，还是不小心昨天被一个脑残编剧设定好的。</p>
<p>但是耳边音乐响起，我每每会被带入其中，我深切地体会到，那时候每一段思绪，每一段意识都感觉是真正存在的。我会感觉到一段曲子的优美或者崇高；也能体会到其演绎的是悲剧还是戏剧。</p>
<p>这一刻，我能感到，我是真实的。我的存在，并不是被我在思考定义的，而是被我在感受，我体会到这种超越而涌现出来的。</p>
<p>所以，我开始去认真思考，从不知多久之前以来，就觉得完全正确，从未起疑之事——真理是存在于在不断的公式一般的推理求证中，还是之于我们的感悟到超越的存在之中。</p>
<p>在之前一直有考虑过，鲁迅究竟有没有那么大的能耐，怎么敢那么狂妄，以笔为枪？现在终于可以理解，一部伟大的作品竟可以唤醒多少世人，可以对于历史的进程有多么长远的影响。</p>
<p>前些日子接触到了宗先生的《美学散步》，我在想当时的北大学生可是有何等的幸运，可以每每在未名湖边碰见正在散步的这见这位充满智慧的老人，听他将他的广袤宇宙娓娓道来。我感到他虽不像尼采的一生那样预见了历史，但是他在他存在的时空中才是真正活着，每时每刻都在活着的人。奈何我对于他的思考理解并不深刻，不知还要花多少年才能真正读懂一二。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=26344055&auto=1&height=66"></iframe>

<p>脑袋中又响起了骆集益大师的曲目，犹入福流之境。当流淌至《榣山遗韵》，太子长琴和应龙之于瑶山的回忆就像一幅好的书法一样，如流水般铺陈开来，有时细如游丝，有时形如泼墨。我竟然开始沉入其中，开始跟着音乐去了解长琴一生所行之事，看到了他已经无法用善恶去分辨的无奈，也能够体会到他平静而终的心情。</p>
<p>我想，这才是美吧。这才是我的存在。我开始认真去想尼采的那句话：人们从事物中发现的东西，是人们预先塞进事物中去的。</p>
<p>我想，在这个技术与资本的时代中，我一定要开始慢下来，放空，去做一些更加重要的事情。</p>
<p>——2016 年 11 月 30 日上午 12：18</p>
<hr>
<p>今天的空，是放下。</p>
<p>从持续了一个周的虚无中走出来，我花了比之前更大的气力。</p>
<p>“虚无”看起来和“空”很像，不过更像它的，是“自由”二字。准确的说，是自由带来了一次又一次的虚无。</p>
<p>所以我说：“一味追求自由，必将陷入虚无之中；而在重重制约下的，才是伟大的存在。”</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title>参加微软校园Hackathon是怎样的体验？</title>
    <url>/feelings_about_msc_hackathon/</url>
    <content><![CDATA[<p>作为北邮微软 Hackathon 的组织者，表示，这简直是我最享受的 hackathon！</p>
<p>其是呢，，是因为，，我只参与过这一次 hackathon~~ 言归正传，说说这次 hackathon 吧。</p>
<p>MSRA 是非常重视我们这次举办的 hackathon 的，从大约一个月前叫全国所有微软俱乐部的代表（全国一共三十三所）去 MSRA 开会三天，并且包吃包住到包路费（当然也不是白玩三天，最后也做出了我们各自学校 hackathon 的策划），不过感觉还是很棒，因为一年一度的面基（夏令营）被提前了整整十个月，而且就在学校门口，表示非常开心。</p>
<p>我们北京四校（清北邮航）有专门的福利就是可以在 Hackathon 第一天去 MSRA 进行 hack，简直不能太棒（也是因为减少了我们组织者的许多工作量）。</p>
<p>回到学校以后我就开始给俱乐部的成员们安利 hackathon，前前后后可能开了有五六次会议都在说这件事儿，从核心成员会议到各部门会议到见面大会到 kickoff 我都在讲，如果现在谁再让我讲我认为的 hackathon 还供着骇客精神信不信我打死他！</p>
<span id="more"></span>

<p>前期宣传就像是当时在 MSRA 开会时候和马歆姐聊的那样，线上（微信）+线下（外场），微软俱乐部的许多小伙伴的头像都换成我们 hackathon 的 logo，在群里说话简直像自己和自己在对话 2333333.</p>
<p>宣传过程中我们报名的人数直逼百人，已经超出我们预期很多，于是赶紧关闭了报名通道，但是我们还是开会研究了一晚上应该怎么做（最后开会变成了北邮 MSC 第一次非正式聚餐，凌晨才回寝室），但是后来发现并没有那么多人过来，很多人都现场临时有事儿之类的，最终大约有一半人可以参加。</p>
<p>kickoff 前一天，海波和娟子叫我去 msra 排练主持人（第一次和美女一起主持，所有有点兴奋一觉睡到九点）当时雪花漫天，刚出门整个人都白了，惨白惨白，uber 打车从 1.5 倍涨到了两倍，但是很庆幸最终以一倍费率打到了车。但是因为百度地图太坑，最终还走错了地方，迟到二十分钟顺利到达，后面过程还算顺利，免费蹭了一顿饭，如果北邮食堂我给 2.5 分（满分五分）的话，微软食堂我给 3 分，哈哈~</p>
<p>kickoff 那天请我们的女神马歆姐到了现场（不知道她看不看知乎，这里向她道个歉，她来的时候和我说没有准备好，希望晚点上台，但是主持人本着见人就黑的态度直接让马歆姐上台讲话，不过马歆姐临场发挥非常的棒，把 们的 kickoff 终于带入了氛围，许多同学也都开始现场组队。</p>
<p>马歆姐台上演讲<br><img data-src="/wp-content/uploads/2015/11/1.jpg"></p>
<p>kickoff 当晚非常的冷，而且发现大家都没吃饭，于是我们又和 <a href="http://www.zhihu.com/people/7e6bee8b4c8c826d76230cd6c139fa27">@专业主义</a>（发现知乎只关注了他）一行进行了 MSC 第二次非正式聚餐，和大神交流的感觉。。（咳咳，发现大家原来都是非常有意思的人，还有黑历史嘿嘿嘿！）还有那句话”不来你会后悔的“嗯，我记住了他。</p>
<p>一起聚餐<br><img data-src="/wp-content/uploads/2015/11/2.jpg"></p>
<p>当晚当得知技术部部长志龙没有队伍时候果断无 idea 和他组队，准备第二天看看能不能做出什么东西来。</p>
<p>第二天早晨果然如怀墨姐所说，又是一场雨夹雪。早晨七点和大家一起从校门口等公交车到微软，虽然很冷，但是大家基本都到了，外校的两个小伙伴也如约而来，九点，开始了一天的 hacking！</p>
<p>首先当然是非常愉快的真·奥义 kickoff！有乐队有美女（晨曦姐哟）有单反有射灯有帅哥，甚至 segmentfault 的创始人和 Lily 姐的宝宝都来和我们助兴！大家一 high 就到了十点多，准备开始 hack，我和志龙一起开始准备做 office 插件，但是发现给的 api 太少，于是放弃，放弃的同时发现者一个上午也就过去了。</p>
<p>Hackathon 开场<br><img data-src="/wp-content/uploads/2015/11/3.jpg"></p>
<p>顺便想说，在 MSRA 的感觉相当不错，有很多讨论间，墙上都有玻璃可以写写画画，而且饮料和小吃都是免费的，于是我和队友非常享受得换了一个方向，开始做 WPF+C#，后台使用世界上最好的语言编写。</p>
<p>Hackathon 过程中<br><img data-src="/wp-content/uploads/2015/11/4.jpg"></p>
<p>到了午饭时候，我和娟子一起主持了两场游戏，一场是经典老歌的记歌词，另一个是男生女生抱在一起（重点就是这里），效果都不错，就是差点被饿晕，好在最后最终大奖的全家桶还没有被吃光，先去抢了两块炸鸡~~</p>
<p>大 Pizza！<br><img data-src="/wp-content/uploads/2015/11/5.jpg"></p>
<p>通过一下午的 hacking，我们的代码已经写得差不多了，而且还可以用（去的时候真的没想到这么快就可以写出来）！</p>
<p>晚上又是一场完整的乐队演出，吉他是一个印度哥们，鼓手当然是被奉为 MSRA 第一美女的陈曦姐，之后小美 high 起来 <a href="http://www.zhihu.com/people/9247d4ce0a04d5edbd5659d8651af57c">@陈子迪</a></p>
<p>上去各种抢镜，还有悠悠球表演，玩的各种 high。</p>
<p>晚上是项目审查，我们因为暴力膜 bi—–所以评委老师不是很喜欢，但是我们独特的演讲方式和很有意思的东西还是获得了全场的掌声~~已经很开心了！</p>
<p>回来的路上大家几个人一堆各种聊天，几乎已经被微软安利的差不多了，msra 已经变成了大家心之所向的地方 233333.</p>
<p>第二天九点钟，我们继续在学校的创新大本营开始 hacking，虽然没有前一天气氛那么好，但是这也是北邮见过的最有创新氛围的地方了！后面沙河的学弟学妹还一起过来和我们 ideathon，讨论沙河校区俱乐部的建设问题。最最重要的是，我们还把校内外远近闻名的 Yisa 学姐含泪叫来给各个团队采访~~</p>
<p>即兴游戏<br><img data-src="/wp-content/uploads/2015/11/6.jpg"></p>
<p>中午继续是全北京最大的 Pizza，而且还叫来了手语社给大家表演节目，没想到一曲南山南变成手语之后画面感暴增有木有！之后请来了即兴剧社团一起和大家玩即兴游戏，整个大本营变成了一个欢声笑语的地方，而且令我万万没有想到的是，有许多不爱表达的同学都兴奋的表达起来，时间一晃就到了下午！</p>
<p>两点多钟的时候我邮在微软的两位校友——姜师兄和唐师姐前来助兴，正赶上我们的 Poster Session，大家都把项目用一张两开的纸画了出来，在一个房间里给其他同学展示，如果觉得还不错可以送一张贴纸作为奖励。大家意犹未尽的时候我们开始项目评审，期间还一起观看了微软的创新秀（虽然问题不断）但是整个气氛都非常的棒！</p>
<p>获奖团队<br><img data-src="/wp-content/uploads/2015/11/7.jpg"><br>获奖团队<br><img data-src="/wp-content/uploads/2015/11/78.jpg"><br>师兄师姐评审<br><img data-src="/wp-content/uploads/2015/11/67.jpg"></p>
<p>评审结束一起合照（为了拉大家出去我穿着短袖把大家拉去接近零度的室外）然后送走嘉宾！</p>
<p>最后到了最激动的颁奖环节~我们有树莓派、Arduino，还有邹欣老师签名的编程之美，气氛从 PosterSession 一直 high 到这时候都没停下来！！</p>
<p>最后清理完大本营，一切完美结束。</p>
<p>最后附上 Hackathon 的视频： <a href="http://v.youku.com/v_show/id_XMTQwOTIzMTcyNA==.html">视频: HACKATHON@BUPT</a></p>
]]></content>
      <categories>
        <category>体验</category>
      </categories>
      <tags>
        <tag>来自知乎</tag>
        <tag>Hackathon</tag>
        <tag>微软</tag>
      </tags>
  </entry>
  <entry>
    <title>参加微软学生夏令营是一种什么样的体验？</title>
    <url>/feelings_about_msc_summer_camp/</url>
    <content><![CDATA[<p>2015 年夏令营的主题是青春创想，古城筑梦。</p>
<p>2015 年 8 月 15 日，day-1，北京，z19，目的地，西安。</p>
<p>并没有个同行的同学在一块坐车，心情平静。</p>
<p>8 月 16 日，day0，早晨八点十分，西安火车站，目的地南洋大酒店。</p>
<p>偶遇同车的北航好友，决定出去浪。</p>
<p>先闲逛到了西交的兴庆公园，眼界大开。我都快决定老了以后在西安居住了。公园里多是老人，但是他们不同于北京的一些公园的老年人多见打牌或者闲聊。他们生活方式很健康。刚进入公园，不小心走到一群老人中，没想明白他们在干什么，突然，澎湖湾在耳边响起，原来是他们在进行一个上百人的大合唱，还有人在指挥！继续向前走，看见许多老人在健身，见到他们打羽毛球隔着球网，踢毽子隔着球网，甚至抖空竹都隔着球网，不仅仅如此，他们在比赛的时候还有教练，非常的有运动感，有对抗感。再向其中深入，看到有一些青年人在围观，走近看，他们原来在玩双杠。更惊讶的是，旁边有一个老人在指导他们，像是他们的教练。我们继续闲聊向前走，豁然开朗看见湖面，像是未名湖一般。刚到西安就见到这么特别的场面，我开始渐渐喜欢上这次西安之旅了。中午回到了宾馆，办理入住。西交大准四星级的酒店环境还不错，不过我也料想到这几天没有太多时间关心酒店环境，会非常忙碌。</p>
<p>下午用 Uber 打车去回民街吃吃吃，碰到了一个当地的司机，给我们推荐了许多西安美食，我当然一一记录下来，比如马峰的小炒，志亮的灌汤包，陕十三的冰激凌，等等（或许过几天可以出来写一个西安美食帖了）。美美吃了一顿以后，回到酒店，准备晚上的开始破冰！</p>
<span id="more"></span>

<p>因为在导演组，所以破冰之前就被皇上@戚朕叫去安排破冰的环节，帮助这一百多名同学快速认识最多的小伙伴。我在华北区的组，和我们一起的还有香港和台湾的同学。简单认识以后各种加加加微信，发现他们日常使用更多的是 Line 和 facebook。安排好几轮好玩游戏以后，破冰结束，白天逛街的困意一扫而光。</p>
<p>晚上是皇上的生日，一起去撸串，后面又回到宾馆玩杀人游戏，几乎不想睡觉。</p>
<p>8 月 17 日，day1，一早还没睡醒就被电话叫床，困意中坐大巴到世纪金源酒店听“新未来”青年论坛，主题大概西咸新区，感兴趣的只有西交前校长做的机器学习的演讲（对了！最后马歆姐抽奖还送了一台 xboxone！我也好想要 5555）。下午参观西咸新区，草草看了一下联通的服务器托管机房和他们的潮汐式供水系统。</p>
<p>最精彩是晚上的 hackathon 启动仪式，台大的一个小伙伴给我们分享了各种酷炫的 hackathon 经历（用屁股遥控跑跑卡丁车 23333）！很多人都热血沸腾，恨不得马上就去 coding 两天做出来超级酷炫的东西。我这个一直给别人说“我是学管理的”的人都已经耐不住心中的激动，准备打开电脑，大干一场。</p>
<p>驱车回去以后，又去开会，敲定了最后十五周年庆祝活动的细节，我开始着手准备一个很有意思的游戏，我叫它——不对，庆祝活动还没开始，暂时保密！ 虽然好困啊，但还是去别人房间玩狼人杀（其中囧事。。算了算了，还是不提了）到凌晨。</p>
<hr>
<p>一个月分界线，看一下一个月后还能记起多少</p>
<hr>
<p>8 月 18 日，day2，酒店电话叫醒失败，最后被敲门叫醒（囧–）。先说一下感想——其实 day1 是最无聊的一天，后面都非常好玩。</p>
<p>最开始的软技能提升由于提前被戚朕剧透，得知机会难得于是顶着前一天的困意用心听完了 Presentation Zen 的演讲，收获颇多，特别是关于演讲的礼仪和手势。（那个有请别人的手势最后被玩坏了 23333）。</p>
<p>接下来就是技术和管理沙龙，技术就是讲 win10，管理就是说俱乐部，所以我一个技术男，选了管理。嗯，ppt 做的不错，以后介绍俱乐部时候用得到，剩下的问题其实很多在 msra 已经讨论过了，呆呆呆坐了两个钟头。</p>
<p>沙龙以后多数同学都很饿了但还要开始研究选题，我们北邮和其他北京天津的学校一起被分在了马歆姐一组，但是根本没体力头脑风暴，只好作罢去吃午饭（中途提出我们学校因为只有三个人想和北航分到一组一起来做，没等反应就被驳回，简直要哭了）午饭过后眼看其他学校热火朝天我们却没啥好想法，着急！待缓过神，其他学校已经开始去和老大讨论项目了，不过我们仨火候已到，一下子想到了十几个 idea。到了北航上台展示的时候我听到了最吸引我的 Cortana 机器人！可是马歆姐却不留情面，对于他们说的点子一一否决。到了我们，更是如此，想到的基本上都是已经有相应产品的或者是没啥可行性的，接着就陷入了迷茫。修改了好几次，owner 依旧不觉得好。外面也下起雨，借机出去溜了一圈，顺便烘托了当时答主的心情。</p>
<p>就这样一直到了晚饭时间。超级好吃的 pizza 多少让我忘记了还没选好题目的不快，先大快朵颐不管体重的吃了一顿，于是——转机来了。贝哥突然空降在 pizza 面前，来向我们推销点子——手机流量分享器，听起来很高大上，其是就是帮别人开个热点，别人给你给钱。所以，紧接着就被三言两语否定掉了。</p>
<p>啊对，说好的转机哪去了。等我们有听说贝哥对摄影很了解，想找他聊关于我们一个 idea 的可行性，但他因为被我们拒绝高冷起来。但是一旁的晨曦姐给我们提了一个意见，也就促成了我们帮拍的出现——当然，这个故事就留在 app 的说明里面去讲了。总之，这个 idea 把马歆姐也彻底打动了，就它了，开始干！</p>
<p>在愉快的讨论中，我们迎来了一顿 MC 的宵夜，更是让我们不计体重的多，BTW，在我不断扯淡北航也不断提升自信的情况下，他们还是选择了小娜机器人。</p>
<p>吃完宵夜，我们和山大一妹子聊的投缘，就一同回酒店休息。。哦不！是继续 hackathon！征得一个小伙伴室友统一的情况下，我们继续作图改 sway，研究可行性。（别问我为啥不撸代码，我一个通信狗加上两个经管同学怎么能一天半就撸出来一个 app！）中间马歆姐和我们打电话聊了一下 pre 时候的方向，又很巧地在群里看到了小雨姐已经来到西安要参与我们活动的消息，就约定第二天见。到了晚上三点多，有些困意了，就准备大概去睡，问了一下北航那边——还在 hacking。没想回去和室友聊得投缘，于是就差不多通宵了。</p>
<p>8 月 19 日，day3，电话叫床失败，被开门叫醒。早晨起来之前看了一眼手机，北航那边还在奋斗。（其实和他们一起奋斗的同学不在少数）简单吃了早点（大赞冰牛奶，提神醒脑神器）以后，发现大厅的人已经不全了。肯定都是通宵了没起来。见到小雨姐带她看了一下我们 idea，她给了我们很多非常棒的建议，嘿嘿，一一采纳之。又是该改改。</p>
<p>说话间，一个大大的展板就被送到眼前，开始准备大作。可是，我们基本没啥绘画天赋，只有小羽去画，然后被我和兆新吐槽，最后在不断吐槽不断修改这种快速迭代之下，看起来还不错，应该说是，很赞。最后两个字是请 VV 帮忙写的非常 nice，可是！可是！最后居然，居然，忘记拍照了！！！这应该是我这一周，偶不，是这一个月，至少一个月，最后悔的事情了！让我做一个大大的悲伤的表情！！！</p>
<p>匆匆吃完午饭，事情就更加混乱起来。</p>
<hr>
<p>三个月更分界线</p>
<hr>
<p>先是被陕西电视台莫名其妙录像（完全没准备的情况下好吧），然后被拉去拍大合照+项目评审。然后是电脑浏览器上不了网，换了好几台电脑还是不行，于是把电脑带到别的教室去先把 Sway 下载下来再带去评审的教室，但是还是被别人拷贝东西的时候关掉了，最终抓阄第二个展示，但是东西完全没准备好啊！</p>
<p>没办法只能硬上，在台上换了好几台电脑之后终于可以用了，但是发现地下所有评委基本都认识！！我记得有 Grorge，小雨姐等等==他们准确抓住了我的弱点，不过好在人性本善 23333，终于结束，好好睡一觉。</p>
<p>一觉醒来就到了车上，去夏令营最后的庆祝晚会，这可是废了我好多电话费开了好多会的成果！最开始的节目都非常顺利（只是感觉舞台大屏幕不是很舒服，也可能是我位置不大对），到了我准备的 head or tail 游戏和参与准备的谢天谢地你来了的游戏时候场面 high 了起来（因为这两个节目本身就很 high），一直持续到晚会结束。到了节目演完，舞台变成了一个 ktv，大家要么去侧面合影，要么去台上 k 歌儿，和孔芳姐（好久没见过她了）还有一大波人上去来了一首单身情歌（没错昨天又被秀了一脸），又接着唱了很多歌，喝了很多啤酒，结结实实 high 了一波，回去时候还把一个小伙伴掺回去了（喝了太多酒）！</p>
<p>晚上又是各种手游，小狮子，vv，台湾小伙伴，小羽，我，还有一波华南理工同学们，大概记得是这样子。</p>
<p>8 月 20 日，day4，上午去看兵马俑，很平常的旅游但还是体现了 MSRA 的细心。当时虽然有导游但是因为不能用喇叭所以还是需要音频接收器，但是要十元租金。估计当时会务公司也没有想到。后来微软方面发现了这个问题，就又把我们接收器的钱帮忙付掉，我们交的钱给我们还回来。虽然只有十元，但真的可以感觉得到他们的细心，只要这几天和 MSRA 一起做的活动，真的是一分钱不带就可以玩的很好。</p>
<p>下午匆匆参观完山西省博物馆就回房间，结束了四天的夏令营。</p>
<p>但是，陕西之旅还没有完结~晚上又和 vv 小狮子老腊肉小羽以及三个台湾同学去吃了泡馍，因为七夕节堵车赶上了晚上十一点的大雁塔，一直 high 到一点多回酒店。</p>
<p>8 月 21 日，强行 day5，21 日，南洋大酒店也到期了，我们奔赴大雁塔旁边青旅住下，打台球玩手游，五子棋永远都下不过小羽。下午去了城墙，果然是个骑车的好地方（可是我并不会骑车），但是呢，还是玩的非常开心！下来以后匆匆送走了即将火车误点的小羽和小狮子，他们俩连行李都没来得及拿就上了火车（我相信这是当天最疯狂的事情了）。晚上和 vv 老腊肉去了很远的地方（貌似有个地儿叫大明湖）吃了一顿烤串儿，酒意正酣，聊了很多很多！</p>
<p>8 月 22 日，强行 day6，最后一天！去见了西电的一个同学，参观了一下他们高大上的寝室和校园，一起聊啦聊我们对很多事情的理解讨论了一些现在做的项目。很悠然恬淡的一天，九点钟，西安火车站，和古城道别了~</p>
<p>8 月 23 日，day NaN，边整理照片边想，还是家里的床舒服，前面一周就像和古城的一次约会，一场大梦。</p>
<p>最后，附太白诗一首</p>
<blockquote>
<p>纬秋啼金井阑，<br>微霜凄凄簟色寒。<br>孤灯不明思欲绝，<br>卷帷望月空长叹。<br>美人如花隔云端！</p>
</blockquote>
]]></content>
      <categories>
        <category>体验</category>
      </categories>
      <tags>
        <tag>来自知乎</tag>
        <tag>微软</tag>
        <tag>夏令营</tag>
      </tags>
  </entry>
  <entry>
    <title>年关随笔</title>
    <url>/feelings_around_new_year/</url>
    <content><![CDATA[<h1 id="深度写作"><a href="#深度写作" class="headerlink" title="深度写作"></a>深度写作</h1><p>最近看见沈向洋发表了一篇文章（地址：<a href="https://zhuanlan.zhihu.com/p/33771188">https://zhuanlan.zhihu.com/p/33771188</a>），大意是说在这个 AI 的时代，虽然每天我们产生和接受的的零碎的信息量都非常巨大，但真正有意义的思考还是需要通过长篇写作来完成。写作可以帮我们理清思绪，可以清晰地表达观点和逻辑。</p>
<p>这也是我最近所担心的事情——我也已经很久没有进行过深度的写作了。</p>
<p>上次系统地写作还是中外文学名著鉴赏的期末作业，文章虽然可以大致表达我想说的表面意思，但是短短八百字的表达却支离破碎，根本无法把我更深成次的想法完整表述出来。在刚写完的时候没感觉到还沾沾自喜，觉得一下午写出来的文章应该还能看，之后读起来却就像是读一篇小学生记的流水账一般，像是喝了一大杯白开水还泛着水垢一般，毫无深度，甚至还难以读完。</p>
<p>感触更深的一次是上个月我想抽空写一下去年的年终总结，但刚提笔就不知道该从何说起，所以又去翻前几年的文章，发现当时的文风根本现在几乎无法模仿。我十分懊恼，故总结也一直搁置下去。</p>
<p>直到今天，我才有勇气重新打开编辑器开始写这篇文章。今天没有给文章定下主题，想到哪里就写哪里，但愿思路会更顺一些吧。</p>
<span id="more"></span>

<h1 id="活着"><a href="#活着" class="headerlink" title="活着"></a>活着</h1><p>正如认识存在需要通过感受虚无一样。认知活着也需要感受死亡。</p>
<p>这个假期的前半段就是虚无与死亡。虽然之前在各种文艺作品中已经见过了无数种死亡的情景，但自己有如此深的感受到却还是第一次——这次死亡的对象不再是文学作品中或者和自己关系不大的某个人，而是我打小就十分亲近的奶奶。</p>
<p>思绪回到寒假之前，刚听闻奶奶住院的消息时，虽然奶奶声音听起来依然慈祥有力，但了解病情后，我十分担忧，感觉就像是一块石头压在心头，怎么都喘不过气，每天晚上能见到的只有噩梦。果不其然，第二次我再打电话过去的时候，奶奶的声音已经有些孱弱，听起来也很是疲惫。</p>
<p>第二天一大早，姑姑给我发的信息只有几个字：能提前回来就提前回来。于是当天就提前请假、买高铁票、交接任务、安排事情、准备回家。我记得当天中午和卤蛋同学一起吃饭，有好几次我都集中不了注意力，大脑里的各种思绪像幻灯片一样飞快地闪过，却怎么也提炼不出头绪来。</p>
<p>回家后就径直到了奶奶住的医院，趁着奶奶比较清醒的时候，同奶奶讲了几句话，还给她看了前两天和卤蛋一起专门给她拍的合影，看得出奶奶当时还挺开心。现在我很感激当时的我所做的这个决定，这几句话大概是和奶奶最后一段完整的对话了。</p>
<p>之后几日，奶奶的身体情况一日不如一日，死神在不断地靠近这个历经近八十年岁月洗礼为家庭为儿孙操劳无数的坚强的女人。我知道，任何手段都无法阻止死神来临的脚步，能做的就是默默等待，当你一不留神，他就会悄无声息地到来。经过几天痛苦的思考，我想，我已经足够坚强，可以接受这个事实。另外，看着奶奶在病床上受苦的样子，有时候我也竟盼着死神早些光顾，她这辈子已经受了太多的苦，能让她早日解脱也未尝不是好事。</p>
<p>2 月 6 日晚上，奶奶情况突然恶化。奶奶弥留之际，爷爷放下多少年来和奶奶的吵吵闹闹，开始和奶奶讲心里话。虽然没有一个“爱”字，但句句都是直戳心灵的情话。这时我才知道，在无数的吵吵闹闹的背后，他们老两口之间更多的是无法用言语表达的爱和包容，才能一起走过这近六十年的风风雨雨。我当时就在想：这老爷子，干嘛就那么犟那么固执，非要到了这个时候才把这些心里话说出来呢，这可是我听过的世界上最动听的情话！可惜不知那时的奶奶究竟还能不能听到。</p>
<p>终于，在 2017 年 2 月 7 日凌晨 3 点 41 分，死神终于悄悄出现在我们身边，带走了这个在世上受尽苦难但又善良而伟大的灵魂。奶奶生前是基督徒，按照教义，她已经为世人受了太多罪过，我相信她的灵魂一定会上天堂，和主耶稣永永远远生活在一起，再也没有烦扰，再也没有痛苦。</p>
<p>此后几日，为奶奶守灵。爷爷奶奶的许多朋友都自行前来吊唁。跟他们聊起来，听他们讲起当年的故事，我才体会到能和爷爷奶奶做朋友的人，也都有着属于他们那个年代的诚实、正直、热心和血气方刚。说起他们的很多事迹，许多自诩深谙社会之道的人，甚至是现在刚成年的许多零零后们，都一定无法理解。这些爷爷奶奶，一生归来后，也仍是少年。</p>
<p>葬礼后，我像是突然醒悟似的，意识到奶奶的的确确，永远离开了我们。回家后，我有时候还是幻想她还在，还在厨房里忙忙碌碌准备我最爱吃的饭菜，还在用她歪歪扭扭新学到的字抄写歌词，还在那台跟她一起度过了几十年的缝纫机上缝缝补补。直到今天，在超市见到一个盒子的时候，我还是会下意识地说道：买上这个可以给奶奶盛放阵线用。接着才想到，她现在在天国，应该已经用不到针线盒了吧。</p>
<p>最后，借用《无问西东》中的一句话：逝者已矣，生者如斯。</p>
<p>在以后的日子里，应该收起悲伤，努力坚强地活下去，要更加好好对待自己所爱之人，如果爱她，就一定要大声地告诉她。这一定是奶奶也天堂所希望看见的。</p>
<h1 id="情人节"><a href="#情人节" class="headerlink" title="情人节"></a>情人节</h1><p>卤蛋同学，今天是我们一起度过的第一个情人节。很巧，也是我们在一起的第 214 天。</p>
<p>和你在一起的这大半年里，每每想到你，我的嘴角都会露出微笑，每每拥抱你，我的内心都感到无比幸福。和你在一起，总有说不完的话，谈不完的心，也有逛不完的商场和公园。</p>
<p>你我从相识到相知再到相爱，每一步都像是上帝安排好的，十分自然地铺在我们面前，但又留下了许许多多值得我们回味的故事。</p>
<p>卤蛋，我爱你，就像爱生命。</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>年终总结</category>
      </categories>
      <tags>
        <tag>年终总结</tag>
      </tags>
  </entry>
  <entry>
    <title>创新小感</title>
    <url>/fellings%20about%20innovation/</url>
    <content><![CDATA[<p><a href="/wp-content/uploads/2015/12/IMG_0509.jpg"><img data-src="/wp-content/uploads/2015/12/IMG_0509-225x300.jpg"></a></p>
<p>“嗯，这样我家辣椒就可以多多的卖出去了！”</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>小感</tag>
      </tags>
  </entry>
  <entry>
    <title>寻觅意义</title>
    <url>/finding_the_meaning/</url>
    <content><![CDATA[<p>偶然读到王德峰老师的一本已经绝版的小册子，叫《寻觅意义》。心想这个题目起的甚是有趣——其一我在想他会怎么写，结果读下去发现是他在各个大学讲座的讲稿的一个小集；其二说来也很巧，我最近也一直在反思意义究竟是什么，我做什么才有意义，我追求的意义是什么，有没有属于这个时代的意义，而真正的大义又是何物呢？</p>
<p>关于时代的意义，和妈妈聊天的时候，她关于她的意义是什么给了我如下的解答：“除了想让你过的开心快乐，剩下的意义就是多赚钱了，钱赚得多，我就感觉很踏实。”我想，前半句是家庭，是我和母亲很真挚的亲情；后半句是时代，是我和母亲以及所有存活于现代社会的人共同处于的环境。</p>
<p>我们所处的是这样一个被资本与技术所主导的时代。所以我理解大家的理想多是要去赚钱。不论男女老少，不论贫穷富贵，每个人的欲望也总和钱脱不开关系。而钱这个东西，究其根本，不过是一个几乎是全人类共同参与的一个游戏，同我们的能生存与否没有什么直接的依赖关系，只是在这个时代里，我们需要用钱去获得各种生存资源和对他人支配的权力。</p>
<span id="more"></span>

<p>所以与其说我们想去赚钱，不如说是这个时代规定了我们想要的是去赚钱。</p>
<p>然而，赚到再多的钱又有什么意义呢？大家拼命多赚钱，最后又能得到什么呢？许多富人甚至比穷人还要忙还要苦恼，他们赚了这么多钱，但是赚到了意义么？</p>
<p>是，赚到钱越多，我们可以获得的社会资源也就越多，可但是钱作为一个可以被数的数字，一个人究其一生，能获得的量总还是有限的。但是人心呢？</p>
<p>一个人可以在史书中穿越到几百年之前，可以在对未来的幻想中穿越到几千年后，甚至可以在对宇宙思考中时间横亘数百亿年。人不论活在哪个时间点，总可以在头脑中对过去和未来作出无限的延拓。所谓人心，是无限的。</p>
<p>倘若有钱的金钱来对无限的生命说：我就是你的意义！这句话还会成立么？</p>
<p>既然金钱的意义是仅对于我们这个时代的，而且对于无限生命来说，它也太微不足道了些，那意义，能够称得起对于生命有意义的东西，究竟是什么呢？</p>
<p>在很长的一段时间里，我曾认为它是宇宙的终极真理。就是随着以物理学为首的近代科学的不断深入探究，我们总能得到一个越来越接近宇宙真相的真理。</p>
<p>但是随着这条线仔细深入想下去，结果却令我失望。就举一个物理学的例子：在这一秒钟苹果从树上掉到了地上，牛顿说它是受到了重力的作用，好，那么请证明，在下一秒钟，还是会有苹果会受到重力落到地上。对于休谟的这个诘难，近代科学还无法解答。我们能说的只是：根据这么多年的人类观察历史，所有的事实皆是如此，所以我相信它会继续下落。</p>
<p>所以从根源上来讲，我们所坚信的自然科学，都是经验的产物。经验总有被打破的时候，那么我们通过经验所找到的这些自然科学的定理，是真的真理么？</p>
<p>我们所掌握的这些科学，倒是为我们控制其它事物提供了许许多多行之有效的方法，可以满足人类许许多多的需求，给资本帮了一个大忙。所以，科学主义，是西方近代理性形而上学的延伸，是笼罩在当代的一种意识形态，它的真理，是基于经验而派生出来的。</p>
<p>唉，通过科学的方法来寻找宇宙终极真理的路，在这里就完全被堵住了。</p>
<p>既然已经在我们外部探究了这么多，寻找意义却依然没有结果，如果转向我们自身，我们内部，又会怎样呢？</p>
<p>我不知道我成长了这二十多岁，已经被这个时代这个世界改变了多少，还依然保留了多少被许多前辈们所诟病的不成熟的“童心”呢？</p>
<p>我想，爱情算是其一，也需要被放在首位。</p>
<p>在爱情里面我相信命运，另一半不需要用什么物质上的可列举条件标准来衡量，需要做的是去等待。对的人可能就是上辈子所注定的，互相相处一段时间，甚至是交换一个眼神，那种爱情的感觉就来了，是一种无法欺骗内心的感觉，就可以确定——就是她！</p>
<p>而缘分呢，感觉就很像佛教中所讲的业。两个人上一世造的业（当然是善业），就像一颗种子一样，不断成长发芽，在这一世，你们就回彼此相遇，由你们共同来完成这一世的存在。当然，你也要在这一世需要珍惜且付诸行动，才能让前世所积攒的被白白消耗。</p>
<p>另外，在爱情中我也像“傻了一般”，并不会理性地计算得失。因为计算得失是商人相处时要去做的事情，跟恋人去计算，我的内心会有极大的阻力和抵触。</p>
<p>在爱情中，我可以感受到一种真实感，一种真真实实存在的，爱与被爱的感受，而非虚无的外物与金钱所能比拟的。</p>
<p>另一个是随着思考理解的深入才认识到的，就是艺术。</p>
<p>最开始醍醐灌顶般明白过来是因为看到了海德格尔的一句话：“艺术是真理的原始发生”。我就在想，为什么是艺术，而不是科学，成为了那个最朴素的真理？</p>
<p>相似的话尼采也说过：“人在事物中除了重新发现自己的入藏品而外再不会重新发现任何东西——这种再发现，自称科学。入藏品包括艺术、宗教、爱、自豪。”他也提到了科学的派生性，而真理来源于艺术、宗教与爱。</p>
<p>如王老师在小册子里所说的，艺术其实就是巫术。</p>
<p>古代人对于巫术，并不是在举行完仪式以后，就什么都不去做了，等着上天的恩赐，而是在仪式完成以后，大家要一起去完成一个凶险困难或对生死存亡意义重大的事情，比如大型狩猎、建造、以及秋收。通过巫术，让集体中的每个人凝结在一起，也给了人类以未来。</p>
<p>为什么会这样？我认为这是由于我们每个人可以理解超验的超自然的事物的存在（比如艺术中的感情、宗教中的神明，甚至是一个国家、一个政党，人们的品格、信念、爱情，更甚至是某个虚构的人格，比如超人，或者是。。。王尼玛）。</p>
<p>而从古至今的诗歌、音乐以及画作等等艺术，都是有此作用。这些艺术作品将人类对某种事物的情感封存在其中，当人们再看到这件作品的时候就可以激发出他们对于情感的共鸣和他们对超验世界共同的认识与体会。</p>
<p>是雕塑艺术让人们真正理解到了石料的存在，否则它们就是一堆用作建筑的物质，是音乐让人们真正理解到了声音的存在，否则它只是一种可以用来传递信息的波（虽然我们每天都通过声音收发了许多信息，却只有音乐能让我们听到真正的声音，这种对于人的感性的存在），绘画也是如此，让我们看到了光线真正的存在，否则它也只是一堆电磁波（然而电磁波也是我们描述它的一个方式，它真正的存在是什么呢，或许只有在绘画中才能真正表现出来）。</p>
<p>让人领悟到物质的感性存在或许就是艺术的伟大之处。</p>
<p>成年人向外部索取太多，而对内部听到的却越来越少，这大概就是孟子所说的“失其本心”吧。在这个只认金钱，意义丢失的时代，我想，不能害怕在时代的荒原中和多数人走上了不同的方向，要回到自己的内心，去真心体验人最真挚的情感，寻找绿洲的存在。说不定，就找到了那一片属于自己的绿洲了呢？</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>哲思</category>
      </categories>
      <tags>
        <tag>意义</tag>
        <tag>哲思</tag>
      </tags>
  </entry>
  <entry>
    <title>谈及自由与美的理想</title>
    <url>/free_and_the_aesthetic/</url>
    <content><![CDATA[<p>这个周就要立夏了，在这个夏天我要战胜它，也战胜自己。</p>
<p>周末和老弟遛弯聊天，他跟我谈及一个严肃而单纯的问题：既然毒品能给人带来快感，那为什么不人人都去吸毒呢？</p>
<p>我假装成一副胸有成竹的模样，“好问题！不过先别讲这个，我要和你谈谈音乐。我还记得上次和你去国家大剧院听新年音乐会时候你的表现。”</p>
<p>为什么谈音乐呢？我无非是希望引导他去认识到音乐之美，而审美判断是“无利害而生愉悦”，从而认识到有比毒品更自由的获得快瑟之感的方式——艺术或者说是道德。</p>
<p>我几乎成功了。</p>
<p>“那么这种愉悦和那种愉悦有何区别？”这个话题绕不开道德。</p>
<p>“而且你刚刚在讲，美的理想和道德的理念是同一的。那么假设一个人没有（像我们世人一样的）道德，那么他是不是也无法感受到艺术之美，那么他只能从毒品之类的东西中获得物质的快感？而凭什么人人都有这样的道德呢？”</p>
<p>我再令他去想为什么国家和法律如此“暴力”：道德次序的维持需要暴力，暴力保证了次序，也保证了减少暴力。所以毒品和问题需要暴力解决。</p>
<span id="more"></span>

<p>“但是，道德又有什么意义呢？你用暴力去维系道德又有什么意义呢？”</p>
<p>“因为人需要自由。人向往自由。音乐可以让人获得自由，道德可以，而毒品不行！”</p>
<p>但自由又有什么意义呢？什么才是自由呢？</p>
<p>我有些歇斯底里，不过在五月份，话题也总是绕不开它。</p>
<p>“你说向往自由，但是佛陀获得了自由，所以他领会到了空。但是空，不会太无聊点了么？”</p>
<p>“所以你想要的意义不就是来自于欲望，这能让你不那么无聊。”</p>
<p>“但是欲望和自由是不是就矛盾了？”</p>
<p>所以人生大概就是痛苦的吧。</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>哲思</category>
      </categories>
      <tags>
        <tag>哲思</tag>
      </tags>
  </entry>
  <entry>
    <title>Freeradius安装配置</title>
    <url>/freeradius_install_and_configure/</url>
    <content><![CDATA[<h1 id="编译安装-freeradius-server"><a href="#编译安装-freeradius-server" class="headerlink" title="编译安装 freeradius-server"></a>编译安装 freeradius-server</h1><p><a href="http://wiki.freeradius.org/building/Home">freeRADIUS WIKI</a></p>
<h2 id="先更新软件"><a href="#先更新软件" class="headerlink" title="先更新软件"></a>先更新软件</h2><figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="meta"><span class="keyword">$sudo</span> apt update</span></span><br><span class="line"><span class="meta"><span class="keyword">$sudo</span> apt upgrade</span></span><br></pre></td></tr></table></figure>

<h2 id="在-git-仓库里-clone-freeradius-server"><a href="#在-git-仓库里-clone-freeradius-server" class="headerlink" title="在 git 仓库里 clone freeradius-server"></a>在 git 仓库里 clone freeradius-server</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/FreeRADIUS/freeradius-server.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> freeradius-server</span></span><br></pre></td></tr></table></figure>

<h2 id="检查版本，如果需要的话要用-git-checkout-切换版本"><a href="#检查版本，如果需要的话要用-git-checkout-切换版本" class="headerlink" title="检查版本，如果需要的话要用 git checkout 切换版本"></a>检查版本，如果需要的话要用 git checkout 切换版本</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line"><span class="keyword">On</span> branch v4<span class="number">.0</span>.x</span><br><span class="line">Your branch <span class="keyword">is</span> up-<span class="keyword">to</span>-<span class="type">date</span> <span class="keyword">with</span> <span class="string">&#x27;origin/v4.0.x&#x27;</span>.</span><br></pre></td></tr></table></figure>

<h2 id="查看依赖并安装"><a href="#查看依赖并安装" class="headerlink" title="查看依赖并安装"></a>查看依赖并安装</h2><figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">$ vim doc<span class="regexp">/developer/</span><span class="keyword">dependencies</span>.rst</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="根据说明，安装-libtalloc-和-kqueue-依赖"><a href="#根据说明，安装-libtalloc-和-kqueue-依赖" class="headerlink" title="根据说明，安装 libtalloc 和 kqueue 依赖"></a>根据说明，安装 libtalloc 和 kqueue 依赖</h2><figure class="highlight q"><table><tr><td class="code"><pre><span class="line">$ sudo apt install libtalloc2 libtalloc-<span class="built_in">dev</span></span><br><span class="line">$ sudo apt-<span class="built_in">get</span> install libkqueue-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure>

<h2 id="查看安装说明"><a href="#查看安装说明" class="headerlink" title="查看安装说明"></a>查看安装说明</h2><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ vim <span class="keyword">INSTALL</span>.rst</span><br></pre></td></tr></table></figure>

<h2 id="进行普通安装，如果需要改变配置直接参考说明文档即可"><a href="#进行普通安装，如果需要改变配置直接参考说明文档即可" class="headerlink" title="进行普通安装，如果需要改变配置直接参考说明文档即可"></a>进行普通安装，如果需要改变配置直接参考说明文档即可</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure</span></span><br></pre></td></tr></table></figure>

<p>check 出错：</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">configure</span>: error: <span class="type">FreeRADIUS</span> requires sup<span class="keyword">port</span> for the C11 _Generic keyword</span><br></pre></td></tr></table></figure>

<p>原因：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">You</span> need gcc at least <span class="number">4</span>.<span class="number">9</span> with C11 support to build development branches (v3.<span class="number">1</span>.x or v4.<span class="number">0</span>.x).</span><br></pre></td></tr></table></figure>

<p>解决方法：</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">To</span> build the latest <span class="keyword">stable</span> versions</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout release_3_0_11</span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">./configure</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make install</span></span><br></pre></td></tr></table></figure>

<h1 id="安装成功后测试"><a href="#安装成功后测试" class="headerlink" title="安装成功后测试"></a>安装成功后测试</h1><h2 id="先关闭-freeradius-服务"><a href="#先关闭-freeradius-服务" class="headerlink" title="先关闭 freeradius 服务"></a>先关闭 freeradius 服务</h2><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">$ sudo service freeradiusd stop</span><br></pre></td></tr></table></figure>

<h2 id="然后以-debug-方式启动-freeradius"><a href="#然后以-debug-方式启动-freeradius" class="headerlink" title="然后以 debug 方式启动 freeradius"></a>然后以 debug 方式启动 freeradius</h2><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>sudo radiusd -X</span><br></pre></td></tr></table></figure>

<h2 id="然后在另一个终端里启动测试程序"><a href="#然后在另一个终端里启动测试程序" class="headerlink" title="然后在另一个终端里启动测试程序"></a>然后在另一个终端里启动测试程序</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">radtest <span class="built_in">test</span> <span class="built_in">test</span> localhost 0 testing123</span></span><br></pre></td></tr></table></figure>

<p>如果收到</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Sent <span class="keyword">Access</span>-Request Id <span class="number">94</span> <span class="keyword">from</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">58263</span> <span class="keyword">to</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1812</span> length <span class="number">74</span></span><br><span class="line"><span class="keyword">User</span>-<span class="type">Name</span> = &quot;test&quot;</span><br><span class="line"><span class="keyword">User</span>-<span class="keyword">Password</span> = &quot;test&quot;</span><br><span class="line">NAS-IP-Address = <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">NAS-Port = <span class="number">0</span></span><br><span class="line">Message-Authenticator = <span class="number">0x00</span></span><br><span class="line">Cleartext-<span class="keyword">Password</span> = &quot;test&quot;</span><br><span class="line">Received <span class="keyword">Access</span>-Reject Id <span class="number">94</span> <span class="keyword">from</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1812</span> <span class="keyword">to</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">0</span> length <span class="number">20</span></span><br><span class="line">(<span class="number">0</span>) -: Expected <span class="keyword">Access</span>-Accept got <span class="keyword">Access</span>-Reject</span><br></pre></td></tr></table></figure>

<p>说明连接测试成功</p>
<h1 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h1><figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">$ sudo apt <span class="keyword">install</span> mysql</span><br></pre></td></tr></table></figure>

<h2 id="配置-MySQL-和-freeradius-的连接"><a href="#配置-MySQL-和-freeradius-的连接" class="headerlink" title="配置 MySQL 和 freeradius 的连接"></a>配置 MySQL 和 freeradius 的连接</h2><p>进入 MySQL 管理界面，并创先 Radius 表和用户并导入表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mysql -uroot -p</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">CREATE DATABASE radius;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">use radius;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">source</span> /etc/freeradius/sql/mysql/admin.sql;</span></span><br><span class="line">admin.sql 里面可以修改 raidius 的账号密码，但也需要在 raddb/sql.conf 中修改</span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">source</span> /etc/freeradius/sql/mysql/schema.sql;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">source</span> /etc/freeradius/sql/mysql/ippool.sql;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">source</span> /etc/freeradius/sql/mysql/schema.sql;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">source</span> /etc/freeradius/sql/mysql/wimax.sql;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">source</span> /etc/freeradius/sql/mysql/cui.sql;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="built_in">source</span> /etc/freeradius/sql/mysql/nas.sql;</span></span><br></pre></td></tr></table></figure>

<h2 id="配置-freeradius"><a href="#配置-freeradius" class="headerlink" title="配置 freeradius"></a>配置 freeradius</h2><p>配置文件在<code>/usr/local/etc/raddb</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">cd</span> /usr/local/etc/raddb</span></span><br></pre></td></tr></table></figure>

<p>仔细阅读 radiusd.conf</p>
<h2 id="打开-radius-的-sql-模块"><a href="#打开-radius-的-sql-模块" class="headerlink" title="打开 radius 的 sql 模块"></a>打开 radius 的 sql 模块</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">ln</span> -s ../mods-available/sql</span></span><br></pre></td></tr></table></figure>

<p>将数据库配置变为 mysql，并且取消用户名密码端口 ip 这一组注释</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># radius -X</span></span><br></pre></td></tr></table></figure>

<p>检查启动信息，如果出现</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">rlm_sql_mysql</span>: Connected to database &#x27;radius&#x27; <span class="literal">on</span> Localhost via UNIX socket, server version <span class="number">5</span>.<span class="number">5</span>.<span class="number">54</span>-<span class="number">0</span>ubuntu<span class="number">0.14.04.1</span>, protocol version <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>说明 mysql 连接成功</p>
<h2 id="配置用户密码"><a href="#配置用户密码" class="headerlink" title="配置用户密码"></a>配置用户密码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim <span class="built_in">users</span></span></span><br></pre></td></tr></table></figure>

<p>加入一行</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">radius Cleartext-Password := <span class="string">&quot;radpass&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后再次进行 radtest 测试，并重启 radiusd 服务</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># radtest radius radpass localhost 1812 testing123</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">Sent</span> Access-Request Id <span class="number">74</span> from <span class="number">0.0.0.0:59423</span> to <span class="number">127.0.0.1:1812</span> length <span class="number">76</span></span><br><span class="line"><span class="attribute">User</span>-Name = <span class="string">&quot;radius&quot;</span></span><br><span class="line"><span class="attribute">User</span>-Password = <span class="string">&quot;radpass&quot;</span></span><br><span class="line"><span class="attribute">NAS</span>-IP-Address = <span class="number">127.0.0.1</span></span><br><span class="line"><span class="attribute">NAS</span>-Port = <span class="number">1812</span></span><br><span class="line"><span class="attribute">Message</span>-Authenticator = <span class="number">0</span>x00</span><br><span class="line"><span class="attribute">Cleartext</span>-Password = <span class="string">&quot;radpass&quot;</span></span><br><span class="line"><span class="attribute">Received</span> Access-Accept Id <span class="number">74</span> from <span class="number">127.0.0.1:1812</span> to <span class="number">0.0.0.0:0</span> length <span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>可以看到，已经连接成功</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Freeradius</tag>
        <tag>Radius</tag>
      </tags>
  </entry>
  <entry>
    <title>Get Start</title>
    <url>/get_start/</url>
    <content><![CDATA[<p>2015/4/30 更</p>
<p>受到高策童鞋（<a href="http://gaocegege.com/">高策的个人主页</a>）的影响，想建立一个 blog，今天终于变成了现实。 昨天志鹏告诉我说，SAE 很不错，我决定试试。就在今晚的人力资源管理课上开始。</p>
<p>看了一些 blog 框架，最终决定先用 WordPress。</p>
<p>定位呢，本来我不是技术宅，就建成一个个人的随笔吧~偶尔随心来更一下 (=^.^=) 以后慢慢自己来做一些东西，当成一个长期的项目来完善。</p>
<hr>
<p>2018/8/23 更</p>
<p>由于阿里云到期，博客换成了 Hexo 框架+Next 主题。</p>
<p>期待自己之后可以分享更换的感受和心得吧。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>小感</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建基于Git的小型团队测试服务器</title>
    <url>/git_small_team_server/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>最近在团队开发中遇到很多麻烦的问题，多人协作很不方便，所以就想搭建一个基于 Git 的小型团队协作（也就是很多东西需要手动配置）服务器，完成一些小型的开发测试工作。</p>
<p>关于 Git 的基本操作推荐廖雪峰的 Git 教程：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p>
<h1 id="安装配置-Git"><a href="#安装配置-Git" class="headerlink" title="安装配置 Git"></a>安装配置 Git</h1><p>安装 Git 软件</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">yum <span class="keyword">install</span> git</span><br></pre></td></tr></table></figure>

<p>添加一个 git 账户，用于使用 ssh 方式远程连接 git 服务</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">useradd</span> git</span><br><span class="line">passwd git（给 git 账户设置密码）</span><br></pre></td></tr></table></figure>

<p>禁用 git 账户登录 shell</p>
<span id="more"></span>

<p>编辑账户配置文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>passwd</span><br></pre></td></tr></table></figure>

<p>找到这一行</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">git:</span><span class="symbol">x:</span><span class="number">1001</span><span class="symbol">:</span><span class="number">1001</span><span class="symbol">:</span>,,,<span class="symbol">:/home/git</span><span class="symbol">:/bin/bash</span></span><br><span class="line">改为</span><br><span class="line"><span class="symbol">git:</span><span class="symbol">x:</span><span class="number">1001</span><span class="symbol">:</span><span class="number">1001</span><span class="symbol">:</span>,,,<span class="symbol">:/home/git</span><span class="symbol">:/usr/bin/git-shell</span></span><br></pre></td></tr></table></figure>

<p>设置以后，git 用户可以正常通过 ssh 使用 git，但无法登录 shell，因为已经为 git 用户指定了 git-shell，该 shell 每次一登录就自动退出 配置一下 git 的默认账户和邮箱</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.name</span> <span class="string">&quot;Jason&quot;</span></span><br><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.email</span> <span class="string">&quot;jason@zhengzi.me&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="建立-Git-总仓库"><a href="#建立-Git-总仓库" class="headerlink" title="建立 Git 总仓库"></a>建立 Git 总仓库</h1><p>初始化 Git 仓库，在这里选择在<code>/srv/dev/main.git</code> 目录下操作</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> /srv/dev</span><br><span class="line"><span class="built_in">cd</span> /srv/dev</span><br><span class="line">git init --bare main.git</span><br></pre></td></tr></table></figure>

<p>在这里要说明两点：</p>
<ul>
<li>git 仓库的目录名一般习惯上使用.git 结尾</li>
<li>使用–bare 参数初始化仓库是初始化咯仓库的意思因为我们在 main 目录下只是为了建立一个历史纪录的库，而不需要实际中该项目文件的拷贝，所以这个目录不是所谓的工作目录，只是所谓的工作目录下.git 文件夹中的内容，具体可以 google 一下 <code>git init</code>  和 <code>git init –bare</code> 的区别</li>
</ul>
<p>把仓库 owner 改为 git 账户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> git:git main.git</span><br></pre></td></tr></table></figure>

<p>现在 Git 的总仓库已经建立完成了！接下来，为每个小伙伴建立仓库</p>
<h1 id="配置-SSH"><a href="#配置-SSH" class="headerlink" title="配置 SSH"></a>配置 SSH</h1><p>首先说一下，这次我想使用 SSH 方法登录认证 git，所以根据 SSH 的思路，可以使用 SSH Key 或者用户密码来认证。 因为 SSH Key 还需要收集大家的公钥，用起来比较麻烦，所以我选择直接使用账户密码认证（其是不推荐这样，容易受到中间人攻击）。 如果服务器没有配置使用用户名密码进行 SSH 需要这样设置</p>
<p>编辑<code>/etc/ssh/sshd_config</code><br>找到</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#PasswordAuthentication no</span></span><br></pre></td></tr></table></figure>

<p>改为</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">PasswordAuthentication</span> <span class="literal">yes</span></span><br></pre></td></tr></table></figure>

<p>关于密钥加密的配置方法可以参考 <a href="http://blog.csdn.net/wave_1102/article/details/47779401">http://blog.csdn.net/wave_1102/article/details/47779401</a></p>
<h1 id="为每个小伙伴创建自己的仓库"><a href="#为每个小伙伴创建自己的仓库" class="headerlink" title="为每个小伙伴创建自己的仓库"></a>为每个小伙伴创建自己的仓库</h1><p>首先建立一个 dev 用户组，所有的小伙伴都归入这个组中</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">groupadd dev</span></span><br></pre></td></tr></table></figure>

<p>在这里以一个叫 learn 而的用户为例 （之后如果有其他用户加入，添加方法和下面相同）</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">useradd</span> -<span class="variable">d</span> /<span class="variable">usr</span>/<span class="variable">learn</span> -<span class="variable">m</span> <span class="variable">learn</span> -<span class="variable">g</span> <span class="variable">dev</span></span><br><span class="line"><span class="variable">passwd</span> <span class="function"><span class="title">learn</span>(为你的小伙伴设置初始密码)</span></span><br></pre></td></tr></table></figure>

<p>为什么为 learn 用户分配了一个<code>/usr</code> 目录下的主文件夹呢，因为他很可能还要在服务器上写一些其他的脚本什么的，留个主目录方便。 在<code>/srv/dev/learn clone</code> 一个用户仓库</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">mkdir learn</span><br><span class="line">cd learn</span><br><span class="line">git clone git<span class="variable">@localhost</span><span class="symbol">:/srv/dev/main</span>.git /srv/dev/learn</span><br><span class="line">或者</span><br><span class="line">git clone git@(你的服务器 <span class="title class_">IP</span>)<span class="symbol">:/srv/dev/main</span>.git /srv/dev/learn</span><br><span class="line">(会提示输入之前设置的 git 用户的密码)</span><br></pre></td></tr></table></figure>

<p>然后将 learn 目录的所有权变为 learn 账户</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chown</span> dev:learn /srv/dev/learn</span><br></pre></td></tr></table></figure>

<p>现在，就可以把代码拷贝到 learn 目录然后做 first commit 了！ 比如把代码拷贝过来之后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /srv/dev/learn</span><br><span class="line">git add *</span><br><span class="line">git commit -m <span class="string">&quot;this is the first commit&quot;</span></span><br></pre></td></tr></table></figure>

<p>当然，现在只是把代码提交到这个叫 learn 的小伙伴的 git 仓库中，他可以随时提交更改回退，当然要想提交到主仓库，可以这样操作</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">push</span> -u <span class="built_in">origin</span> master</span><br></pre></td></tr></table></figure>

<p>PS：第一次提交要使用-u，之后就不用使用了 现在，就已经可以做到让小伙伴们登陆远程开发服务器进行开发，每个人都拥有自己的版本库并且可以提交到中心版本库中 关于 Git 的详细使用方法，可以参考文初推荐的教程 最后说一下，如果有人想在本地也 clone 一个代码库的话，可以 clone 一个自己的代码库到本地，每次更改后提交到自己的代码库中，如果需要合并到主版本库，用自己的账户登录到服务器提交即可。</p>
<h1 id="配置服务器"><a href="#配置服务器" class="headerlink" title="配置服务器"></a>配置服务器</h1><p>我们团队需要建立的是 PHP+Apache+MySQL 测试环境，所以最后还需要配置一下 Apache（如果是别的平台可自行配置，也可留言讨论） 打开 Apache 配置文件</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">vim</span> /etc/httpd/<span class="keyword">conf</span>/httpd.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure>

<p>假设在 88 端口使用虚拟主机进行配置，添加一下代码到配置文件中</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Listen</span> <span class="number">88</span></span><br><span class="line"><span class="section">&lt;VirtualHost *<span class="number">:88</span>&gt;</span></span><br><span class="line"><span class="attribute">DocumentRoot</span> <span class="string">&quot;/srv/dev&quot;</span></span><br><span class="line"><span class="section">&lt;Directory <span class="string">&quot;/srv/dev&quot;</span>&gt;</span></span><br><span class="line"><span class="attribute">Options</span> Indexes FollowSymLinks # <span class="literal">Allow</span> open access:</span><br><span class="line"><span class="attribute">Require</span> <span class="literal">all</span> granted</span><br><span class="line"><span class="section">&lt;/Directory&gt;</span></span><br><span class="line"><span class="section">&lt;/VirtualHost&gt;</span></span><br></pre></td></tr></table></figure>

<p>最后重启 Apache</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><span class="line">systemctl <span class="built_in">restart</span> httpd.service</span><br></pre></td></tr></table></figure>

<p>好了！一切完工，现在每个小伙伴都可以有一个自己的测试 URL 了，还是以 learn 用户为例</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">http:</span><span class="comment">//测试服务器IP或域名:88/learn</span></span><br></pre></td></tr></table></figure>

<h1 id="一切完工"><a href="#一切完工" class="headerlink" title="一切完工"></a>一切完工</h1><p>一切完成！可以让小伙伴们告诉你他想要的账户然后按照“为每个小伙伴创建自己的仓库”一节所说的，帮他们创建自己的测试仓库了。</p>
<p>最后说一下，关于 SSH 公钥管理还有一个软件叫做<a href="https://github.com/sitaramc/gitolite">Gitosis</a>。不过小团队也没有必要使用，大的团队需要使用的话可以自行研究。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>HoloLens开发初体验</title>
    <url>/hololens_developement/</url>
    <content><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>HoloLens 是微软推出的一款增强现实（AR），也有人称之为混合现实（MR）设备。它的技术非常具有革命性，带上它就可以将虚拟世界叠加在现实世界之中，给人们带来虚拟和现实结合的沉浸体验。这样的交互更加自然便捷，很可能会成为几年后一种常见的人机交互方式。</p>
<p>现在已经发售的开发版参数可以在<a href="https://www.microsoft.com/microsoft-hololens/en-us/development-edition">https://www.microsoft.com/microsoft-hololens/en-us/development-edition</a>中查看，简要说一下，它有 64GB Flash 存储空间，2GB RAM ，2GB CPU 和 1GB HPU（我也不知道 HPU 是什么意思，官网上如是写），大约可以持续使用两三个小时，重量是 579g（戴在头上还是有些分量的）。</p>
<p>更多的官方介绍也可以移步 HoloLens 官网查看<a href="https://www.microsoft.com/microsoft-hololens/en-us">https://www.microsoft.com/microsoft-hololens/en-us</a>。</p>
<p>在微软学生夏令营上的 Hackathon 环节中有幸接触到 HoloLens，我们希望开发一个类似于 Ingress 和部落冲突合体的实感游戏，并且可以多玩家互联，让玩家可以体验到兼爱非攻的思维。但是迫于没有 Unity 开发经验和时间限制（36h），我们就将目标定为一个拾取能量和补充能量的 Demo。</p>
<p>在这里总结一下这次 HoloLens 的大致开发流程，如果没空看这里的瞎扯，请直接看最下面的参考资料，有很多干货和大牛的文章很值得一读。</p>
<h1 id="体验感受"><a href="#体验感受" class="headerlink" title="体验感受"></a>体验感受</h1><p>官方的话说完了，说说我的感受吧。</p>
<p>刚拿到 HoloLens 的时候就发现了很多它的局限，没有想象中那么好。第一是它的视野有限（比想象中的还要要小很多，就像在眼前加了一台显示器，根本不够用！希望以后的版本可以解决这个问题），第二是计算能力不够（不过缺点也是优点，它是一台完整的 PC，不必像其他 VR 设备那样受到拖线的叨扰），第三是手势输入很困难，现在只有两个手势，一个是只用食指的点按，一个是五指张开的 Bloom，交互起来不是很方便。剩下的还有只支持英文，画面深度控制不合理会导致眼睛酸痛，机器太沉等等问题。</p>
<span id="more"></span>

<p>不过随着几天的体验，我发现了使用 HoloLens 的要领——站起来，更要走起来！当你站起来以后会发现整个世界都变了，不再是坐着使用 HoloLens 那种无感的场景。当你站起来的时候，可以看到所有被你钉在墙上，pin 在窗上，甚至浮在空中的窗口，当然你也可以将窗口边走边用手拽到一个合适的地方。现实世界和虚拟世界就这样毫不冲突地结合到了一起，甚至用了一会以后，你会忘记真实世界到底是什么样的，把 HoloLens 摘掉以后会很不适应无法控制窗口的感觉。交互操作也没有那么不堪，Bloom 手势非常漂亮，开始屏幕打开的那一瞬间，简直帅爆了！Cortana 的灵敏度也超乎我想象，我可以用我只有六级英语的水平和她轻松对话。最最值得一提的是，当你把一个物体，比如一个飞机模型或者一个地球，甚至整个银河系放置在桌子上的时候，你可以围着它进行 360° 观察，去看清楚每一个方向的细节，也可以点击某个星球进入那个星球或者将一个飞机放大，让它充满整个屋子。感觉是相当震撼！从来没有一款 VR 产品可以让我有这么真实但又虚幻的震撼感，HoloLens 的确做到了，非常完美！</p>
<h1 id="开发前准备"><a href="#开发前准备" class="headerlink" title="开发前准备"></a>开发前准备</h1><ol>
<li> 准备：安装有 Windws10 的 PC，如果需要 HoloLens 模拟器的话需要 4GB 以上的内存和支持虚拟化的 4 核心以上的 CPU。</li>
<li> 安装 Visual Studio 2015：任何版本都可，推荐使用免费的 community 版本，下载链接 <a href="https://www.visualstudio.com/">https://www.visualstudio.com/</a></li>
<li> 安装 Unity For HoloLens：普通的 Unity 版本是不支持 HoloLens 相关设置的，需要使用专门为 HoloLens 定制的 Unity 版本，下载地址 <a href="http://aka.ms/HoloLensUnity">http://aka.ms/HoloLensUnity</a></li>
<li> 安装 HoloLens Emulator：如果暂时没有 HoloLens 可以真机调试，可以使用模拟器代为调试，下载地址 <a href="http://go.microsoft.com/fwlink/?LinkID=823018">http://go.microsoft.com/fwlink/?LinkID=823018</a></li>
</ol>
<p>这次开发的目标是一个 3D 游戏，所以使用主要使用 Unity 对游戏进行开发，使用 VS 对代码进行调试以及传输至 HoloLens。</p>
<p>除了使用 Unity 开发以外，还可以使用 DirectX 进行开发，或者可以直接将开发好的 UWP 程序在 HoloLens 上运行。</p>
<h1 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h1><h2 id="在-Unity-上进行游戏开发"><a href="#在-Unity-上进行游戏开发" class="headerlink" title="在 Unity 上进行游戏开发"></a>在 Unity 上进行游戏开发</h2><p>首先在 HoloLens 定制版的 Unity 新建工程，然后需要改一下设置来适应 HoloLens。具体可以参考：<a href="https://developer.microsoft.com/zh-cn/windows/holographic/unity_development_overview">https://developer.microsoft.com/zh-cn/windows/holographic/unity_development_overview</a></p>
<p>由于事件紧张，所以队友们都是在现学现卖，水平都是一天入门的级别，所以游戏效果并不是很好，就不去贴代码啦~大致的效果就是可以通过点击拾取从空中掉落的能量球并将拾取到的能量提供给自己的能量晶体。</p>
<h2 id="处理游戏与-HoloLens-的交互"><a href="#处理游戏与-HoloLens-的交互" class="headerlink" title="处理游戏与 HoloLens 的交互"></a>处理游戏与 HoloLens 的交互</h2><p>现在，假装在 Unity 上模拟器（或者生成 exe 文件以后）已经可以跑起来啦。但是因为 HoloLens 的交互方式和普通的鼠标键盘交互有很大的区别，所以我们还需要为 HoloLens 的交互进行处理。</p>
<p>先来说一下 HoloLens 交互的主要类型吧，HoloLens 提供了下面六组 API：</p>
<ul>
<li>世界坐标  <a href="https://dev.windows.com/zh-cn/holographic/coordinate_systems">World coordinates</a></li>
<li>凝视输入  <a href="https://dev.windows.com/zh-cn/holographic/gaze">Gaze input</a></li>
<li>手势输入  <a href="https://dev.windows.com/zh-cn/holographic/gestures">Gesture input</a></li>
<li>声音输入  <a href="https://dev.windows.com/zh-cn/holographic/voice_input">Voice input</a></li>
<li>空间声音  <a href="https://dev.windows.com/zh-cn/holographic/spatial_sound">Spatial sound</a></li>
<li>空间匹配  <a href="https://dev.windows.com/zh-cn/holographic/spatial_mapping">Spatial mapping</a></li>
</ul>
<p>我们这次需要使用的是凝视输入、手势输入和空间匹配。凝视能量球或者能量晶体，然后发射凝视射线，然后检测手势点击，如果检测到跟晶体碰撞并且进行点击，则拾取能量或者补充能量。在放置能量晶体的时候需要扫描整个空间，然后将晶体放置在一个表面上面，在能量球掉落的时候如果掉到地面上就自动消失。</p>
<p>在直接查看官方文档中的 API 介绍的时候非常晕，也并没有 API 使用的例子，所以直接参考<a href="https://developer.microsoft.com/zh-cn/windows/holographic/holograms_101">官网给出的 Demo101</a>学习怎么使用这些 API。通过阅读源代码并且理解相关含义以后大致明白其思路，并且加到自己代码中实验，发现可以运行。之后我们又发现了更好的办法——直接使用 Github 上面给出的 SDK 进行开发，步骤简化了不少，但是因为代码版本不匹配，所以很多库根本无法编译通过，只能删掉之。</p>
<h2 id="在模拟器和真机上进行调试"><a href="#在模拟器和真机上进行调试" class="headerlink" title="在模拟器和真机上进行调试"></a>在模拟器和真机上进行调试</h2><ol>
<li> 将 Unity 工程导出，使用 Visua Studio（需要设置为 D3D 和 UAP），使用 USB 电缆连接 HoloLens。（也可以使用 WiFi 连接，这时需要主机和 HoloLens 连接到同一个 WiFi，在编译选项中的调试设备中选择 Remote，按照提示进行）</li>
<li> 调整目标设备：在解决方案管理器中右键<strong>Package.appxmanifest</strong> 文件，选择查看代码，找到<strong>TargetDeviceFamily</strong> 标签，将其中的<strong>Name=”Windows.Universal”<strong>改为</strong>Name=”Windows.Holographic”<strong>，将其中的</strong>MaxVersionTested=”10.0.10240.0”<strong>改为</strong>MaxVersionTested=”10.0.10586.0”。</strong></li>
<li> 调整编译选项：改变目标为 x86（现在只支持 x86），并且将生成配置从 Debug 切换到 Release，调试设备选择 Device。</li>
<li> 点击开始，经过编译和远程部署即可在 HoloLens 中打开。</li>
<li> 具体步骤可以参考：<a href="https://developer.microsoft.com/zh-cn/windows/holographic/holograms_100">https://developer.microsoft.com/zh-cn/windows/holographic/holograms_100</a></li>
</ol>
<p>除了调试代码以外，还可以使用 Device Portal 查看 HoloLens 运行状态并且查看 HoloLens 中的实时画面。</p>
<ol>
<li> 首先在 HoloLens 的<strong>Settings</strong>中的<strong>Update</strong>里的<strong>For developers</strong>选项中打开 Device Portal 选项</li>
<li> 使用 USB 或者 WiFi 连接，如果是 USB 连接的话，在浏览器里输入<a href="http://127.0.0.1:10080，如果是WiFil连接的话，输入HoloLens的https://">http://127.0.0.1:10080，如果是WiFil连接的话，输入HoloLens的https://</a>&lt;HoloLens 的 IP 地址&gt;（可以在设置重的网络设置里查看）即可。如果需要安装安全证书则要进行安装。</li>
<li> 然后按照提示输入 HoloLens 里显示的 PIN 码，然后设置 Portal 的登陆密码，接下来就可以查看管理 HoloLens 的各个设置了。</li>
<li> 其实 Portal 也是运用了 HoloLens 提供的 Restful 接口进行编写的，所以可以使用 HoloLens 提供的 Restful 接口自行提取数据。</li>
</ol>
<ul>
<li>关于设置 Portal 的方法可以参考：<a href="https://developer.microsoft.com/en-us/windows/holographic/using_the_windows_device_portal">https://developer.microsoft.com/en-us/windows/holographic/using_the_windows_device_portal</a></li>
<li>关于 Restful API 可以参考：<a href="https://developer.microsoft.com/en-us/windows/holographic/device_portal_api_reference">https://developer.microsoft.com/en-us/windows/holographic/device_portal_api_reference</a></li>
</ul>
<h1 id="开发的最终效果"><a href="#开发的最终效果" class="headerlink" title="开发的最终效果"></a>开发的最终效果</h1><p>嗯，不多说了，很多功能都还有 BUG，直接上图。 <a href="/wp-content/uploads/2016/08/e1e42585f9ee0d209d54a44e1835aaa9_r.png"><img data-src="/wp-content/uploads/2016/08/e1e42585f9ee0d209d54a44e1835aaa9_r-1024x575.png" alt="HoloLens效果"></a> 嗯，如果发现这篇文章以后博客停更那一定是被队友打死了。 最后 Tip：由于 HoloLens 的计算能力有限，所以不要放置太复杂的模型上去，否则，后果自负（嗯，其实也没什么后果，就是黑屏而已啦）。</p>
<p>顺便再宣传一下知乎上面的回答吧：<a href="http://zhihu.com/question/31743851/answer/59362202">参加微软学生夏令营是一种什么样的体验？ - 回答作者: 政子 http://zhihu.com/question/31743851/answer/59362202</a></p>
<p>这里还有一个自己录制的 HoloLens 真机使用视频：<a href="http://v.youku.com/v_show/id_XMTcwMjU0NDEwOA==.html?beta&#paction">http://v.youku.com/v_show/id_XMTcwMjU0NDEwOA==.html?beta&amp;#paction</a></p>
<h1 id="有干货的参考资料"><a href="#有干货的参考资料" class="headerlink" title="有干货的参考资料"></a>有干货的参考资料</h1><ul>
<li>HoloLens 官网：<a href="https://www.microsoft.com/microsoft-hololens/en-us">https://www.microsoft.com/microsoft-hololens/en-us</a>（实用的东西非常多！）</li>
<li>微软学生俱乐部官网微信开发指南：<a href="http://mp.weixin.qq.com/s?__biz=MzA4NzIyMDY0OA==&mid=2655379911&idx=1&sn=723b87293cf14eafa878d72ce80de996&scene=21#wechat_redirect">第一弹</a> ，<a href="http://mp.weixin.qq.com/s?__biz=MzA4NzIyMDY0OA==&mid=2655379962&idx=1&sn=942e9c182bba77f5c948f38a43d80b12&scene=21#wechat_redirect">第二弹</a>，<a href="http://mp.weixin.qq.com/s?__biz=MzA4NzIyMDY0OA==&mid=2655379978&idx=1&sn=856278ad56011106a0c214908d7b7ed0&scene=4#wechat_redirect">第三弹</a> （干货非常多）</li>
<li>MSP 的昌伟哥哥的博客：<a href="http://www.cnblogs.com/mantgh/">http://www.cnblogs.com/mantgh/</a></li>
<li>微软官方示例：<a href="https://developer.microsoft.com/zh-cn/windows/holographic/academy">https://developer.microsoft.com/zh-cn/windows/holographic/academy</a>（一定要仔细看，跟着一两个例子做完基本就能入门了）</li>
<li>微软官方文档：<a href="https://developer.microsoft.com/zh-cn/windows/holographic/documentation">https://developer.microsoft.com/zh-cn/windows/holographic/documentation</a>（文档就不是很行，很多地方莫名其妙）</li>
<li>在 Unity 上 HoloLens 的开发 SDK：<a href="https://github.com/Microsoft/HoloToolkit-Unity">https://github.com/Microsoft/HoloToolkit-Unity</a> 和 <a href="https://github.com/Microsoft/HoloToolkit">https://github.com/Microsoft/HoloToolkit</a></li>
<li>HoloLens 文档翻译：<a href="https://github.com/HoloDocs/HoloLensDocs">https://github.com/HoloDocs/HoloLensDocs</a>（这是 MSP 的昌伟哥哥写的，质量比较高，github 上还有很多，也可以参考其他的）</li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>UWP</tag>
        <tag>AR</tag>
        <tag>HoloLens</tag>
        <tag>MR</tag>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>如果弹幕不曾有派</title>
    <url>/if_theres_no_danmakupie/</url>
    <content><![CDATA[<h1 id="喂，开始行动了"><a href="#喂，开始行动了" class="headerlink" title="喂，开始行动了"></a>喂，开始行动了</h1><p>“喂，子政！我下午要给学弟学妹们办一场讲座，你知道怎么在 PPT 里播放弹幕码？”惠东急匆匆打来一通电话。”你说的就是像小米发布会那样吧？我还真没研究过。”我摊摊手道。</p>
<p>电话过后，恰赶上北邮 MSC 举办 Hackathon@BPUT。于是我和志龙一拍即合，在 MSRA 花了一个下午的时间，搞定了弹幕派 V0.1。</p>
<h1 id="弹幕从此有了派"><a href="#弹幕从此有了派" class="headerlink" title="弹幕从此有了派"></a>弹幕从此有了派</h1><p>最开始，弹幕派的功能简单到令人发指——扫码打开网页，输入弹幕，点击发送，弹幕就立刻出现在 PPT 上了。网页没有前端，独有一个输入框；桌面不能更改字体字号，只有一条弹幕轨道。不出意外，它并没有受到评委们的青睐——只是一个自娱自乐的小玩具，没有技术含量，没有商业前景。除了，演示完毕时同学们突如其来的掌声和过后晨曦姐对我们的鼓励。</p>
<h1 id="“我们再改改？”"><a href="#“我们再改改？”" class="headerlink" title="“我们再改改？”"></a>“我们再改改？”</h1><p>冬去春来，志龙和我的聊天记录里最多的就是这句话。由于想要的功能太多，思路三天两头变化，短短三个月，后端代码就重构了两次——从最开始的面向过程，逐渐引入了设计模式。</p>
<span id="more"></span>

<p>改变是可以看见的。我们拥有了官方微信号，可以使用微信发送弹幕；我们有了房间管理，可以供多人同时使用；我们有了弹幕控制，UI 变得更加 Modern；我们的软件走向绿色化，下载就立即可用……</p>
<p>在我们天马行空的想象中，不断对项目提出新的要求，不断修改提交代码，往复循环，并乐在其中。</p>
<h1 id="用户是动力"><a href="#用户是动力" class="headerlink" title="用户是动力"></a>用户是动力</h1><p>三月里，京城的春花渐次苏醒。弹幕派终于有了自己的网站——<a href="http://www.danmakupie.com,有了自己的新/">www.danmakupie.com，有了自己的新</a> LOGO，有了第一篇帮助文档，有了后台控制面板，也开启了第一轮公测。惠东当然是我们的第一位公测用户。</p>
<p>试用过后，他提出了很多不错的看法和建议，比如弹幕的样式应该和 PPT 可以有所区分，后台应该可以绑定使用者自己的公众号，用户注册流程不能这么莫名其妙，等等。我们悉数记下，承诺其中大部分问题会在下一个版本中得到解决或者改进。与此同时，也有一些好友通过微信和微博向我们表达了他们的使用感受和改进建议。</p>
<p>我们决定通过 OneNote 来不断记录用户的建议，找出需要改进的方向并分出优先级，每天花一两个小时来改进我们的程序。我们依旧乐此不疲。就这样，弹幕派在许多用户的指引下，不断引入新功能（和新 BUG），不断根据需求调整产品的思路，一路走到了今天。</p>
<h1 id="使命为开源"><a href="#使命为开源" class="headerlink" title="使命为开源"></a>使命为开源</h1><p>派团队没有忘记半年前在 Hackathon 上我们对于开源的承诺。代码重构完成以后，我们就在 GitHub 上公开了几乎所有的源代码。我们不仅仅获得了网友 Fork 和 Star，更收获了一批新的用户。</p>
<p>一位广东的同学在 GitHub 中找到了弹幕派。非常幸运，他成为了弹幕派的第 45 位用户，也让弹幕派第一次被应用到了实际场景。在他们的职协成果展中，参加的同学使用弹幕派进行留言，并取得了很好的效果。他还为弹幕派找到了一些 BUG，并且提供了很多新的建议。</p>
<p>还有一位高中的小弟弟，也通过 GitHub 找到了弹幕派。别看他年纪不大，代码水平可一点都不差。他告诉我，以前使用 GDI+技术实现过类似于我们的弹幕效果，并且在配置不高的电脑上表现不错。他只用了一个下午把他的代码移植到了弹幕派中并提交了 Pull Request，我们正在考虑将这些代码变成低配电脑的兼容性模式。</p>
<h1 id="弹幕女神"><a href="#弹幕女神" class="headerlink" title="弹幕女神"></a>弹幕女神</h1><p>20 日，5 月 20 日。2016 年 5 月 20 日下午三点半的前一分钟弹幕派在大创展上同马歆姐和 Tracy 姐在一起。因为她们，我们会记住这一分钟。从那时开始，弹幕派就和女神密不可分，这是事实，谁也改变不了，因为已经过去了。女神还会到来。</p>
<p>不久之后，弹幕派团队开始扩招。我们从两个人的小工坊变成了十个人的小团队，团队颜值更是提升百倍有余。有了女生的加入，弹幕派的程序员们写 Feature，改 BUG 自然更加给力。</p>
<p>而且<del>女生们的能力可一点儿都并不比男生差。晓丹从零开始学习，和设计师乐山积极配合，只用了两周的时间，就把我们的主页从原来浓浓的程序员风格改变得轻盈灵动起来（不信？自己去看</del>）。晓宇更是成为了团队现在的 Leader，不论讲技术、带团队还是拼颜值，一样都没有落下！</p>
<p>现在我们可以自信地说，Pie Team 是一支有技术有能力更有颜值的团队！</p>
<h1 id="产品要解决问题"><a href="#产品要解决问题" class="headerlink" title="产品要解决问题"></a>产品要解决问题</h1><p>在信息与通信工程学院毕业晚会的彩排现场，硝烟四起。只是这硝烟不为舞台效果，而是来自一位赞助商。</p>
<p>跟学院沟通确认以后，弹幕派将被用于毕业晚会的现场互动和现场抽奖，除了绑定赞助商的微信号外其余工作都已经准备就绪。直到——赞助商到达现场以后，认为我们的产品不行。因为他们和某微信墙有”公司战略级”的合作，只有那款微信墙才能达到他想要的效果。话还没着地，他就掏出电脑，开始向大家证明。</p>
<p>然后，”咦？这里的文字怎么不能修改？””弹幕派可以呀！””这个背景和你们的 PPT 风格不搭，你们赶紧给我换 PPT””但是弹幕派百搭！””我们要宣传公众号二维码这么小扫不到怎么能行！””弹幕派可以帮你随时放大置顶！”然后，就像我前面铺垫的那样，他只能气呼呼（但是又乖乖地）把公众号绑定到弹幕派上。晚会一切顺利。</p>
<p>如今，我们团队也即将引入一位产品经理，他会以更加深刻的产品思维来定位弹幕派，挖掘用户痛点，让它在竞品中脱颖而出，更精确更直接地解决在多人沟通场景中所遇到的问题。</p>
<h1 id="如果弹幕不曾有派"><a href="#如果弹幕不曾有派" class="headerlink" title="如果弹幕不曾有派"></a>如果弹幕不曾有派</h1><p>如果弹幕不曾有派，志龙就不会在大创展上坦言，虽然他的另一个项目作为明星项目被众多评委青睐，可他还是喜欢待在弹幕派的展位，和俱乐部的同学一起给往来的观众介绍弹幕派。</p>
<p>如果弹幕不曾有派，在毕业晚会上，就不会有王阳带着下一场考试的复习资料面对嘈杂的晚会一面监视着程序一面复习，也不会见证弹幕派第一次在大型晚会上的出色表现。</p>
<p>如果弹幕不曾有派，在新官网上线的那个晚上，我不会和晓宇聊到很晚，我们也不会都兴奋得像小孩子第二天要参加六一演出那样期待菁英计划终期路演，更不会听到邹欣老师引人深思的精彩点评。</p>
<p>如果弹幕不曾有派，我们也就不会相遇，这篇文章也便不复存在。</p>
<p>我们每个人都还在活着，也终会老去，也都在不断地拷问生活的意义。人人都会迷茫，也还有彷徨。我们唯独缺少了为同一个目标努力奋斗的心情，没有了从凌晨遇到一个问题变成去香山赏雪的情景，丢失了一起努力终于改变世界的一丢丢可能性。</p>
<p>但正因为我们在茫茫人海中的相遇，让弹幕终有了派。</p>
<p>我们在这条幽幽小径上如履薄冰地走下去时更会彼此珍惜，彼此支持，续写这篇令人无限遐想的故事。</p>
<p>Pie Team 边子政 写于 2016 年 9 月 1 日凌晨</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>应用</tag>
        <tag>Danmakupie</tag>
        <tag>弹幕派</tag>
      </tags>
  </entry>
  <entry>
    <title>信息论中对于定长编码和哈夫曼编码效率的比较</title>
    <url>/information_theory_huffam/</url>
    <content><![CDATA[<p>这是期末信息论课程的一次实验内容，实验进行了定长和哈夫曼码的编码和译码，同时也比较了两种编码的编码效率，比较有意思。</p>
<h1 id="实验内容："><a href="#实验内容：" class="headerlink" title="实验内容："></a>实验内容：</h1><p>掷骰子游戏，每次同时抛掷两枚骰子，将两枚骰子点数的和作为游戏的结果，重复抛掷 1000 次（视为 1000 次信源符号输出）。</p>
<p>要求：</p>
<ol>
<li>对 1000 次游戏结果进行逐符号二进制定长编码和译码。</li>
<li>对 1000 次游戏结果进行逐符号二进制变长编码和译码（Huffman 编码）</li>
<li>比较上述两种编码的效率。</li>
</ol>
<span id="more"></span>

<h1 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Theory of Information extra section</span></span><br><span class="line"><span class="comment">#Author:Jason Bian</span></span><br><span class="line"></span><br><span class="line">import random</span><br><span class="line">import math</span><br><span class="line"></span><br><span class="line"><span class="comment">#set the max_range</span></span><br><span class="line"><span class="attribute">max_range</span>=1000</span><br><span class="line"></span><br><span class="line"><span class="comment">#get random numbers with two dices</span></span><br><span class="line">dice_arr=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(0,max_range):</span><br><span class="line">	<span class="attribute">tempdice1</span>=random.randint(1,6)</span><br><span class="line">	<span class="attribute">tempdice2</span>=random.randint(1,6)</span><br><span class="line">	<span class="attribute">tempdicetotal</span>=tempdice1+tempdice2</span><br><span class="line">	dice_arr.append(tempdicetotal)</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&quot;dicrArray is &quot;</span>,dice_arr</span><br><span class="line"></span><br><span class="line"><span class="comment">#define fixed encoding code</span></span><br><span class="line">fixedEncoding_arr=&#123;2:<span class="string">&quot;0000&quot;</span>,3:<span class="string">&quot;0001&quot;</span>,4:<span class="string">&quot;0010&quot;</span>,5:<span class="string">&quot;0011&quot;</span>,6:<span class="string">&quot;0100&quot;</span>,7:<span class="string">&quot;0101&quot;</span>,8:<span class="string">&quot;0110&quot;</span>,9:<span class="string">&quot;0111&quot;</span>,10:<span class="string">&quot;1000&quot;</span>,11:<span class="string">&quot;1001&quot;</span>,12:<span class="string">&quot;1010&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#use random numbers generate fixed code</span></span><br><span class="line">fixedArray=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(dice_arr)):</span><br><span class="line">	fixedArray.append(fixedEncoding_arr[dice_arr[i]])</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&quot;fixedArray is &quot;</span>,fixedArray</span><br><span class="line">	<span class="attribute">fixedCode</span>=<span class="string">&quot;&quot;</span>.join(fixedArray)</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&quot;fixedCode is &quot;</span>,fixedCode</span><br><span class="line"></span><br><span class="line"><span class="comment">#collect char freqs</span></span><br><span class="line">freqs_arr=&#123;2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0,11:0,12:0&#125;</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(dice_arr)):</span><br><span class="line">	freqs_arr[dice_arr[i]]+=1</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&quot;fixed code freqsArray is &quot;</span>,freqs_arr</span><br><span class="line"></span><br><span class="line"><span class="comment">#calc the probability of each code</span></span><br><span class="line">prob_arr=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> freqs_arr:</span><br><span class="line">	prob_arr.append(float(freqs_arr[i])/float(max_range))</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&quot;code probability arr is &quot;</span>,prob_arr</span><br><span class="line"></span><br><span class="line"><span class="comment">#calc the information entropy</span></span><br><span class="line"><span class="attribute">informationEntropy</span>=0.0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(prob_arr)):</span><br><span class="line">	<span class="keyword">if</span> prob_arr[i]!=0:</span><br><span class="line">		<span class="attribute">informationEntropy</span>=informationEntropy-prob_arr[i]*math.log(prob_arr[i],2)</span><br><span class="line">		<span class="built_in">print</span> <span class="string">&quot;information entropy is &quot;</span>,informationEntropy</span><br><span class="line"></span><br><span class="line"><span class="comment">#print fixed code table</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;fixed Code Table:&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> freqs_arr:</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&quot;Number:%s freq:%-2d encoding: %s&quot;</span>%(i,freqs_arr[i],fixedEncoding_arr[i])</span><br><span class="line"></span><br><span class="line"><span class="comment">#calc the fixed code efficiency</span></span><br><span class="line">fixedEffic=(max_range*informationEntropy)/(4*max_range*math.log(2,2))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;fixed code efficiency is &quot;</span>,fixedEffic</span><br><span class="line"></span><br><span class="line"><span class="comment">#decode the fixed code</span></span><br><span class="line"><span class="attribute">lPos</span>=0</span><br><span class="line"><span class="attribute">rPos</span>=4</span><br><span class="line">fixedDecode=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(max_range):</span><br><span class="line">	<span class="attribute">tempCode</span>=fixedCode[lPos:rPos]</span><br><span class="line">	<span class="keyword">for</span> j <span class="keyword">in</span> fixedEncoding_arr:</span><br><span class="line">		<span class="keyword">if</span> fixedEncoding_arr[j]==tempCode:</span><br><span class="line">			fixedDecode.append(j)</span><br><span class="line">			<span class="attribute">lPos</span>=lPos+4</span><br><span class="line">			<span class="attribute">rPos</span>=rPos+4</span><br><span class="line">			<span class="built_in">print</span> <span class="string">&quot;the decode of fixed code is &quot;</span>,fixedDecode</span><br><span class="line"></span><br><span class="line"><span class="comment">#Huffman Tree-Node Type</span></span><br><span class="line">class Node:</span><br><span class="line">	def __init__(self,freq):</span><br><span class="line">		self.<span class="attribute">left</span>=None</span><br><span class="line">		self.<span class="attribute">right</span>=None</span><br><span class="line">		self.<span class="attribute">father</span>=None</span><br><span class="line">		self.<span class="attribute">freq</span>=freq</span><br><span class="line">		def isLeft(self):</span><br><span class="line">			return self.father.<span class="attribute">left</span>==self</span><br><span class="line"></span><br><span class="line"><span class="comment">#create Huffman leaf node</span></span><br><span class="line">def createNodes(freqs):</span><br><span class="line">	return [Node(freq) <span class="keyword">for</span> freq <span class="keyword">in</span> freqs]</span><br><span class="line"></span><br><span class="line"><span class="comment">#create Huffman-Tree</span></span><br><span class="line">def createHuffmanTree(nodes):</span><br><span class="line">	<span class="attribute">queue</span>=nodes[:]</span><br><span class="line">	<span class="keyword">while</span> len(queue)&gt;1:</span><br><span class="line">		queue.sort(<span class="attribute">key</span>=lambda item:item.freq)</span><br><span class="line">		<span class="attribute">node_left</span>=queue.pop(0)</span><br><span class="line">		<span class="attribute">node_right</span>=queue.pop(0)</span><br><span class="line">		<span class="attribute">node_father</span>=Node(node_left.freq+node_right.freq)</span><br><span class="line">		node_father.<span class="attribute">left</span>=node_left</span><br><span class="line">		node_father.<span class="attribute">right</span>=node_right</span><br><span class="line">		node_left.<span class="attribute">father</span>=node_father</span><br><span class="line">		node_right.<span class="attribute">father</span>=node_father</span><br><span class="line">		queue.append(node_father)</span><br><span class="line">		queue[0].<span class="attribute">father</span>=None</span><br><span class="line">		return queue[0]</span><br><span class="line"></span><br><span class="line"><span class="comment">#Huffman Encoding</span></span><br><span class="line">def huffmanEncoding(nodes,root):</span><br><span class="line">	codes=[<span class="string">&#x27;&#x27;</span>]*len(nodes)</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> range(len(nodes)):</span><br><span class="line">		<span class="attribute">node_tmp</span>=nodes[i]</span><br><span class="line">		<span class="keyword">while</span> node_tmp!=root:</span><br><span class="line">			<span class="keyword">if</span> node_tmp.isLeft():</span><br><span class="line">				codes[i]=<span class="string">&#x27;0&#x27;</span>+codes[i]</span><br><span class="line">			<span class="keyword">else</span>:</span><br><span class="line">				codes[i]=<span class="string">&#x27;1&#x27;</span>+codes[i]</span><br><span class="line">				<span class="attribute">node_tmp</span>=node_tmp.father</span><br><span class="line">				return codes</span><br><span class="line"></span><br><span class="line"><span class="comment">#generate Huffman Tree</span></span><br><span class="line"><span class="attribute">nodes</span>=createNodes(freqs_arr[i] <span class="keyword">for</span> i <span class="keyword">in</span> freqs_arr)</span><br><span class="line"><span class="attribute">root</span>=createHuffmanTree(nodes)</span><br><span class="line"><span class="attribute">HuffmanCodes</span>=huffmanEncoding(nodes,root)</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;HuffmanCodeArray is &quot;</span>,HuffmanCodes</span><br><span class="line"></span><br><span class="line"><span class="comment">#print Huffman Code Table</span></span><br><span class="line"><span class="attribute">temp_range</span>=0</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Huffman Code Table:&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> freqs_arr:</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&quot;Number:%s freq:%-2d encoding: %s&quot;</span>%(i,freqs_arr[i],HuffmanCodes[temp_range])</span><br><span class="line">	<span class="attribute">temp_range</span>=temp_range+1</span><br><span class="line"></span><br><span class="line"><span class="comment">#use random numbers generate Huffman code</span></span><br><span class="line">HuffmanArray=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(dice_arr)):</span><br><span class="line">	HuffmanArray.append(HuffmanCodes[dice_arr[i]-2])</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&quot;HuffmanArray is &quot;</span>,HuffmanArray</span><br><span class="line">	<span class="attribute">HuffmanCode</span>=<span class="string">&quot;&quot;</span>.join(HuffmanArray)</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&quot;HuffmanCode is &quot;</span>,HuffmanCode</span><br><span class="line"></span><br><span class="line"><span class="comment">#calc the Huffman average code length</span></span><br><span class="line"><span class="attribute">HuffmanAveLen</span>=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(prob_arr)):</span><br><span class="line">	<span class="attribute">HuffmanAveLen</span>=HuffmanAveLen+prob_arr[i]*len(HuffmanCodes[i])</span><br><span class="line">	<span class="built_in">print</span> <span class="string">&quot;Huffman average length is &quot;</span>,HuffmanAveLen</span><br><span class="line"></span><br><span class="line"><span class="comment">#calc the Huffman code efficiency</span></span><br><span class="line"><span class="attribute">HuffmanEffic</span>=informationEntropy/(HuffmanAveLen*math.log(2,2))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Huffman code efficiency is &quot;</span>,HuffmanEffic</span><br><span class="line"></span><br><span class="line"><span class="comment">#decode the Huffman code</span></span><br><span class="line"><span class="attribute">lPos</span>=0</span><br><span class="line"><span class="attribute">rPos</span>=0</span><br><span class="line">HuffmanDecode=[]</span><br><span class="line"><span class="keyword">while</span>(len(HuffmanDecode)&lt;max_range):</span><br><span class="line">	<span class="attribute">tempCode</span>=HuffmanCode[lPos:rPos]</span><br><span class="line">	<span class="attribute">haveHuffman</span>=0</span><br><span class="line">	<span class="keyword">while</span>(<span class="attribute">haveHuffman</span>==0):</span><br><span class="line">		<span class="attribute">rPos</span>=rPos+1</span><br><span class="line">		<span class="keyword">for</span> j <span class="keyword">in</span> range(len(HuffmanCodes)):</span><br><span class="line">			<span class="keyword">if</span> HuffmanCodes[j]==tempCode:</span><br><span class="line">				HuffmanDecode.append(j+2)</span><br><span class="line">				<span class="attribute">haveHuffman</span>=1</span><br><span class="line">				<span class="attribute">tempCode</span>=HuffmanCode[lPos:rPos]</span><br><span class="line">				<span class="attribute">lPos</span>=rPos-1</span><br><span class="line">				<span class="attribute">rPos</span>=lPos+1</span><br><span class="line">				<span class="built_in">print</span> <span class="string">&quot;the decode of Huffman code is &quot;</span>,HuffmanDecode</span><br><span class="line"></span><br><span class="line">raw_input(<span class="string">&quot;press any key to quit&quot;</span>)</span><br></pre></td></tr></table></figure>

<h1 id="用到的公式"><a href="#用到的公式" class="headerlink" title="用到的公式"></a>用到的公式</h1><p><a href="/wp-content/uploads/2016/01/%E6%97%A0%E6%A0%87%E9%A2%98.png"><img data-src="/wp-content/uploads/2016/01/%E6%97%A0%E6%A0%87%E9%A2%98-300x246.png" alt="无标题"></a></p>
]]></content>
      <categories>
        <category>大作业</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>信息论</tag>
      </tags>
  </entry>
  <entry>
    <title>离</title>
    <url>/leave/</url>
    <content><![CDATA[<h1 id="离开"><a href="#离开" class="headerlink" title="离开"></a>离开</h1><p>2016 年 2 月 26 日 23:41，戴上耳机，摘下，再戴上，切歌，闭眼，后仰，《回梦游仙》，斟酌第一段的用词，距离开家不到 24h，回忆离开。</p>
<p>假期算是从莫名其妙决定参加 MCM 开始的吧。几日的思考，建模，不断写代码逐渐让我产生了对《秦时明月》莫名的好感，所以到家之后的第一件事就是把那部动漫从头看到了尾，蓉姑娘还是没有醒来。</p>
<p>离校时自己在火车上被一位年轻的母亲让孩子叫大叔。想想可不是，这就到了奔三的年纪，不过当时也没想那么多，大睡了一觉，就到了家里，也半睡半醒半梦中写下了“太阳已经落山，我们迎来的是无边际的夜幕，跌倒盲目不知所措地等待白昼的到来”。也许这里用“我们”是不恰当的，“我”在此处更加情真意切。</p>
<p>一抹悠悠兰州从嘴边，从眼前慢慢腾起的时候，心情就像赶上了最后一片枯叶从树杈上摇曳而下。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>借着放假，重新拿起了 PHP 和 Python，写了点儿爬虫和一些应用后台，也说做就做了一回——和志鹏一起做了一个公共代码库（这样我就名正言顺地可以把他的代码直接拿来自己用了）。coding，commit，debug，coding，commit，debug，……这样的日子真心觉得得不错，我想这个假期以后可能会有怀念的地方吧。</p>
<p>代码以前也写了不少，但都没有实际的用处，而很多的时间被无聊的微信 qq 绑架，也没写出个名堂，反而造成了许多心理负担，熬不过就把代码放到一边，快活逍遥去也。之后不能再这样。十年磨一剑，我没有磨剑，只是几乎虚度了近三年。我要反省和努力了。</p>
<span id="more"></span>

<h1 id="反省"><a href="#反省" class="headerlink" title="反省"></a>反省</h1><p>三年来貌似做过许多事情，但能记住的人和事儿都不多。记忆力差是一方面，另一方面应该是没有全身心投入去做吧。之前从 kcuua 和 vliner 中没有得到太多的教训，反而造成了在一些事情上的固定的不好的模式——不够踏实，只会画饼，给别人，也给自己。一直都是在忙碌，却很少思考，当忙碌快要有结果的时候，突然累了，弃之。对，这种想法出现的时候，就是在浪费生命。</p>
<p>上学期末，我有意放下了许多之前的包袱，重新开始，至少可以专心专注，不再喜新厌旧，认真积累，做好沉淀，去掉浮躁，虚心去学，踏实去做，不再去讲大道理，做一个让自己满意的人。</p>
<p>时间走得太快，追上它。</p>
<h1 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h1><p>自去年年末买了 kindle 之后，一直心想读书却没有好好利用，书单里面的书越攒越多，却没有读过几本。</p>
<p>可以让自己内省的最佳方式就是读书。从小时候，一直想有一个专门成年累月的时间让我阅读，越长大越知道这是天方夜谭。利用碎片时间，刷朋友圈的时间，看 QQ 空间的时间去阅读，对，就这样去阅读。</p>
<p>假期开始实践，效果还好，读完了几本书，感觉就如囫囵吞枣，却也吃饱了肚子。笔记心得也只待枣儿能消化掉再来总结。我确信是可以消化掉的，因为今天和妈妈谈天的时候已经可以运用一些书中所见，但一点儿都不流畅。</p>
<h1 id="天空之城"><a href="#天空之城" class="headerlink" title="天空之城"></a>天空之城</h1><p>不知觉，已经循环了很久《天空之城》了，就以它为小标题。</p>
<p>每每听到这首曲子，我可以安静下来，静的可以听见脉搏在跳，所以我有时候也用这首曲子确认我还活着。在内心极度狂躁的时候，即使是全世界禁播这首曲子我也要翻出来听，还要去听各种版本。</p>
<p>21 岁（至少马上就是了），已经离开了弱冠走向而立。亲人们对我的好却丝毫没有减少。我察觉得到他们没有变，但我变了，承受力开始变差，或者是我更希望他们可以有一些自己可以为之痴迷沉醉的事情，而不仅仅是关心我。我不能再无尽地索取不去报答，要做事不要再做梦了。</p>
<p>朋友们很多，哥们却没几个，但是他们每个人都让我感觉到“有这个哥们，值了”。用歌儿里面的话讲，就是“也许会，有一天，世界真的有终点，也要和你举起回忆酿的甜，和你再乾一杯”。我想，如果当彗星划满半边天，我相信大家都会在身边。只是，彗星还没有来，假期却非常短，我已经开始怀念假期里每一次聊天约饭甚至是压马路的时间。</p>
<p>对于感情，我确也思考过，只是远在天空之城，我看不清。从刚上大学时候的坦率直接，到之前的迷茫谨慎以及揣摩不定，和现在的不作为。不好也很好。就像一把古琴扬起，曲高和寡，虽无人会，却也自己有兴。</p>
<p>现在去想，自己可能真的成了大叔，坐定看对面的两个女生边吃火锅边打闹，有了欣慰和轻松之感；一路爬山，聊聊无关紧要的话题，也找到了放空般轻松的状态。</p>
<h1 id="唱口香糖的那个女生"><a href="#唱口香糖的那个女生" class="headerlink" title="唱口香糖的那个女生"></a>唱口香糖的那个女生</h1><p>模糊了，我记得是这首歌儿，在她生日，也是她唱的唯一一首歌儿。</p>
<p>潇潇说的没错，现在的三中初三还几乎是当年的原班人马，除了她。</p>
<p>周二，永和源，十一点半，是她，没有变，一切都没变。她还记得当年的所有细节，用当年惊人的记忆力。</p>
<p>我也很好奇，不知都聊了些什么，却不知觉地过了一个下午。只是她不再严厉，而像一个许久未见知心的朋友似的，她知道你想的一切，关心着你的一切，你却怎么也做不到如此去关心她。她也很有精力，不像从前，而像从前的从前。</p>
<p>学生安心了。大恩不言谢，只希望您可以健康快乐地看着我们成长。</p>
<h1 id="旅行"><a href="#旅行" class="headerlink" title="旅行++"></a>旅行++</h1><p>我想去台湾，踏着《旅行的意义》。</p>
<p>当然，第一步要有存款，存款要是自己赚的。所以，我想用一年的时间，争取做到可以跨入经济独立。先用大半年的时间来沉淀自己，多学习有用的知识，准备考研，弥补本科错过的时光。等考研之后要去找实习。不论如何，都要跨出这一步。</p>
<p>还有，既然想好了以后的方向，那么就要付诸努力。看一些 coursera 上面的课程，重新定位数学在心中的地位，学好英语，学习一些大数据&amp;机器学习方面的算法，开始阅读一些相关的源码。</p>
<p>就这样，晚安。</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>《Modern PHP》——关于PHP的最佳实践和最新进展</title>
    <url>/modern_php_best_practice/</url>
    <content><![CDATA[<p><a href="/wp-content/uploads/2017/01/2498b4df325b54cb37c28e094e695d57-1.jpg"><img data-src="/wp-content/uploads/2017/01/2498b4df325b54cb37c28e094e695d57-1.jpg"></a></p>
<p>先放本中文版封面镇楼</p>
<h1 id="值得一读"><a href="#值得一读" class="headerlink" title="值得一读"></a>值得一读</h1><p>在市面上各种 PHP 21 天从入门到精通的书已经漫天飞舞的情况下，《Modern PHP》一定是一本值得一读的从国内各大论坛/网站/课堂经历过以后的 PHP 进阶书籍。</p>
<p>《Modern PHP》是由 O’Reilly 推出，作者是大名鼎鼎的 Slim 框架的开发者。这本书推出的时间很有意思——2015 年 12 月，这也是 PHP7.0 正式发布的时间，同时——也就是从那时间开始，越来越多“PHP 药丸”的言论开始大行其道。所以，我一直在使用 PHP 的时候心情非常复杂。</p>
<p>不过，我想这本书是可以为 PHP 正名的，而且不仅仅是正名——这本书介绍了一个崭新的 PHP 和一个全新的 PHP 时代。 所以本文的题目差点被我起成卫庄体——“给我两个小时，还你一个崭新的 PHP”。</p>
<span id="more"></span>

<h1 id="PHP-不是没有问题"><a href="#PHP-不是没有问题" class="headerlink" title="PHP 不是没有问题"></a>PHP 不是没有问题</h1><p>首先，由于 PHP 的历史非常曲折悠久，所以网上有许许多多的 PHP 教程，但是教程良莠不齐，有许多陈旧的实践方式，又由于 PHP 变态的向下兼容性，那些实践方式都可以完美地不加出错地运行起来，这样便造就了无数的又慢又冗余又不安全的 PHP 应用。而许多 PHP 新的有用的特性又完全没有被很好地介绍给开发者。</p>
<p>特别是，有许多新进入 Web 开发领域的人都可以是用 PHP 轻易地写出虽然很脏很烂很难维护，但是又看起来运行起来没有什么太大问题的代码（比如我）。所以 PHP 开发人员入门门槛低是 PHP 的一个优势，但随之而来的开发人员素质无法保证也是 PHP 的一个劣势。</p>
<p>再加之国内一些 PHP 培训机构或者培训视频、社区、教程（这里就点名 w3school.com.cn 吧，里面的数据库连接方式全都是 PHP5，也就是 2004 年之前使用的方式）和开发框架（这里就只点名 ThinkPHP3 系列吧）所倡导的“能用就行”的 PHP 实践方式的误导…… 这些都让国内的众多开发者人为 PHP 已经垂垂暮矣，没有前途。</p>
<h1 id="最差实践、最佳实践、最新现状"><a href="#最差实践、最佳实践、最新现状" class="headerlink" title="最差实践、最佳实践、最新现状"></a>最差实践、最佳实践、最新现状</h1><p>通过《Modern PHP》这本书的介绍，和我关于 PHP 的一些最新实践，让我看到了 PHP 的希望。</p>
<p>首先想罗列一下看起来恐怖（因为可能许多 PHP 开发者也都不知道）的 PHP 的新特性和新实践标准的名词——命名空间、接口、性状、迭代器、生成器、闭包、字节码缓存、反射、内置服务器、CLI 运行方式、PHP-FIG、PSR、组件化、PHP-FPM、XDebug、单元测试、持续测试、JIT 引擎、静态类型…… 俨然，PHP 现在已经变成了一门几乎无所不包（就像以前那样）的全新的语言。</p>
<p>说一下之前（或者说是很多教程里常见）的开发模式吧，首先用 PHP 的各种集成包在 Windows 下面搭建一个环境，如果想用框架的话就直接从官网下载框架的代码，拷贝到网站目录，然后新建一个 PHP 文件就直接开撸，磁盘的目录结构就是网站的 URL 路由，调试全靠满屏的 echo，遇到不会的东西就从百度随便搜索一个方案之后把代码拷贝进去直接去用（很多时候还和框架不兼容，所以就直接脱开框架自己开写原生代码），上线的时候打开 FTP 软件，直接把网站拷贝进去齐活。 简单，的确非常简单，而且粗暴。但是这里面藏匿着很多问题，比如文件引用、路由配置、定位 bug、单元测试、性能分析、自动化部署、版本控制、包管理与更新、性能优化、日后维护……这种各自为战的方法，也同样很不利于社区的发展。</p>
<p>而这本书里讲述了一种完全不同，甚至优雅程度不亚于现在比较流行的语言的 PHP 实践方法，这里就类比 Python 吧。</p>
<ul>
<li>使用统一的代码风格，类似于 Python 的 PyLint，PHP 有了使代码符合 PSR 规范的 PHPLint</li>
<li>优秀的包管理，类似于 pip，PHP 可以使用更加优雅的更加细化 Composer 进行包管理（而且 Composer 还有插件可以顺便充当前端的 bower 或者 nmp 包管理器）</li>
<li>统一的 autoloader，在 Composer 中自带了符合 PSR-4 规范的 autoloader，终于结束了各种 autoloader 版本的时代，而 Python 则需要在<strong>init</strong>.py 中做些手脚</li>
<li>迭代器/生成器，使用起来就和 python 的 yield 一样</li>
<li>匿名函数/闭包，就像 Python 的闭包和 lambda 表达式一样（但是闭包的作用域需要 use，不是很习惯）</li>
<li>内置服务器，就像 Django 或 Flask 一样可以直接以 CLI 的形式启动内置服务器进行测试</li>
<li>PHP-FPM，就像 uwsgi 一样是一个 fast-cgi 的托管器</li>
<li>CLI 运行方式，只要愿意，PHP 可以写出像 Python 一样好用的命令行脚本</li>
<li>版本控制，PHP 也可以使用 Git 或者 Subversion 等软件进行版本控制</li>
<li>流的概念，这里很像 C#中的 stream，可以有多级 Pipeline，也可以通过继承让不同的流支持统一的接口</li>
<li>性状的支持，这个在 Python 里似乎没见到过，比较有意思，不过 Python 可以有多继承来完成和性状类似的事情</li>
<li>Zend OPcache，完成了类似 Python 对 pyc 文件的缓存</li>
<li>Travis CI 也支持 PHP，可以完成持续测试</li>
<li>JIT 引擎——HHVM，性能提升很高，Python 也有类似的解释器（据说 PHP8 的 Zend 引擎也会加入对 JIT 的支持，拭目以待吧）</li>
<li>静态类型，Hack 和 PHP7 均支持，（可以选择声明类型 or 不声明类型），这使得 PHP 更加类似强类型语言，Python 目前应该还没有相关特性（但 Python 是强类型语言），这和 C#目前的思路有写相对应（C#可以使用 var 或 Object 做类型推断，实现一些感觉像是弱类型的功能）</li>
<li>性能提升——HHVM 和 PHP7，理论上的说，都比 CPython 快得多</li>
<li>……</li>
</ul>
<p>所以，PHP 完全可以继续作为一门可以和现代大多数语言媲美（甚至更加完善）的 Web 开发语言（甚至可以是命令行脚本开发），而且 PHP 依旧具有旺盛的生命力。</p>
<h1 id="GitHub-中一些有趣的-PHP-项目"><a href="#GitHub-中一些有趣的-PHP-项目" class="headerlink" title="GitHub 中一些有趣的 PHP 项目"></a>GitHub 中一些有趣的 PHP 项目</h1><ul>
<li>ReactPHP——PHP 版本的 NodeJS：<a href="https://github.com/reactphp/react">https://github.com/reactphp/react</a></li>
<li>Swoole——使用 C 语言拓展的 PHP 异步、并行、高性能框架：<a href="https://github.com/swoole/swoole-src">https://github.com/swoole/swoole-src</a></li>
<li>WorkerMan——一个纯 PHP 开发的高性能 Socket 框架（完全可以当做 WebServer 来使用）：<a href="https://github.com/walkor/Workerman">https://github.com/walkor/Workerman</a></li>
<li>Yaf——使用 C 语言拓展的高性能的 PHP 框架：<a href="https://github.com/laruence/yaf">https://github.com/laruence/yaf</a></li>
<li>Hprose for PHP——使用 PHP 语言开发的跨语言远程通信中间件：<a href="https://github.com/hprose/hprose-php">https://github.com/hprose/hprose-php</a>（当然不仅仅有 PHP，还有各种语言，和 Thrift 非常像）</li>
</ul>
<h1 id="放弃旧的思路，开始新的-PHP-之旅"><a href="#放弃旧的思路，开始新的-PHP-之旅" class="headerlink" title="放弃旧的思路，开始新的 PHP 之旅"></a>放弃旧的思路，开始新的 PHP 之旅</h1><p>试着使用《Modern PHP》中的最新实践，多去看看国外的 PHP 社区和一些主流的 PHP 框架的 PHP 实践方法。 如果无从下手，建议抛弃陈旧的 PHP 教程，从使用 Composer 和写符合 PSR 规范的代码开始吧！在那里，会见到一个全新的有生命力的 PHP 社区。</p>
<h1 id="一些资料"><a href="#一些资料" class="headerlink" title="一些资料"></a>一些资料</h1><ul>
<li>作者 Josh 维护的社区——PHP 之道：<a href="https://laravel-china.github.io/php-the-right-way/">https://laravel-china.github.io/php-the-right-way/</a></li>
<li>ModernPHP——豆瓣：<a href="https://book.douban.com/subject/26635862/">https://book.douban.com/subject/26635862/</a></li>
<li>ModernPHP——O’Reilly：<a href="http://shop.oreilly.com/product/0636920033868.do">http://shop.oreilly.com/product/0636920033868.do</a></li>
<li>PHP 包社区：<a href="https://packagist.org/">https://packagist.org/</a></li>
<li>PHP 官方手册：<a href="http://php.net/manual/zh/">http://php.net/manual/zh/</a></li>
<li>PHP-FIG 官网：<a href="http://www.php-fig.org/">http://www.php-fig.org/</a></li>
<li>一些流行的 PHP 框架：Laravel，Symfony，Yii，Slim</li>
<li>正版 W3School（可能需要梯子）：<a href="http://www.w3schools.com/php/">http://www.w3schools.com/php/</a></li>
<li>Laravel China 社区：<a href="https://laravel-china.org/">https://laravel-china.org/</a></li>
<li>鸟哥（PHP7 主要开发者）的博客：<a href="http://www.laruence.com/">http://www.laruence.com/</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PHP</tag>
        <tag>ModernPHP</tag>
      </tags>
  </entry>
  <entry>
    <title>一年一梦，一期一会</title>
    <url>/one_year_one_dream/</url>
    <content><![CDATA[<h1 id="生活得了失忆症"><a href="#生活得了失忆症" class="headerlink" title="生活得了失忆症"></a>生活得了失忆症</h1><p>可是只一年，记忆已经模糊得像早晨起来的世界。是不记得，还是不愿去想，不得而知。所以，开始拼接一下记忆吧。</p>
<p>思绪到了雪天，读完柏拉图，就从雁滩沿着滨河路走到了西关十字，换了新的魅族手机，再也拍不出好照片，反倒脑子中都是情绪模式有关的事情。就这样，在兰州待了几天，就回到了 884，然后又在兰州。这该是对那个寒假唯一的特殊记忆了。记不起春节，更记不起喝了几顿酒，吃过几顿饭。记不起可曾哭过，可曾笑过。</p>
<p>精疲力竭，开始翻翻微信相册帮助回忆，只见到那个情人节的状态：本身是一个值得纪念的日子，却变成了自招季红包节。问题来了：自招季如今单身狗还剩几只？不出国党还剩几个？</p>
<p>接着开学之后，剩下的事情就是一个循环：纪老师的课，微软俱乐部，家教部，还有 byr team。嗯，认识了许许多多的人，可是我记不大清，闹了许多笑话。</p>
<p>即兴剧和创客文化应该是最大的收获了吧，嗯，还有一起做大创的小伙伴们。</p>
<p>暑假很久没有回家，自学 Python，写了一些代码，去健身，完成了第一期的减肥计划。放弃了努力去做一些事儿。和轩哥谈微软去发布会，和飞哥去健身说人生，和志鹏玩帝都做规划，和光杰吃火锅讲情史，和《失控》谈未来说理想，这些还好我都没忘记。</p>
<p>放弃了，忘记了，失去了，也解脱了。 暑假被微软夏令营一劈两半，到了西安，梦中的秦川，吃了一次酒，吐了一次心，认识了一群有意思的人。也完成了一个在一年前的心愿。</p>
<h1 id="生活过得越多，就越不像真实的自己了"><a href="#生活过得越多，就越不像真实的自己了" class="headerlink" title="生活过得越多，就越不像真实的自己了"></a>生活过得越多，就越不像真实的自己了</h1><p>健身，健身，健身。减肥，减肥，减肥。不再喝酒，基本不再吃肉，爱上了淡茶。</p>
<span id="more"></span>

<p>生活一下子就被微软俱乐部包围了。从自由散漫不守规矩变成了学弟学妹口中的“政子大大”。</p>
<p>生活也自然淡了好多，除了必须做的事情，就没有其他的了。除了有一天强行把手机关掉，到电影院买了一张最早开场的电影票。</p>
<p>娱乐，嗯，就是周末闲下来去见跃跃和剑，被源儿找我聊天，以及给牛打越洋电话，还有一次和龙哥去清华听讲座。</p>
<p>“你已经做得足够好了，何必再拼？”“可是我看他们这么努力，必须要对得起他们。”“现在还不是真心付出的时候，也该为自己考虑考虑了吧。”瑞彤这样讲。无言半晌，又把 Outlook 打开，看了一下第二天要做的事情才去睡觉。</p>
<h1 id="逝者安息，生者上心"><a href="#逝者安息，生者上心" class="headerlink" title="逝者安息，生者上心"></a>逝者安息，生者上心</h1><p>意外，意外，还是意外。</p>
<p>各种声音不绝于耳，有人说导师的关心不够，有人说学生逆伤太低，有人还说学校管理无方。</p>
<p>可是，先不说动机，谈谈结果。痛心的是导师，痛心的是家长，痛心的是校方，痛心的也是每一个北邮人。帖子终于被放到了知乎上，甚至成为了热点。一篇肄业的成功校友的帖子被论坛疯传，一夜过去，有八百人加他好友。</p>
<p>于是，不如说，我们期望被别人看见，期望找到有归属感的一群人，期望得到他人的关心。</p>
<p>心理问题的确占了很大比例。但是缺少的更可能是来自校方，来自家长，来自同学，来自导师和来自自己的关怀。更缺乏关于生命，关于人性，关于终极关怀的教育与思考。我不去猜想逝者生前的状态，我只想思考一下我和我能接触到的人所处的环境。</p>
<p>还记得暑假时自觉隐隐不安，深夜发文 at 纪老。对，从大学开始到现如今，我只在他的课堂上感受到过人文主义，感受到过被台上的人关怀，感受到可以大谈理想人生的快感。</p>
<p>我们又到了提起民族责任，提起社会责任，哪怕是提及公益提和理想都会被人笑话，被认作不做实事的时代。唯一被所有人认可的就是面对现实——逐利赚钱。这是最大的悲哀。大学也不是我所想的百家争鸣，而是不好与别人说自己的想法，反正没有人会听——没有相关课程，没有相关的社团，没有表达思想的平台。</p>
<p>没有人讲过终极关怀，没有人交流过终极关怀——只知道，死了以后可以见到马克思。</p>
<p>思想多了很危险，思想工作很重要！是，稳定才是最重要的，对，安安稳稳把钱赚，开开心心把钱数。学生想了什么，与我何干？</p>
<p>于是没人知道同学脑袋中想了些什么，数万个脑袋，思想却都被封闭在自己的身体中，语言成了废物。</p>
<p>生活这么好，怎么会得抑郁症？！真的想不通？还是因为没有了沟通没有了关怀！</p>
<p>呵呵，大势不可逆。</p>
<h1 id="创新很大程度上就像在赌博，赌不劳而获"><a href="#创新很大程度上就像在赌博，赌不劳而获" class="headerlink" title="创新很大程度上就像在赌博，赌不劳而获"></a>创新很大程度上就像在赌博，赌不劳而获</h1><p>互联网浪潮终于在十二月份冷了下来，O2O 遭遇了资本寒冬。消息从 36kr 一路传来。</p>
<p>许多人义正言辞地把“创业”和“做生意”区分开来。认为创业就是高大上，可以大谈人生理想，大谈社会责任，大谈创新，然后继续在中关村当沙发客，每天只吃得起一顿西少爷。“我每天都要创新/我就喜欢这样打拼/总有一天资本会找到我的。”连国家都要把创新和创业连在一起读，索性合起来叫“双创”更好听一些？</p>
<p>所有人都在拼命空想创新的时候，也就没有了创新。总有那么些聪明人，把你想到的点子，都仔细践行过一番。有的人因此出人头地，更多的无名氏们依旧在温饱线边缘徘徊。</p>
<p>可是为什么还是那么多人，拼了命一般去做创业，涌向中关村创业大街？</p>
<p>因为曾经有人，就在那条大街上，拿到了千万投资，拿到了 ABCDEF 轮投资，登上了人生顶峰，赢取了白富美，实现了“人生理想”。理性的讲，创业成功者所得的回报和前期的付出比例高得惊人，几乎就是不劳而获。</p>
<p>所以，是不是我也想出一个新点子，新的商业模式，新的互联网思维，也可以成为他们那样？于是—— 可是——这，和赌博又有何异？冠冕堂皇的理由多是在自欺欺人，想要不劳而获罢了。</p>
<p>终究现实只成就了那少数的人，他们也成为了不少“成功学家”成功卖书演讲走向人生巅峰的必要条件。多数人呢，依旧终日在思考创新，掏空心思去想别人没有做过的事情，没有试过的模式，无事尔尔，一晃几年。</p>
<p>圣诞节和牛聊完，谈到这里，明白了许多，也是自省。</p>
<p>所以，心静下来。不问别人是不是做过，只求踏踏实实做事，并且把这个事情做成，也未尝不好。新的东西，也多是改掉旧的东西的缺点，而缺点只通过想是找不到的，是时候去多实践了。</p>
<p>所以，别再厌恶别人已经做过了，先动起手来，开始做！</p>
<h1 id="新的一年，依旧？"><a href="#新的一年，依旧？" class="headerlink" title="新的一年，依旧？"></a>新的一年，依旧？</h1><p>和牛约定，有激情地活着。</p>
<p>和自己约定，为生活而活。</p>
<p>依旧，不跟随。</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>年终总结</category>
      </categories>
      <tags>
        <tag>年终总结</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>一次貌似成功的ONOS安装经历</title>
    <url>/onos_install/</url>
    <content><![CDATA[<p>先说说之前的失败经历吧。</p>
<p>前几天我一直尝试在 64 位的 Ubuntu16.04 上进行安装，分别尝试过 ONOS 1.6 – 1.8 （因为只有 1.6 以上的版本才 Support P4 的 bmv2）这三个版本，经过漫长的编译过程，均编译成功（除了偶尔因为万里长城链接超时），但是在运行的时候总是会提示出错，错误信息大概分为以下两种：</p>
<ol>
<li> 在使用 ok clean 命令启动的时候出现 “ No adapter with IP 127.0.0.1 found! ”，然后。。无法启动。</li>
<li> 在使用 Web GUI 登陆成功以后提示“ ONOS GUI not ready yet… please stand by… ”字样。。然后。。就没有然后了。</li>
</ol>
<p>在束手无策的时候，准备换一个环境重新尝试一下，于是使用 vmware 创建了一个 Ubuntu14.04 的虚拟机，然后发现一切顺利。</p>
<p>主要的安装步骤可以参考：<a href="https://wiki.onosproject.org/display/ONOS/Installing+and+Running+ONOS">https://wiki.onosproject.org/display/ONOS/Installing+and+Running+ONOS</a></p>
<p>除了，不必去 Packaging ONOS tar.gz or zip distributions 和 export ONOS_IP 。</p>
<p>所以。。问题的解决方案是：系统版本一定要选对。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>SDN</category>
      </categories>
      <tags>
        <tag>ONOS</tag>
        <tag>SDN</tag>
      </tags>
  </entry>
  <entry>
    <title>P4相关应用简介</title>
    <url>/p4_applications/</url>
    <content><![CDATA[<h1 id="INT"><a href="#INT" class="headerlink" title="INT"></a>INT</h1><p>In-band Network Telemetry</p>
<h2 id="Specification"><a href="#Specification" class="headerlink" title="Specification"></a>Specification</h2><p><a href="http://p4.org/wp-content/uploads/fixed/INT/INT-current-spec.pdf">http://p4.org/wp-content/uploads/fixed/INT/INT-current-spec.pdf</a></p>
<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>INT 是一种用来在数据平面上采集和报告网络状态的框架，它不需要控制平面的任何干预或支持。在 INT 的模型里，设备发出的数据包会包含“遥测”的报头字段。这些字段会告诉兼容 INT 的设备在需要转发包的时候需要收集哪些信息，并将其写入包中。</p>
<p>INT 流量源（比如应用程序，端主机网络栈，NIC，虚拟管理程序或者发送 ToR）等可以将指令嵌入在正常的数据包或者特殊的探测包中。类似地，INT 流量接收器可以取到（并有选择地报告）这些指令所收集到的结果。INT 流量收集器可以在转发的同时精确地利用从数据包里观察到的信息来监视数据平面的状态。</p>
<h2 id="举例说明可以收集并处理的信息"><a href="#举例说明可以收集并处理的信息" class="headerlink" title="举例说明可以收集并处理的信息"></a>举例说明可以收集并处理的信息</h2><ul>
<li>OAM：可以只简单地将收集到的网络状态编码（可以使用元数据，或者进行简单的清洗或压缩），并且将其发送给额外的控制器。</li>
<li>实时控制或者反馈环路：INT 流量接收器可以编码数据平面的信息并将控制信息反馈给流量源，流量源可以利用这些数据调整流量工程或者数据包的转发（比如进行显式的拥塞控制）。</li>
<li>网络事件探测：如果收集到的路径信息表明需要立即注意或解决的状况（比如严重的拥塞或者数据平面被破坏，INT 流量接收器可以立刻报告一个网络事件，在集中式或者分布式的网络中形成一个控制回路）。</li>
</ul>
<span id="more"></span>

<h2 id="INT-体系结构式通用的，因此可以支持一些有趣的高层应用"><a href="#INT-体系结构式通用的，因此可以支持一些有趣的高层应用" class="headerlink" title="INT 体系结构式通用的，因此可以支持一些有趣的高层应用"></a>INT 体系结构式通用的，因此可以支持一些有趣的高层应用</h2><p>比如：</p>
<ul>
<li>网络故障排除：L2 跟踪路由、微突发事件探测、数据包历史、轨迹采样</li>
<li>高级拥塞控制：RCP、XCP、TIMELY</li>
<li>高级路由：利用率感知路由（例如：CONGA）</li>
<li>网络数据平面验证</li>
</ul>
<h2 id="可以监控的范围"><a href="#可以监控的范围" class="headerlink" title="可以监控的范围"></a>可以监控的范围</h2><ul>
<li>交换机级别的信息：交换机 ID</li>
<li>入口信息：入口 ID，包进入时间</li>
<li>出口信息：出口 ID，单跳延迟，出口链路利用率</li>
<li>缓存信息：队列使用率，队列拥塞状态</li>
</ul>
<h2 id="INT-包封装"><a href="#INT-包封装" class="headerlink" title="INT 包封装"></a>INT 包封装</h2><p>INT 头不在特定位置封装，INT 报头可以作为任何包的选项或者有效载荷插入其中，唯一的要求是有足够的空间承载 INT 信息，并且 INT 的源和接收器需要达成一致。</p>
<p>一些可能的位置：</p>
<ul>
<li>INT over VXLAN（作为一个 VXLAN 的选项，每个 GPE 扩展）</li>
<li>INT over Geneve（作为一个 Geneve 选项）</li>
<li>INT over NSH（作为一个 NSH 选项）</li>
<li>INT over TCP（作为一个 TCP 选项或者载荷）</li>
<li>INT over UDP（作为一个载荷）</li>
</ul>
<h2 id="INT-元数据头格式"><a href="#INT-元数据头格式" class="headerlink" title="INT 元数据头格式"></a>INT 元数据头格式</h2><p><a href="/wp-content/uploads/2017/04/e56578017ef126783d76dcbc0cb9e0e3.png"><img data-src="/wp-content/uploads/2017/04/e56578017ef126783d76dcbc0cb9e0e3.png"></a></p>
<ul>
<li>每一个 INT 元数据头长度为 8B，每个元数据经常被以 4B 长度编码。</li>
<li>INT 指令被编码在一个 16bit 的指令区域，包括：Switch ID, Ingress Port ID, Hop latency, Queue occupancy, Ingress timestamp, Egress port ID, Queue congestion status, Egress port TX utilization</li>
<li>沿着支持 INT 的路径，每个 INT 设备都会根据报头的指令添加自己的元数据值。</li>
<li>添加元数据的时候，每个设备都必须在已经被上游设备添加的元数据之前添加信息，遇到不能添加或者其他问题，会有一些错误处理的机制。每个元数据都包含栈底比特确认是否为最后一个元素。</li>
</ul>
<h2 id="一个在-Geneve-选项中添加-INT-包的例子（示意图）"><a href="#一个在-Geneve-选项中添加-INT-包的例子（示意图）" class="headerlink" title="一个在 Geneve 选项中添加 INT 包的例子（示意图）"></a>一个在 Geneve 选项中添加 INT 包的例子（示意图）</h2><p><a href="/wp-content/uploads/2017/04/558cb7565278c11c41684b471445ff52.png"><img data-src="/wp-content/uploads/2017/04/558cb7565278c11c41684b471445ff52.png"></a></p>
<h1 id="HULA"><a href="#HULA" class="headerlink" title="HULA"></a>HULA</h1><p>Hop-by-hop Utilization-aware Load Balancing Architecture</p>
<h2 id="Specification-1"><a href="#Specification-1" class="headerlink" title="Specification"></a>Specification</h2><p>Scalable Load Balancing Using Programmable Data Planes</p>
<p><a href="http://delivery.acm.org/10.1145/2900000/2890968/a10-katta.pdf">http://delivery.acm.org/10.1145/2900000/2890968/a10-katta.pdf</a></p>
<h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p>现在的数据中心网络有多路拓扑（如 Fat-Tree 和 Leaf-Spine）来提供大的平分带宽。这些拓扑都有大量的多路径，在两个终结点之间有许多路由。有效的数据平面多路流量均衡是有效利用带宽资源的一个重点。最常用的数据平面负载均衡的技术是 ECMP，它将每个流都随机分割给一个或多个路径。但是如果两个比较大的流量被分配给同一个路径的话，ECMP 的性能将会下降。CONGA 使用链路利用率信息，克服了 ECMP 的不足。但是 CONGA 是利用硬件进行流量均衡的，一旦部署算法将不能更改，而且设备内存有限，CONGA 并不能跟踪所有拓扑的信息，所以这阻碍了 CONGA 的拓展性。</p>
<p>HULA 比 CONGA 更加灵活，首先 HULA 只需要下一跳的信息，并且 HULA 是为可编程交换机所设计的。</p>
<p>HULA 使用特殊的探针（与数据包有所区分）来聚合整体的链路利用率信息。这些探针周期性地在网络中传输，并且覆盖了所有要进行负载均衡的路径。这些信息被处理并存放在每个交换机的一个表中。这个表给出了通往目的地的最佳下一跳目标。随后，每个交换机利用它所掌握的最佳的下游路径（最佳路径是所有路径的最大链路延迟中最小的那一个）来更新探针，并且发送给上游路由。这就像<strong>距离向量协议</strong>那样使得最佳路径在整个网络中传播。为了避免数据包乱序，HULA 使用 flowlet 作为均衡的粒度。</p>
<h2 id="HULA-的特性：可伸缩，主动式，自适应、可编程"><a href="#HULA-的特性：可伸缩，主动式，自适应、可编程" class="headerlink" title="HULA 的特性：可伸缩，主动式，自适应、可编程"></a>HULA 的特性：可伸缩，主动式，自适应、可编程</h2><p><a href="/wp-content/uploads/2017/04/59a740260228b99943d1c44bedddaba1.png"><img data-src="/wp-content/uploads/2017/04/59a740260228b99943d1c44bedddaba1.png"></a></p>
<h2 id="简单细节"><a href="#简单细节" class="headerlink" title="简单细节"></a>简单细节</h2><p>每一个 ToR 在所有的上传链路中给数据中心网络发送 HULA 探针。探针可以被 ToR 的 CPU、交换机的数据平面或者连接到 ToR 的服务器发送。这些探针被定时周期发送，一旦收到探针，它将会被转发到下游的所有 ToR 和上游所有的 Spine 中，但保证不会形成环路。一旦探针到了另一端的 ToR，它的转发将会结束。控制平面会在数据平面设置多播组来使得这些探针可以被复制。</p>
<p>一个 HULA 探针包包含了一个 HULA 头和正常的以太网头以及 IP 头。HULA 头包含 torID 和 minUtil 两个字段。每个交换机为每个端口维持一个利用率估计值。一个交换机在将探针转发给其他交换机之前使用探针头和自身的链路利用率信息升级交换机的状态。</p>
<p>每个交换机维持一个最佳利用率的表和一个最佳下一跳表。这两个表都使用 Tor ID 进行索引。最佳利用率（pathUtil）表的每一行给出了从这个交换机到目的地 ToR 的最佳路径的链路利用率信息。最佳下一跳（bestHop）表的每一行是在最佳利用率表中到达目的 ToR 可以有最佳链路利用的下一跳交换机。</p>
<p>在计算最小的最大链路利用率的时候用了类似距离向量算法的流程。</p>
<p>交换机会保持现在的最佳下一跳表并在携带有使得其更新为更好的下一跳的探针到达时更新它。</p>
<h2 id="HULA-在高负载时的表现"><a href="#HULA-在高负载时的表现" class="headerlink" title="HULA 在高负载时的表现"></a>HULA 在高负载时的表现<a href="/wp-content/uploads/2017/04/2dd159f7a72ba79cd272a31b605a4156.png"><img data-src="/wp-content/uploads/2017/04/2dd159f7a72ba79cd272a31b605a4156.png"></a></h2>]]></content>
      <categories>
        <category>技术</category>
        <category>P4</category>
      </categories>
      <tags>
        <tag>HULA</tag>
        <tag>INT</tag>
        <tag>P4</tag>
      </tags>
  </entry>
  <entry>
    <title>使用BCC提供的转换器将P4转换为eBPF的流程分析</title>
    <url>/p4_bcc_to_ebpf/</url>
    <content><![CDATA[<h1 id="BPF、eBPF-和-IO-Visor"><a href="#BPF、eBPF-和-IO-Visor" class="headerlink" title="BPF、eBPF 和 IO Visor"></a>BPF、eBPF 和 IO Visor</h1><p>BPF(BerkeleyPacketFilter，伯克利数据包过滤器）允许在内核态下丢弃那些不需要的数据包，从而避免所有包都从内核态拷贝到用户态的网络监控工具而提升性能(也可采用 LIBPCAP 函数库实现过滤与捕捉）。</p>
<p>Linux 3.15 开始引入 eBPF。其扩充了 BPF 的功能，丰富了指令集。到了 eBPF 后，虚拟机的功能并都更加强大，使得我们对数据包的操作都可以在内核灵活地实现，完全不需要加载重新编译，而且可以在线替换等，灵活性大大增加。数据平面也就变得更加灵活（可以随时改变对每个数据包的处理行为）。且在内核中完成该功能使得性能大大提高（避免从内核到用户态的拷贝）。</p>
<p>IO Visor 的基本思路是使用一种灵活的方式在内核实现对网络数据包的处理，而不需要像传统的方法那样通过加载内核模块的方式来实现、或者通过繁重的系统调用在用户态计算。从而实现一个灵活的数据平面，加速 NFV。</p>
<p>具体说明可以参考：</p>
<ul>
<li>IO Visor 仓库对于 eBpf 的介绍：<a href="https://github.com/iovisor/bpf-docs/blob/master/eBPF.md">https://github.com/iovisor/bpf-docs/blob/master/eBPF.md</a></li>
<li>IO Visor 官方网站：<a href="https://www.iovisor.org/technology/ebpf">https://www.iovisor.org/technology/ebpf</a></li>
<li>Linux Kernel 说明文档：<a href="https://www.kernel.org/doc/Documentation/networking/filter.txt">https://www.kernel.org/doc/Documentation/networking/filter.txt</a></li>
</ul>
<p>所以，如果可以将 P4 代码转为 eBPF 的代码，那么它将可以直接在 Linux 中以原生的方式运行。可以认为 eBPF 能够作为类似 Behavior Model 的 P4 后端。</p>
<span id="more"></span>

<h1 id="P4-转-eBPF-编译器"><a href="#P4-转-eBPF-编译器" class="headerlink" title="P4 转 eBPF 编译器"></a>P4 转 eBPF 编译器</h1><h2 id="转换器"><a href="#转换器" class="headerlink" title="转换器"></a>转换器</h2><p>仓库地址：<a href="https://github.com/iovisor/bcc/tree/master/src/cc/frontends/p4">https://github.com/iovisor/bcc/tree/master/src/cc/frontends/p4</a></p>
<p>它的目的是将 P4 转换为 C 语言描述的 eBPF 代码片段，然后使用 BCC 工具来将 C 语言代码转换为 eBPF 代码，然后在 Kernel 中运行。</p>
<h2 id="依赖——P4-hlir"><a href="#依赖——P4-hlir" class="headerlink" title="依赖——P4-hlir"></a>依赖——P4-hlir</h2><p>仓库地址：<a href="https://github.com/p4lang/p4-hlir">https://github.com/p4lang/p4-hlir</a></p>
<p>HLIR：high­level intermediate representation 它可以将 P4 语言编译为 P4 的前端中间语言，转换器需要依赖此中间语言。</p>
<h2 id="运行环境——BCC"><a href="#运行环境——BCC" class="headerlink" title="运行环境——BCC"></a>运行环境——BCC</h2><p>仓库地址：<a href="https://github.com/iovisor/bcc">https://github.com/iovisor/bcc</a></p>
<p>使用 BCC 的库可以直接载入转换器转换后的 C 语言，并切转换为 eBPF 并运行。</p>
<h1 id="编译器代码分析"><a href="#编译器代码分析" class="headerlink" title="编译器代码分析"></a>编译器代码分析</h1><h2 id="文件结构（大致说明）"><a href="#文件结构（大致说明）" class="headerlink" title="文件结构（大致说明）"></a>文件结构（大致说明）</h2><table>
<thead>
<tr>
<th>Name</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>compilationException.py</td>
<td>异常处理</td>
</tr>
<tr>
<td>ebpfAction.py</td>
<td>action 相关</td>
</tr>
<tr>
<td>ebpfConditional.py</td>
<td>状态和跳转（if）相关</td>
</tr>
<tr>
<td>ebpfCounter.py</td>
<td>计数器相关</td>
</tr>
<tr>
<td>ebpfDeparser.py</td>
<td>Deparser 相关</td>
</tr>
<tr>
<td>ebpfInstance.py</td>
<td>对 Header、Metadata 和 HeaderStack 的声明</td>
</tr>
<tr>
<td>ebpfParser.py</td>
<td>和 Parser 相关</td>
</tr>
<tr>
<td>ebpfProgram.py</td>
<td>关键控制代码，从经过 hlir parser 以后的中取出相关元素，生成对应的类，并且还可控制代码的翻译过程</td>
</tr>
<tr>
<td>ebpfScalarType.py</td>
<td>将 P4 的字段长度映射到 C</td>
</tr>
<tr>
<td>ebpfStructType.py</td>
<td>和 Header 类型和 Struct 类型相关</td>
</tr>
<tr>
<td>ebpfTable.py</td>
<td>和 match_field 流表相关</td>
</tr>
<tr>
<td>ebpfType.py</td>
<td>转换成 C 语言类型的基类</td>
</tr>
<tr>
<td>p4toEbpf.py</td>
<td>命令行输入/调用 HLIR 和 ebpfProgram 解析 P4 代码，并生成 C 语言结构，最后输出</td>
</tr>
<tr>
<td>programSerializer.py</td>
<td>生成 C 语言代码的序列化工具</td>
</tr>
<tr>
<td>README.txt</td>
<td>项目介绍</td>
</tr>
<tr>
<td>target.py</td>
<td>配置和头文件相关</td>
</tr>
<tr>
<td>topoSorting.py</td>
<td>拓扑排序（这里不太明白）</td>
</tr>
<tr>
<td>typeFactory.py</td>
<td>header 类型表</td>
</tr>
</tbody></table>
<h2 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h2><p>总流程 <a href="/wp-content/uploads/2017/03/p42cWorkFlow.png"><img data-src="/wp-content/uploads/2017/03/p42cWorkFlow.png"></a><br>构建 eBPF 实例的准备流程</p>
<p><a href="/wp-content/uploads/2017/03/p4toEbpfWorkFlow2.png"><img data-src="/wp-content/uploads/2017/03/p4toEbpfWorkFlow2.png"></a><br>转换为 C 语言序列化的流程</p>
<p><a href="/wp-content/uploads/2017/03/p4toEbpfWorkFlow3.png"><img data-src="/wp-content/uploads/2017/03/p4toEbpfWorkFlow3.png"></a>测试用例运行流程</p>
<p>可以使用转换器目录下的 test/endToEndTest.py 来测试示例代码</p>
<p><a href="/wp-content/uploads/2017/03/ebpfC-TEST.png"><img data-src="/wp-content/uploads/2017/03/ebpfC-TEST.png"></a></p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><blockquote>
<p>了解 IO Visor 的技术基石 BPF 与 eBPF：<a href="http://blog.csdn.net/quqi99/article/details/49820419">http://blog.csdn.net/quqi99/article/details/49820419</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
        <category>P4</category>
      </categories>
      <tags>
        <tag>P4</tag>
        <tag>BCC</tag>
        <tag>eBPF</tag>
      </tags>
  </entry>
  <entry>
    <title>P4语言环境快速安装配置</title>
    <url>/p4_envirnoment_establish/</url>
    <content><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>观察发现，网上有关于 P4 环境的搭建都是在 Ubuntu 中进行的，所以我这次也准备从众，使用 Ubuntu 系统对 P4 语言的环境进行安装配置。 本来是准备在之前安好 Ubuntu 的 ChromeBook 中进行这次实验，但是由于最近国内长城城墙突然变高，GitHub 连接速度非常慢，而且容易超时，所以我在这里开了一台国际版 azure 虚拟机作为实验之用，如果是在国内使用，推荐挂载 VPN 或者 SS 之类的 socket5 代理进行操作。 我选择了 Ubuntu14.04 作为安装的系统环境。在安装之前，需要先下载 P4 的源码，这里直接使用 p4factory，而不是去分别安装每一个模块。</p>
<h1 id="下载-P4factory"><a href="#下载-P4factory" class="headerlink" title="下载 P4factory"></a>下载 P4factory</h1><p>p4factory 的 Github 地址：<a href="https://github.com/p4lang/p4factory">https://github.com/p4lang/p4factory</a> 在 Ubuntu 中直接使用 git 工具 clone 仓库即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> ~/p4</span><br><span class="line"><span class="built_in">cd</span> ~/p4</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/p4lang/p4factory.git</span><br><span class="line"><span class="built_in">cd</span> p4factory</span><br></pre></td></tr></table></figure>

<h1 id="安装-升级依赖模块"><a href="#安装-升级依赖模块" class="headerlink" title="安装/升级依赖模块"></a>安装/升级依赖模块</h1><p>p4 运行环境需要依赖许多其他 github 上的模块，在官方的 Readme 中，推荐使用 git submodule update 将子模块升级到最新版，但是在升级某些项目的时候会被 github 禁止。解决的方法很简单，生成 SSH key，并且添加到 Github 中即可。</p>
<span id="more"></span>

<h2 id="生成-SSH-key"><a href="#生成-SSH-key" class="headerlink" title="生成 SSH key"></a>生成 SSH key</h2><p>设置 git 的 username 和 password：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.name</span> <span class="string">&quot;JasonBian&quot;</span></span><br><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.email</span> <span class="string">&quot;Jason@xxx.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>进入目录查看是否已经有 ssh key</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure>

<p>如果有的话就备份一下然后删除，没有的话就不用去管。 接着就是生成 ssh key</p>
<figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">ssh-keygen -<span class="built_in">t</span> rsa -C <span class="string">&quot;jason@xxx.com&quot;</span></span><br></pre></td></tr></table></figure>

<p>连续按三次回车，生成成功！然后可以在.ssh 目录看见两个文件：<code>id_rsa</code> 和 <code>id_rsa.pub</code>，其中 <code>id_rsa</code> 是私钥，由自己保存，<code>id_rsa.pub</code> 是公钥，需要放在 Github 中去。 然后，把 <code>id_rsa.pub</code> 中的内容拷贝到 Github 中： 登陆 Github，点击头像进入 Settings，找到 SSH and GPG keys，点击 new SSH key，随便起一个 title，然后</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> id_rsa.pub</span><br></pre></td></tr></table></figure>

<p>将输出内容复制到 key 的输入框中 Add 即可（此时 github 需要你再次输入密码，并且添加成功之后会有邮件通知）。 最后，测试一下有没有安装成功~</p>
<figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">$ssh git@github.com</span><br><span class="line">The authenticity <span class="keyword">of</span> host <span class="comment">&#x27;github.com (192.30.253.113)&#x27; can&#x27;t be established.</span></span><br><span class="line">RSA <span class="keyword">key</span> fingerprint <span class="built_in">is</span> <span class="number">16</span>:<span class="number">27</span>:ac:a5:<span class="number">76</span>:<span class="number">28</span>:<span class="number">2</span>d:<span class="number">36</span>:<span class="number">63</span>:<span class="number">1</span>b:<span class="number">56</span>:<span class="number">4</span>d:eb:df:a6:<span class="number">48</span>.</span><br><span class="line">Are you sure you want <span class="keyword">to</span> <span class="keyword">continue</span> connecting (yes/no)? yes</span><br><span class="line"><span class="symbol">Warning:</span> Permanently added <span class="comment">&#x27;github.com,192.30.253.113&#x27; (RSA) to the list of known hosts.</span></span><br><span class="line">PTY allocation request failed <span class="keyword">on</span> channel <span class="number">0</span></span><br><span class="line">Hi imaginezz! You<span class="comment">&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span></span><br><span class="line">Connection <span class="keyword">to</span> github.com closed.</span><br></pre></td></tr></table></figure>

<p>出现上述提示说明已经安装成功。另外，也可以看见 github 中刚刚添加的 sshkey 变成了绿色。</p>
<h2 id="继续升级依赖模块"><a href="#继续升级依赖模块" class="headerlink" title="继续升级依赖模块"></a>继续升级依赖模块</h2><p>添加完 ssh key 以后，就可以放心升级依赖模块啦。</p>
<figure class="highlight jboss-cli"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> ~<span class="string">/p4/p4factory</span></span><br><span class="line">git submodule update <span class="params">--init</span> <span class="params">--recursive</span></span><br></pre></td></tr></table></figure>

<h1 id="安装环境依赖"><a href="#安装环境依赖" class="headerlink" title="安装环境依赖"></a>安装环境依赖</h1><p>p4 的源码非常复杂，主要由 python 和 c++开发，所以环境依赖就更是复杂。好在官方提供了 <code>install_deps.sh</code> 脚本，可以一键安装所有的环境依赖。执行方式很简单：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./install_deps.sh</span><br></pre></td></tr></table></figure>

<p>接下来，脚本就会自动使用 apt 和 pip 安装所需要的依赖包，并且也会对一些依赖包进行编译安装。这个时间可以刚好去泡一壶茶。</p>
<p>不过我在安装 thrif 的时候出现了编译错误，大体上错误提示是：thrift ‘SSLv3_method’ was not declared in this scope。我 Google 了一下，发现了一些解决方法。具体可以参考 Github 中这个 issue：<a href="https://github.com/ptrkrysik/gr-gsm/issues/155">https://github.com/ptrkrysik/gr-gsm/issues/155</a>。</p>
<p>放在现在的环境中，在出现错误退出以后，会多一个 install_temp 的目录，先别急着删除，进入 thrift 的文件中</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sudo</span> vim install_tmp/thrift-<span class="number">0</span>.<span class="number">9</span>.<span class="number">2</span>/lib/cpp/src/thrift/transport/TSSLSocket.cpp</span><br></pre></td></tr></table></figure>

<p>搜索</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">ctx_</span> = <span class="function"><span class="title">SSL_CTX_new</span>(<span class="title">SSLv3_method</span>())</span></span><br></pre></td></tr></table></figure>

<p>并改为</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="variable">ctx_</span> = <span class="function"><span class="title">SSL_CTX_new</span>(<span class="title">SSLv23_method</span>())</span></span><br></pre></td></tr></table></figure>

<p>然后退回 p4factory 文件夹，修改 install_deps.sh 文件。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">cd</span> -</span><br><span class="line">sudo <span class="keyword">vim</span> install_deps.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure>

<p>做如下修改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">69 行</span><br><span class="line"><span class="built_in">mkdir</span> install_tmp</span><br><span class="line">修改为</span><br><span class="line"><span class="comment">#mkdir install_tmp</span></span><br><span class="line"></span><br><span class="line">76 行</span><br><span class="line"><span class="built_in">cd</span> <span class="built_in">test</span>/cpp ;<span class="built_in">ln</span> -s . .libs ; <span class="built_in">cd</span> ../..</span><br><span class="line">修改为</span><br><span class="line"><span class="built_in">test</span>/cpp ;</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#ln -s . .libs ;</span></span><br><span class="line"><span class="built_in">cd</span> ../..</span><br></pre></td></tr></table></figure>

<p>然后执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./install_deps.sh</span><br></pre></td></tr></table></figure>

<p>重新安装环境依赖，这时候应该就可以正常跑完了。</p>
<p>最后，安装 veth（虚拟以太网）接口</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo .<span class="regexp">/tools/</span>veth_setup.sh</span><br></pre></td></tr></table></figure>

<h1 id="进行编译"><a href="#进行编译" class="headerlink" title="进行编译"></a>进行编译</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ./autogen.sh</span><br><span class="line">sudo ./configure</span><br></pre></td></tr></table></figure>

<p>编译过程没出现什么问题，现在应该已经可以正常使用整个环境了。</p>
<h1 id="测试-basic-routing"><a href="#测试-basic-routing" class="headerlink" title="测试 basic_routing"></a>测试 basic_routing</h1><p>安装完成以后可以跑一段官方 demo 验证是否可以跑起来。跟着文档走，选择测试 basic_routing。 首先对 P4 工程进行编译，然后运行 bm</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> p4factory/targets/basic_routing/</span><br><span class="line">sudo make bm</span><br><span class="line">sudo ./behavioral-model</span><br></pre></td></tr></table></figure>

<p>紧接着，打开另一个终端，进入 basic_routing 文件夹</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/p4/p4factory/targets/basic_routing/</span><br><span class="line">sudo python run_tests.py --test-dir tests/ptf-tests/</span><br></pre></td></tr></table></figure>

<p>当测试代码运行完成以后，可以看见之前启动 bm 的终端已经显示了在发包时候的具体操作，说明 P4 已经可以正常运行了。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>P4</category>
      </categories>
      <tags>
        <tag>SDN</tag>
        <tag>P4</tag>
      </tags>
  </entry>
  <entry>
    <title>来聊聊P4的GitHub仓库吧</title>
    <url>/p4_github_resp/</url>
    <content><![CDATA[<p>GitHub 中 P4 仓库的地址：<a href="https://github.com/p4lang/">https://github.com/p4lang/</a></p>
<h1 id="P4-语言编译-转换流程"><a href="#P4-语言编译-转换流程" class="headerlink" title="P4 语言编译/转换流程"></a>P4 语言编译/转换流程</h1><p><a href="/wp-content/uploads/2017/01/p4%E6%B5%81%E7%A8%8B.png"><img data-src="/wp-content/uploads/2017/01/p4%E6%B5%81%E7%A8%8B.png"></a></p>
<h1 id="每个仓库的功用和说明"><a href="#每个仓库的功用和说明" class="headerlink" title="每个仓库的功用和说明"></a>每个仓库的功用和说明</h1><span id="more"></span>

<table>
<thead>
<tr>
<th>仓库名称</th>
<th>仓库介绍</th>
<th>具体说明</th>
<th>是否可用</th>
</tr>
</thead>
<tbody><tr>
<td>Behavior-model(BMV2)</td>
<td>Rewrite of the behavioral model as a C++ project without auto-generated code (except for the PD interface)新的 Behavior-model，用于替换之前的 p4c-behavioral，是一个新的 P4 运行时环境。</td>
<td>需要使用 p4c-bm 工具把 P4 代码转换成一个表示成软交换的 json 文件</td>
<td>可以正常使用</td>
</tr>
<tr>
<td>p4c</td>
<td>P4_16 prototype compiler</td>
<td>解耦了前端编译和后端编译，均用统一的 IR 表示，前端针对 P4_14 和 P4_16 均可，后端可以编译为 bmv2 的 json 配置和 ebpf 的 cpp 代码</td>
<td>还在试验阶段，不过已经可用</td>
</tr>
<tr>
<td>p4factory</td>
<td>Compile P4 and run the P4 behavioral simulator</td>
<td>集合了 P4 的各种工具，可以直接让 P4 代码跑起来，在 target 文件夹中有许多 p4-14 的例子，并没有和 P4-16 工程同步更新</td>
<td>大体上可以跑起来，但是由于很久都没有更新，所以关于 docker-image 和 INT 应用的代码都已经 broken，目前有修复的迹象（INT 貌似已经修复）</td>
</tr>
<tr>
<td>p4c-bm</td>
<td>Generates the JSON configuration for the behavioral-model (bmv2), as well as the C/C++ PD code</td>
<td>为 bmv2 运行时环境生成 json 配置文件，（pd c++ code 应该是 protocol dependence cpp code）</td>
<td>可以正常使用</td>
</tr>
<tr>
<td>p4-hlir</td>
<td></td>
<td>P4 的前端编译器，应该是针对于把 P4 代码转换成其他语言使用的（而且应该是针对于 P4-14，因为 P4-16 已经将前端编译器放置于 p4c 的库中），使用 bcc 可以将 P4 解释为 ebpf（和中间的 c 语言表示）</td>
<td>可以正常使用</td>
</tr>
<tr>
<td>ptf</td>
<td>Packet Test Framework</td>
<td></td>
<td></td>
</tr>
<tr>
<td>papers</td>
<td>Repository for papers related to P4</td>
<td>关于 P4 的一些文档和论文</td>
<td></td>
</tr>
<tr>
<td>switch</td>
<td>Consolidated switch repo (API, SAI and Nettlink)</td>
<td>包含了 SAI 和 switchAPI 的 P4 比较完整的 switch 示例（switch.p4），使用 bmv2，支持 INT，支持 SAI</td>
<td>安装 thrift 的时候出现问题，没有运行成功，但理论上可以运行</td>
</tr>
<tr>
<td>ntf</td>
<td>Network Test Framework</td>
<td>基于 mininet</td>
<td>还没有使用过</td>
</tr>
<tr>
<td>SAI</td>
<td>Switch Abstraction Interface</td>
<td>forked from opencomputeproject/SAI</td>
<td></td>
</tr>
<tr>
<td>p4-build</td>
<td>Infrastructure needed to generate, build and install the PD library for a given P4 program</td>
<td>为 P4 代码生成 PD 库（protocol dependence）</td>
<td>很久没更新了，但是目前可使用</td>
</tr>
<tr>
<td>p4ofagent</td>
<td>Openflow agent on a P4 dataplane</td>
<td>openflow 控制器和 P4 运行时的中间翻译器</td>
<td>很久没更新了，还没使用过</td>
</tr>
<tr>
<td>tutorials</td>
<td>P4 language tutorials</td>
<td>一些会议或者活动的论文和示例，比如 P4workshop 和 SIGCOMM</td>
<td>可用，应该去看看</td>
</tr>
<tr>
<td>p4c-behavioral</td>
<td>P4 compiler for the behavioral model</td>
<td>将 P4 代码编译成可以运行的代码，已经被 bmv2 代替</td>
<td>很久很久没更新了，更没有用过</td>
</tr>
<tr>
<td>scapy-vxlan</td>
<td>A scapy clone, with support for additional packet headers</td>
<td>使得 scapy 支持 vxlan 协议</td>
<td>可用</td>
</tr>
<tr>
<td>thrift</td>
<td>Mirror of Apache Thrift</td>
<td>thrift 的镜像</td>
<td>可用</td>
</tr>
<tr>
<td>mininet</td>
<td>Emulator for rapid prototyping of Software Defined Networks <a href="http://mininet.org/">http://mininet.org</a></td>
<td>mininet 的镜像</td>
<td>可用</td>
</tr>
<tr>
<td>PI</td>
<td>P4 PI headers and target-independent code</td>
<td></td>
<td></td>
</tr>
<tr>
<td>提供一个 CLI 下给 bmv2 提供流表得接口</td>
<td>可用</td>
<td></td>
<td></td>
</tr>
<tr>
<td>P4app</td>
<td>p4app is a tool that can build, run, debug, and test P4 programs. The philosophy behind p4app is “easy things should be easy” - p4app is designed to make small, simple P4 programs easy to write and easy to share with others.</td>
<td>一个可以编译、运行（14、16 两种版本）、测试（ptf 和 mininet 等）P4 语言的库，它使用了一个封装好的 docker 镜像，并且把 P4 的运行变成了一个可以描述的工程</td>
<td>可用</td>
</tr>
<tr>
<td>Third-party</td>
<td>Third-party dependencies for p4lang software</td>
<td>P4 仓库所依赖的一些第三方库</td>
<td></td>
</tr>
</tbody></table>
<p>注：以上均根据最近尝试运行 P4 的 GitHub 代码时候的经验逐渐整理出，如有不对或者欠缺的地方希望得到大神们的指点。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>P4</category>
      </categories>
      <tags>
        <tag>P4</tag>
      </tags>
  </entry>
  <entry>
    <title>配置P4的INT应用</title>
    <url>/p4_int/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p><a href="https://blog.zhengzi.me/p4_envirnoment_establish">上一篇文章</a>已经把 P4 的环境在 Ubuntu14.04 中跑起来了，这里开始尝试在 P4 环境中配置 INT(Inband Network Telemetry)应用。</p>
<h1 id="升级-linux-kernel-到-3-19-版本"><a href="#升级-linux-kernel-到-3-19-版本" class="headerlink" title="升级 linux kernel 到 3.19 版本"></a>升级 linux kernel 到 3.19 版本</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">sudo apt-<span class="built_in">get</span> install linux-generic-lts-vivid</span><br></pre></td></tr></table></figure>

<h1 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h1><p>按照 Docker 官网上的说明安装即可：<a href="https://docs.docker.com/engine/installation/linux/ubuntulinux/">https://docs.docker.com/engine/installation/linux/ubuntulinux/</a></p>
<h1 id="顺手再安几个其他的依赖项"><a href="#顺手再安几个其他的依赖项" class="headerlink" title="顺手再安几个其他的依赖项"></a>顺手再安几个其他的依赖项</h1><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">sudo apt-get <span class="keyword">install </span>python3</span><br><span class="line">sudo apt-get <span class="keyword">install </span>python3-pip</span><br><span class="line">sudo apt-get <span class="keyword">install </span><span class="keyword">bridge-utils</span></span><br><span class="line"><span class="keyword"></span>sudo pip3 <span class="keyword">install </span><span class="keyword">scapy-python3</span></span><br><span class="line"><span class="keyword"></span>sudo pip3 <span class="keyword">install </span>websockets</span><br></pre></td></tr></table></figure>

<h1 id="建立-Switch-的-Docker-镜像"><a href="#建立-Switch-的-Docker-镜像" class="headerlink" title="建立 Switch 的 Docker 镜像"></a>建立 Switch 的 Docker 镜像</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/p4/p4factory/targets/switch/</span><br><span class="line">sudo make docker-image</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>嗯，根据我双核 CPU，3.75GB 内存的表现，现在可以泡一壶茶，然后再约几个朋友，打几圈麻将。 然而，并没有编译成功。。。（所以明天再说</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>P4</category>
      </categories>
      <tags>
        <tag>SDN</tag>
        <tag>INT</tag>
        <tag>P4</tag>
      </tags>
  </entry>
  <entry>
    <title>我的PHP入门实践</title>
    <url>/php_intro/</url>
    <content><![CDATA[<h1 id="开头先讲故事"><a href="#开头先讲故事" class="headerlink" title="开头先讲故事"></a>开头先讲故事</h1><p>从开始正式接触 PHP 到现在已经走过了接近两年的时间了。</p>
<p>记得最开始接触 PHP 的时候是大一暑假为期两周的北邮人论坛技术组的培训上。学长学姐们花了五个晚上的时间给我们讲了 HTML、CSS、JavaScript、PHP、MySQL 和 Linux 以及 VIM 等等的基础知识。记得当时 H 仅仅两个晚上就用 PHP 手撸出来了一套 Blog。当时觉得这简直是不可能的事情。五天很快过去，我却连 VIM 怎么进入输入模式都没看懂，更别说去写各种前后端代码了。我还记得当时的绝望。</p>
<p>之后的暑假就是在各种 PHP 和前端视频教程中度过。记得当时是看的我的好友<a href="http://blog.lzp.name/">志鹏同学</a>给我推荐的<a href="http://www.ycku.com/">李炎恢</a>的 PHP 教学视频。我看视频的方式就是两倍速度快进，视频看完以后困了就睡觉（只是看视频而不去手写代码），睡醒了就继续起来看，所以当时看学习视频的时候连白天黑夜都已经分不清楚了。看完视频也总是有一些进步，已经可以用自己的（或者是模糊印象中李炎恢的）套路写出一些简单的网站了。但是网站的前端还是很丑陋（因为不怎么会 JS，也不会套模版），而且很多东西也是不成体系。</p>
<p>第一次实践就是在写 VLiner（微联，已经关闭，并不是现在的 VLine）网站的时候。网站很简单，就是像问卷星那样可以提供社团招新报名注册、名单汇总或者订阅报纸等等简单的功能。当时不怎么懂数据库，也不懂得怎么优化并发，所以访问的人一多网站就会崩溃（当时使用 CNZZ 统计应该是高峰期一个小时也就只有 3、4K 的访问量），更要命的是不懂得怎么复用和自动化，所以针对于每个组织的页面都是我手工一个一个填上去的。大概团队撑了半年左右，做不下去就散伙了。</p>
<p>接下来是北邮人论坛以及一个自己拍脑门想的云印项目，这时候我第一次接触到了 MVC 架构和 Yaf 框架，不过也都半途而废。</p>
<p>再次的 PHP 实践机会就是一年之后的<a href="http://www.danmakupie.com/">弹幕派</a>了。在一次 Hackahton 中，我用二十行 PHP 代码和<a href="http://www.cyprestar.com/">Cyprestar</a>同学就完成了弹幕派的最初原型。之后在不断重构的过成功逐渐形成了自己的一些套路。这个套路也用在了<a href="http://vline.zhengzi.me/">VLine</a>和北<a href="http://bbss.zhengzi.me/">邮人论坛每日十大查询</a>上，主要就是通过 MVC 架构和工厂模式实现了一个很简陋的 API 框架（到底算不算框架呢？）。</p>
<span id="more"></span>

<p>接下来在<a href="http://www.joyreserve.com/">乐享其约</a>项目中见识了 ThinkPHP3.2（当时也并不觉得有多好用，就是一堆方法的封装），在弹幕派重构的时候又见识了 Yii2 框架。</p>
<h1 id="PHP-实践方式"><a href="#PHP-实践方式" class="headerlink" title="PHP 实践方式"></a>PHP 实践方式</h1><p>我认为从最开始的原生野蛮的 PHP 写法到现在所认知的几种框架，构成了 PHP 的几种实践方式。</p>
<h2 id="原生野蛮，没有架构"><a href="#原生野蛮，没有架构" class="headerlink" title="原生野蛮，没有架构"></a>原生野蛮，没有架构</h2><p>如果就像我最开始写 Vliner 的时候，从 W3school 里面看完 PHP 教程就去撸代码的话，代码大概就会变成这样。</p>
<p><a href="/wp-content/uploads/2017/02/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170206160254.png"><img data-src="/wp-content/uploads/2017/02/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170206160254.png"></a></p>
<p>PHP 代码和 HTML 页面全都混写在一起，而且都是采用面向过程的方式完成。用一个页面完成一个逻辑，然后跳转到下一个页面继续。没有 MVC，没有设计模式。</p>
<p>这样的后果就是逻辑非常混乱，而且代码很难复用，一定有许多复制粘贴的操作，就更不提代码的运行效率、维护成本和安全问题了。</p>
<p>当然，事情并不一定总是这样。比如 WikiPedia 的开源版本 MediaWiki，代码也同样没有使用 MVC 模式，没有使用框架，都是自己的逻辑。但是 MediaWiki 也经受住了历史的考验，已经安然运行了十六年多。里面也有许多非常精彩的实践方式。</p>
<h2 id="自己苦思冥想，根据自己的理解规范代码"><a href="#自己苦思冥想，根据自己的理解规范代码" class="headerlink" title="自己苦思冥想，根据自己的理解规范代码"></a>自己苦思冥想，根据自己的理解规范代码</h2><p>既然框架就是为了规范代码，所以自己的一套代码规范也可以称作是“比较蠢”的框架了。</p>
<p>大概在弹幕派、每日十大查询和 vline 中，我都使用了自己的一套代码规范，这是在一次一次重构弹幕派代码的时候自己想出来的。为什么不去参考别人的？一是因为懒，看别人的代码进入别人的思路的确需要耗费很多注意力，二来就是心虚，觉得自己水平不够，看别人的代码怎么会看得懂。</p>
<p>所以就根据自己理解的 MVC 构建了自己的一套代码体系（其实和原始的 MVC 非常相似）。以下是这个简单框架的目录结构：</p>
<p><a href="/wp-content/uploads/2017/02/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170206161109.png"><img data-src="/wp-content/uploads/2017/02/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20170206161109.png"></a></p>
<p>应用访问的方式大概是从最外层的 Index 通过不同的参数调用使用不同的 Controller 并载入配置文件，Controller 过滤输入，完成异常处理，并且根据不同参数选择不同的方法去执行 Model 的内容，而 Model 是文件或数据库的增删查改操作的封装，通过继承最基本的数据库或文件的 Model 实现，最后 Controller 还可以根据需要返回 Json 或者渲染 View。</p>
<p>在数据库的 Model 中使用了一个好友自己封装的数据库基类，在 View 渲染中试用了 Smarty 引擎。这样，需求比较简单的 WebApp 使用这套代码就可以很轻松地实现。</p>
<p>这里，也应该抛弃 FTP，学会使用 Git 或者 SVN 进行版本控制，以便于多人协作。 虽然这个框架简单到都没有一个像样的路由，但每次写代码都屡试不爽，以至于我沉溺其中无法自拔，耽误了很多学习更好 PHP 思维的时间。更关键的是因为数据库基类使用的都是被 PHP7 抛弃的类似于 mysql_connect()这种函数，所以在过去很长一段时间里我都拒绝使用 PHP7。</p>
<p>随着工程量的扩大，简单的工厂模式因为写起来重复代码很多，而且不支持 autoloader，所以这个小框架也逐渐让我感到力不从心。特别是自己封装的数据库基类并不如使用 ORM 模型的库用起来方便，而且也成为了应用效率的瓶颈，现在也是时候说再见了。</p>
<h2 id="使用传统大而全的-PHP-框架，进入该框架的社区"><a href="#使用传统大而全的-PHP-框架，进入该框架的社区" class="headerlink" title="使用传统大而全的 PHP 框架，进入该框架的社区"></a>使用传统大而全的 PHP 框架，进入该框架的社区</h2><p>比如 ThinkPHP3.2 或者 Yii2 都是传统大而全的 PHP 框架。我对这类框架是用的不多，都是在基本应用的范围内。</p>
<p>这类框架的缺点就在于一旦进入，就会被限制在这个框架的生态里面，不论是使用完成一些奇奇怪怪功能的插件，还是自己写的代码，都很难做到在其他框架的项目中复用，项目的命运也很可能就会和框架的命运绑定在一起。</p>
<p>但这类框架本身生态也非常成熟，一般都有非常庞大的社区（特别是 ThinkPHP3 之于中国），而且大而全，遇到问题很轻松搜索到解决方案，所以也可以作为主力开发的框架。</p>
<p>一个比较神奇的框架就是 Yaf，它是一个由 C 语言写成的 PHP Mod，运行时直接嵌入 PHP 引擎，所以性能上来说，是绝对的强悍。遇到追求性能的地方，Yaf 是不二之选。但是正因为它作为一个 PHP 的模块存在，也丧失了一些灵活性。</p>
<h2 id="活在-PHP-大社区，模块化构建-PHP-应用"><a href="#活在-PHP-大社区，模块化构建-PHP-应用" class="headerlink" title="活在 PHP 大社区，模块化构建 PHP 应用"></a>活在 PHP 大社区，模块化构建 PHP 应用</h2><p>正如我在上一篇文章<a href="/modern_php_best_practice">《Modern PHP》——关于 PHP 的最佳实践和最新进展</a>中所说，如今的 PHP 已经不是网上许多文章所写或者是许多教程里所讲的那样，PHP 已经蜕变成了一门（不是那么）优雅而现代的语言。</p>
<p>Composer 的出现，让工程化的思想带入了 PHP，世界上最好的语言终于不在乱糟糟，她开始变得标准而统一。（这句话其实来自 justjavac 大大的原话，原文链接：<a href="http://zhihu.com/question/27453375/answer/36939511">http://zhihu.com/question/27453375/answer/36939511</a>）</p>
<p>Composer 构建了一个大的 PHP 社区，就像 NodeJs 的 nmp 或者 Python 的 pip 一样，Composer 以非常优雅的方式完成了 PHP 应用的构建。</p>
<p>以往的实践方式就是不断从网上下载代码，拷贝到目录里（这完全没办法对第三方代码进行版本控制），说不定还会对第三方代码进行修改，那么如果更新的话，就更是灾难。而且 Composer 也减少了许多造轮子行为的发生（如果我之前知道这个社区的话，那么为什么还会有自己封装的那么简陋的 MySql 类库呢？）</p>
<p>而 Laravel 正是这个精神的践行者。如果说 Modern PHP 还不是那么优雅的话，那么 Laravel 就补齐了 PHP 的最后一块短板。Laravel 符合 PHP 的 PSR 标准，而且采用了 Composer 模块化的方式构建，而且基本没有自己重复造轮子（甚至许多库都直接来自 Symfony 框架）。这样，只要符合标准的 PHP 库将都会是 Laravel 生态的一员。可以想象，如果构建一个长期运行的项目，Laravel 自然是不二之选。</p>
<h2 id="使用-PHP-做更多的事情"><a href="#使用-PHP-做更多的事情" class="headerlink" title="使用 PHP 做更多的事情"></a>使用 PHP 做更多的事情</h2><p>其实 PHP 还可以做更多别的事情，比如去做 CLI 开发。</p>
<p>借助 Composer 和 AutoLoader，PHP 具有了不亚于 Python 作为胶水语言的能力，可以作为替代 Bash 的更方便的脚本解释器。</p>
<p>PS：如果还非要说 php 还不优雅的话，那就只剩下开头的&lt;?php 符号（有开头没有结尾，不知逼死了多少强迫症）和 Bash 脚本的#!/usr/bin/php 冲突的问题了。</p>
<p>PHP 甚至还可以来作为一个高性能的 Web 服务器，性能不输给 Nginx，而且可以高效完成许多 Socket 相关操作。<a href="http://www.workerman.net/">WorkerMan</a>是一个非常优秀的实现。</p>
<p>其实，PHP 也可以写桌面程序，比如 PHP-GTK 库就是做这个的。但我觉得这样的确是多此一举，2015 年以后也真就没啥动静了。</p>
<h1 id="最后讲两句"><a href="#最后讲两句" class="headerlink" title="最后讲两句"></a>最后讲两句</h1><p>到这里，我觉得现在可以算是入门 PHP 了吧。然而以后的路还有很长，PHP 各种特性/设计模式以及优化方式我还知之甚少。</p>
<p>我认为 PHP 最大的优势在于易于上手，简单几行代码就可以写出一个网站。正是因为这种令人发指的简单，让 PHP 的实践方式变得异常自由，但也让 PHP 社区变得混乱，每一个人的水平差距会非常大。</p>
<p>所以我认为 PHP 依旧是最容易入门的一门脚本语言，学习曲线比类似 Java 的 Spring 或者 C#的 Asp.net 平缓很多，但如果想做出一个优秀的 Web 应用，那么难度也绝对不比那两者低。</p>
<p>不论这一路还有多少坑要踩，多少锅要背，我也还是会选择走下去。</p>
<p>踏歌长行，梦想永在！</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>实践方式</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP的$_POST变量浅析</title>
    <url>/php_post/</url>
    <content><![CDATA[<p>在通常情况下，使用 PHP 的超级全局变量<code>$_POST</code> 来接收使用 HTTP POST 方法提交的信息。但是在某些情况下，似乎<code>$_POST</code>并不能获得前端使用 HTTP POST 方法发来的数据。</p>
<p>查找资料后发现<code>$_POST</code>的确有使用局限，它只能接受 HTTP 头中文档类型为表单传来的数据，即 Content-Type: application/x-www-form-urlencoded 具体可以参见 PHP 官方文档：<a href="http://php.net/manual/en/reserved.variables.post.php#114598">http://php.net/manual/en/reserved.variables.post.php#114598</a></p>
<p>在使用 jQuery 的时候，jQuery 的 POST 方法总是会自动设置 Content-Type 为 <code>application/x-www-form-urlencoded</code>，但是在使用 AngularJS 框架的时候，发现 Content-Type 被设置成了 <code>application/json</code>，这样使用 PHP 的<code>$_POST</code>就不能直接获取到提交的信息了。</p>
<p>解决方法：</p>
<span id="more"></span>

<ol>
<li><p> 修改 AngularJS 发送的 POST 请求时的 HTTP 头具体方法可以参考官方文档：<a href="https://docs.angularjs.org/api/ng/service/$http#post">https://docs.angularjs.org/api/ng/service/$http#post</a>，建议直接修改 httpProvider 的 content-type 建议直但是修改成功以后还是不能正常接收，具体原因还要继续检查。</p>
</li>
<li><p> 在 Angular 中的 jQLite 或者 jQuery 发送 POST 请求最直观的解决方法，但是可能会使得代码的可读性变差，而且还需要转换</p>
</li>
<li><p>在 PHP 中使用其他方式接收信息</p>
<ul>
<li>使用<code>$GLOBALS[&#39;HTTP_RAW_POST_DATA&#39;]</code>方式接收</li>
</ul>
<p> <code>HTTP_RAW_POST_DATA</code>  变量包含有原始的 POST 数据。此变量仅在碰到未识别 MIME 类型的数据时产生，而 PHP 默认识别的数据类型是 <code>application/x-www.form-urlencoded</code>标准的数据类型，所以可以使用 <code>HTTP_RAW_POST_DATA</code>来接收数据。</p>
<ul>
<li>使用 <code>php://input</code> 方式接收数据</li>
</ul>
<p> <code>php://input</code> 是个可以访问请求的原始数据的只读流。</p>
<p> POST 请求的情况下，最好使用 <code>php://inpu</code>t 来代替 <code>$HTTP_RAW_POST_DATA</code>，因为它不依赖于特定的 <code>php.ini</code> 指令。而且，这样的情况下 <code>$HTTP_RAW_POST_DATA</code> 默认没有填充， 比激活 always_populate_raw_post_data 潜在需要更少的内存。</p>
<p> //具体用法很简单</p>
 <figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line"><span class="symbol">$i</span>nput = file_get_contents(<span class="string">&#x27;php://input&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p> 具体可以参考官方文档：<a href="http://php.net/manual/zh/wrappers.php.php#wrappers.php.input">http://php.net/manual/zh/wrappers.php.php#wrappers.php.input</a></p>
</li>
</ol>
<p>参考文档：<a href="http://www.jb51.net/article/67296.htm">http://www.jb51.net/article/67296.htm</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>Python3下使用Pip</title>
    <url>/python3_pip/</url>
    <content><![CDATA[<p>相信很多人在 Python2.x 中安装 Pip 的时候都遇到过各种问题。 不过好消息是 Python3 已经自带 pip 了，不信输入命令可以查看一下。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python -m pip -V</span></span><br><span class="line"><span class="attribute">pip</span> <span class="number">8</span>.<span class="number">0</span>.<span class="number">2</span> from /usr/python3/lib/python3.<span class="number">5</span>/site-packages (python <span class="number">3</span>.<span class="number">5</span>)</span><br></pre></td></tr></table></figure>

<p>那么如何更新 pip 呢？也很简单，只是现在需要用 Python 调用 pip 模块而已。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#python -m pip install -U pip</span></span><br></pre></td></tr></table></figure>

<p>使用 pip 安装模块也很简单，比如安装适用 Python3 的 MySQL 模块：</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># python -m pip install PyMySQL</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>最后，如何安装适应 Python2 的 Pip 并且和 Python3 兼容呢？ 首先，CentOS 中 yum 包管理里没有 python-pip 包，所以呢，第一步先把 yum 增强一下，安装 epel，</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># yum install epel-release</span></span><br></pre></td></tr></table></figure>

<p>然后，安装适用 Python2 的 Pip</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># yum install python-pip</span></span><br></pre></td></tr></table></figure>

<p>查看一下版本</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line"><span class="meta"># pip -V</span></span><br></pre></td></tr></table></figure>

<p>然后惊讶地发现，居然出了很多错，大概就是版本冲突之类的（因为之前 Python 命令默认是 Python3，而 python2.5 需要使用 Python2 来调用，详情见 <a href="https://blog.zhengzi.me/centos7_python3">Centos7 下安装 Python3</a>）。</p>
<p>所以只要进入 pip 的调用文件<code>/usr/bin/pip</code>，改动一下即可：</p>
<figure class="highlight d"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/python</span></span><br><span class="line">改为</span><br><span class="line"><span class="meta">#!/usr/bin/python2</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>技术</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Pip</tag>
      </tags>
  </entry>
  <entry>
    <title>来SAE搭一个WordPress博客吧~</title>
    <url>/sae_wordpress/</url>
    <content><![CDATA[<h1 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h1><p>在 SAE 搭建一个 blog 的想法由来已久，但是一直都没有实施，直到今年五月份开始在办公室研究 WordPress，最后决定在 SAE 上面自己来搭建一套博客系统。把自己的一些文字和关于技术的成长经历放在上面，供自己，或者如果其他可以从这儿得到有用信息的人来逛一逛。</p>
<p>这一篇，就用来回顾一下搭建 WordPress 时候遇到的各种问题和解决办法吧，也可以作为一篇在 SAE 上搭建 WordPress 的教程吧。</p>
<p>先说一下为什么决定采用 WP 吧。首先是因为它的简单吸引了我，下载源码–&gt;改变一下数据库配置–&gt;网页上简单设置一下–&gt;开始使用。许多完全不懂代码的同学看了相关的文档也一定可以玩转起来的。再者，WP 是开源的系统，我学习 PHP 有一段时间了，对它的代码比较熟悉，自己改动起来也十分方便。第三呢，就是界面非常的 Modern，一向看脸的我一下子就被吸引过去了。但是，为什么就不自己来写一套博客系统呢？这个问题其实很纠结，很久之前，在北邮人团队培训的时候 H 酱的确在台上带着我们用了三个晚上写过一套论坛系统，我也尝试做了一些，但是当时技术水平很差，bug 比较多，安全性也是问题，所以倒不如直接用 WP 图个方便，而且本来 WP 的可定制性就很高，自己也可以看着改一改，不如先写一套 UI（也是一直没有开工）。日后有很闲时间再想着写一套自己的吧。</p>
<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><h2 id="SAE-Begin"><a href="#SAE-Begin" class="headerlink" title="SAE Begin"></a>SAE Begin</h2><p>SAE 是新浪推出的一款云服务，全名叫 Sina App Engine，主要是用来跑一些 Web Service，对 PHP 的支持尤其的好，而且如果计算量和访问量不大是免费的（如果量大的话，转移到阿里云和 Azure 上面也比较方便）。也作为国内第一款 PAAS 的产品，有了一些与 GAE 感觉（如果不是被墙，肯定首选 GAE 了）。除了速度略慢，没有什么大的缺点了。 废话不多说了。先来说说怎么开始使用吧。登录 <a href="http://sae.sina.com.cn/">http://sae.sina.com.cn/</a> ，使用新浪微博账号登陆（没有微博账号的点击注册很轻松就可以注册一个）。登录之后，从控制台中选择”云应用 SAE），进入到 SAE 控制台页面。点击创建新应用，设置应用的二级域名，名称，输入验证码，选择开发语言（php7 或者 php5.6 的空应用）即可。</p>
<span id="more"></span>

<h2 id="管理环境"><a href="#管理环境" class="headerlink" title="管理环境"></a>管理环境</h2><p>SAE 的管理环境非常友好，在总览里面可以看见访问 PV，消耗的云豆和防火墙拦截情况，还能邀请其他人和你一起编辑这个应用（前提是新浪微博），还可以绑定独立域名。</p>
<p>首先点击代码管理，因为只是自己在维护，所以 SVN 是一个不错的选择，所以选择 svn 进行代码管理。点击创建版本，将创建版本号为 1 的版本。(可能需要输入密码)。 现在，就可以使用 SVN 管理代码了，关于 SVN 在 windows 下的使用，可以参考<a href="http://www.sinacloud.com/doc/sae/tutorial/code-deploy.html#svn">http://www.sinacloud.com/doc/sae/tutorial/code-deploy.html#svn</a> 。</p>
<p>因为 WP 还需要 MySql 数据库的支持，所以现在打开 MySQL 数据库的支持。点击数据库服务中的 MySQL，选择免费的共享型 MySQL，选择 MyISAM，Mysql 功能已经开启。</p>
<p>接下来再存储与 CDN 服务中打开 Storage 业务，点击新建 Domain，输入 wordpress 作为名字，剩下默认（注意不要设为私有），再打开 Memcache，使用默认容量即可。</p>
<p>至此，环境搭建全部完成。</p>
<h1 id="开始使用-WordPress"><a href="#开始使用-WordPress" class="headerlink" title="开始使用 WordPress"></a>开始使用 WordPress</h1><h2 id="下载-WordPress"><a href="#下载-WordPress" class="headerlink" title="下载 WordPress"></a>下载 WordPress</h2><p>打开网址 <a href="https://cn.wordpress.org/">https://cn.wordpress.org/</a> ，下载最新版本的 WordPress（国内可能因为访问不了 google 造成加载过慢），并且解压。</p>
<h2 id="上传代码"><a href="#上传代码" class="headerlink" title="上传代码"></a>上传代码</h2><p>使用 SVN 将代码上传到 SAE 中。</p>
<h2 id="调整配置文件"><a href="#调整配置文件" class="headerlink" title="调整配置文件"></a>调整配置文件</h2><p>将 wordpress 目录中的 wp-config-sample.php 文件复制为 wp-config.php，并且编辑之。 修改内容：</p>
<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** WordPress 数据库的名称 */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;DB_NAME&#x27;</span>, SAE_MYSQL_DB);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL 数据库用户名 */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;DB_USER&#x27;</span>, SAE_MYSQL_USER);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL 数据库密码 */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;DB_PASSWORD&#x27;</span>, SAE_MYSQL_PASS);</span><br><span class="line"></span><br><span class="line"><span class="comment">/** MySQL 主机 */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">define</span></span>(<span class="string">&#x27;DB_HOST&#x27;</span>, SAE_MYSQL_HOST_M.<span class="string">&#x27;:&#x27;</span>.SAE_MYSQL_PORT)</span><br></pre></td></tr></table></figure>

<h2 id="设置账户"><a href="#设置账户" class="headerlink" title="设置账户"></a>设置账户</h2><p>访问接下来 Wordpress，设置用户名密码，就可以进入到 WordPress 中。</p>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>SAE 中 PHP 没有写入目录文件的权限，所以 1.安装插件需要先下载到本地，然后使用 SVN 上传，在进行配置 2.上传照片需要交给 storage 来进行</p>
<h1 id="在-SAE-中使用-Storage"><a href="#在-SAE-中使用-Storage" class="headerlink" title="在 SAE 中使用 Storage"></a>在 SAE 中使用 Storage</h1><h2 id="创建文件-sae-php"><a href="#创建文件-sae-php" class="headerlink" title="创建文件 sae.php"></a>创建文件 sae.php</h2><p>在代码版本的根目录(注：不是应用目录)下创建文件 sae.php，源码如下：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 在SAE的Storage中新建的Domain名，比如&quot;wordpress&quot; */</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">define</span> ( <span class="string">&#x27;SAE_STORAGE&#x27;</span>, wordpress );</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 设置文件上传的路径和文件路径的URL，不要更改 */</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">define</span> ( <span class="string">&#x27;SAE_DIR&#x27;</span>, <span class="string">&#x27;saestor://&#x27;</span> . SAE_STORAGE . <span class="string">&#x27;/uploads&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">define</span> ( <span class="string">&#x27;SAE_URL&#x27;</span>, <span class="string">&#x27;http://&#x27;</span> . <span class="variable">$_SERVER</span> [<span class="string">&#x27;HTTP_APPNAME&#x27;</span>] . <span class="string">&#x27;-&#x27;</span> . SAE_STORAGE . <span class="string">&#x27;.stor.sinaapp.com/uploads&#x27;</span> );</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="修改-wp-includes-functions-php-文件"><a href="#修改-wp-includes-functions-php-文件" class="headerlink" title="修改 wp-includes/functions.php 文件"></a>修改 wp-includes/functions.php 文件</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">/**_ Step 1： include sae.php 　_**/</span></span><br><span class="line"></span><br><span class="line">include( ABSPATH . <span class="string">&#x27;/sae.php&#x27;</span> ); <span class="regexp">//</span>添加这一行。调用 SAE 的 Storage 文件域名设置</span><br><span class="line"></span><br><span class="line">require( ABSPATH . WPINC . <span class="string">&#x27;/option.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">前添加</span><br><span class="line"></span><br><span class="line"><span class="regexp">/**_ Step 2: 替换代码　_**/</span></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line"><span class="variable">$wrapper</span> = null;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> Strip the protocol.</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (wp_is_stream ( <span class="variable">$target</span> )) &#123;</span><br><span class="line"></span><br><span class="line">    list ( <span class="variable">$wrapper</span>, <span class="variable">$target</span> ) = explode ( <span class="string">&#x27;://&#x27;</span>, <span class="variable">$target</span>, <span class="number">2</span> );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> From php.net/mkdir user contributed notes.</span><br><span class="line"></span><br><span class="line"><span class="variable">$target</span> = str_replace ( <span class="string">&#x27;//&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> Put the wrapper back on the target.</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$wrapper</span> !== null) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="variable">$target</span> = <span class="variable">$wrapper</span> . <span class="string">&#x27;://&#x27;</span> . <span class="variable">$target</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>替换为以下代码</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> from php.net/mkdir user contributed notes</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (substr ( <span class="variable">$target</span>, <span class="number">0</span>, <span class="number">10</span> ) == <span class="string">&#x27;saestor://&#x27;</span>) &#123;</span><br><span class="line"></span><br><span class="line">    return true;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$target</span> = str_replace ( <span class="string">&#x27;//&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="variable">$target</span> );</span><br><span class="line"></span><br><span class="line"><span class="regexp">/**_ Step 3: 添加代码　_**/</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$dir</span> = SAE_DIR; <span class="regexp">//</span>添加这一行</span><br><span class="line"></span><br><span class="line"><span class="variable">$url</span> = SAE_URL; <span class="regexp">//</span>添加这一行</span><br><span class="line"></span><br><span class="line"><span class="variable">$basedir</span> = <span class="variable">$dir</span>;</span><br><span class="line"></span><br><span class="line"><span class="regexp">/**_ Step 4: 添加代码　_**/</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>添加如下代码块</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ( !function_exists(<span class="string">&#x27;utf8_encode&#x27;</span>) ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> utf8_encode(<span class="variable">$str</span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$encoding_in</span> = mb_detect_encoding(<span class="variable">$str</span>);</span><br><span class="line"></span><br><span class="line">        return mb_convert_encoding(<span class="variable">$str</span>, <span class="string">&#x27;UTF-8&#x27;</span>, <span class="variable">$encoding_in</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>在这前面添加上述代码</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"></span><br><span class="line">- Send a HTTP header to limit rendering of pages to same origin iframes.</span><br><span class="line"></span><br><span class="line">-</span><br><span class="line"></span><br><span class="line">* @since <span class="number">3.1</span>.<span class="number">3</span></span><br><span class="line"></span><br><span class="line">*</span><br><span class="line"></span><br><span class="line">- @see https:<span class="regexp">//</span>developer.mozilla.org<span class="regexp">/en/</span>the_x-frame-options_response_header</span><br><span class="line"></span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"><span class="comment">### 修改 wp-admin/includes/file.php</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">/**_ 注释如下代码 _**/</span></span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span> Set correct file permissions.</span><br><span class="line"></span><br><span class="line"><span class="variable">$stat</span> = stat ( dirname ( <span class="variable">$new_file</span> ) );</span><br><span class="line"></span><br><span class="line"><span class="variable">$perms</span> = <span class="variable">$stat</span> [<span class="string">&#x27;mode&#x27;</span>] &amp; <span class="number">0000666</span>;</span><br><span class="line"></span><br><span class="line">@ chmod ( <span class="variable">$new_file</span>, <span class="variable">$perms</span> );</span><br></pre></td></tr></table></figure>

<h2 id="下载-uploads-内容"><a href="#下载-uploads-内容" class="headerlink" title="下载 uploads 内容"></a>下载 uploads 内容</h2><p>参考 SAE 的官方文档即可 <a href="http://www.sinacloud.com/doc/sae/php/storage.html#windowsmac">http://www.sinacloud.com/doc/sae/php/storage.html#windowsmac</a></p>
<p>参考内容： <a href="http://sparkandshine.net/build-wordpress-blogs-on-sina-cloud-solve-uploads-directory-permissions/">http://sparkandshine.net/build-wordpress-blogs-on-sina-cloud-solve-uploads-directory-permissions/</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>WordPress</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>SAE</tag>
        <tag>WordPress</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Scrapy写个增量式图书爬虫</title>
    <url>/scrapy_incremental_crawler/</url>
    <content><![CDATA[<h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><p>爬取图书（特别是小说）数据并存储，用作之后的分析。 可以爬取的站点有 Amazon、京东、当当、腾讯旗下的一众小说网站（腾讯文学、创世中文、云起书院）、起点中文网等等。</p>
<p><img data-src="/wp-content/uploads/2016/07/%E7%88%AC%E8%99%AB%E9%80%89%E6%8B%A9.png" alt="爬虫选择"></p>
<p><img data-src="/wp-content/uploads/2016/07/%E7%88%AC%E8%99%AB%E9%9C%80%E6%B1%82.png" alt="爬虫需求"></p>
<span id="more"></span>

<h1 id="爬虫选择"><a href="#爬虫选择" class="headerlink" title="爬虫选择"></a>爬虫选择</h1><p>根据自己熟悉的语言来调查分析网上流行的爬虫。 并最终根据自身情况选择了 Scrapy。 <a href="/wp-content/uploads/2016/07/%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%AF%94%E8%BE%83.png"><img data-src="/wp-content/uploads/2016/07/%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6%E6%AF%94%E8%BE%83.png" alt="爬虫框架比较"></a></p>
<p><a href="/wp-content/uploads/2016/07/Scrapy.png"><img data-src="/wp-content/uploads/2016/07/Scrapy.png" alt="Scrapy"></a></p>
<h1 id="以云起书院为例来分析相关网站的模式"><a href="#以云起书院为例来分析相关网站的模式" class="headerlink" title="以云起书院为例来分析相关网站的模式"></a>以云起书院为例来分析相关网站的模式</h1><p><a href="/wp-content/uploads/2016/07/%E5%9B%BE%E7%89%871.png"><img data-src="/wp-content/uploads/2016/07/%E5%9B%BE%E7%89%871.png" alt="图片1"></a><br>根据分析可以看出来，网站的层级有三层：图书列表，图书内容和图书评论。在爬取的时候可以根据三层的内容分别设计 Item 和数据库并进行爬取和存储。</p>
<h1 id="Scrapy-工作方式"><a href="#Scrapy-工作方式" class="headerlink" title="Scrapy 工作方式"></a>Scrapy 工作方式</h1><p><a href="/wp-content/uploads/2016/07/%E5%9B%BE%E7%89%872.png"><img data-src="/wp-content/uploads/2016/07/%E5%9B%BE%E7%89%872-1024x877.png" alt="图片2"></a></p>
<p>有许多地方 Scrapy 框架都自动完成了，需要做的就是定义要爬取的 URL 以及将 URL 里面的内容使用 Selector 匹配道，在 Pipeline 中做数据清洗并且将 Item 里面的内容存入数据库或者文件。</p>
<h1 id="分层增量爬取架构"><a href="#分层增量爬取架构" class="headerlink" title="分层增量爬取架构"></a>分层增量爬取架构</h1><p><a href="/wp-content/uploads/2016/07/%E5%9B%BE%E7%89%873.png"><img data-src="/wp-content/uploads/2016/07/%E5%9B%BE%E7%89%873.png" alt="图片3"></a></p>
<p>增量爬取的方法就是分别对每一层写一个 Spider，分别进行爬取，爬取之后进行存储并加入标识，之后更新的时候只更新新加入的图书而不去重新将所有的图书重新爬取。</p>
<h1 id="利用-Shell-指令实现自动增量爬取"><a href="#利用-Shell-指令实现自动增量爬取" class="headerlink" title="利用 Shell 指令实现自动增量爬取"></a>利用 Shell 指令实现自动增量爬取</h1><h2 id="实现爬虫每天自动运行"><a href="#实现爬虫每天自动运行" class="headerlink" title="实现爬虫每天自动运行"></a>实现爬虫每天自动运行</h2><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>Bash</span><br><span class="line"><span class="comment">#crontab – l</span></span><br><span class="line"><span class="number">5</span> <span class="number">0</span>,<span class="number">12</span> * * * <span class="regexp">/root/</span>cronList.sh</span><br></pre></td></tr></table></figure>

<figure class="highlight d"><table><tr><td class="code"><pre><span class="line"><span class="comment">//cronList.sh</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">cd /root/spider/yunqi</span><br><span class="line">bash /root/spider/yunqi/run.sh</span><br></pre></td></tr></table></figure>

<h2 id="每次开启任务，按照广度优先进行分层爬取"><a href="#每次开启任务，按照广度优先进行分层爬取" class="headerlink" title="每次开启任务，按照广度优先进行分层爬取"></a>每次开启任务，按照广度优先进行分层爬取</h2><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line"><span class="comment">//run.sh</span></span><br><span class="line">DATE=$(<span class="keyword">date</span> +%Y-%m-%d.%H:%M:%S)</span><br><span class="line">echo yunqi Spider Strat $DATE &gt;&gt; <span class="keyword">log</span>.out</span><br><span class="line">scrapy crawl novelList</span><br><span class="line">echo yunqi novelList complete &gt;&gt;<span class="keyword">log</span>.out</span><br><span class="line">scrapy crawl novelContent</span><br><span class="line">echo yunqi novelContent complete &gt;&gt;<span class="keyword">log</span>.out</span><br><span class="line">scrapy crawl novelComment</span><br><span class="line">echo yunqi novelComment complete &gt;&gt;<span class="keyword">log</span>.out</span><br><span class="line">DATE=$(<span class="keyword">date</span> +%Y-%m-%d.%H:%M:%S)</span><br><span class="line">echo yunqi Spider Finish $DATE &gt;&gt; <span class="keyword">log</span>.out</span><br></pre></td></tr></table></figure>

<h1 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h1><p><a href="/wp-content/uploads/2016/07/%E5%9B%BE%E7%89%874.png"><img data-src="/wp-content/uploads/2016/07/%E5%9B%BE%E7%89%874.png" alt="图片4"></a></p>
<p>后期工作</p>
<p>在爬取之后还应该使用 Supervisor 或者 Scrapyd 进行托管，以更稳定的方式运行。之后有空会继续更新一套可视化爬虫工具并开源。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ul>
<li>Scrpay 文档：<a href="http://doc.scrapy.org/en/1.1/index.html">http://doc.scrapy.org/en/1.1/index.html</a></li>
<li>Scrapyd 文档：<a href="https://scrapyd.readthedocs.io/en/latest/index.html">https://scrapyd.readthedocs.io/en/latest/index.html</a></li>
<li>Scrpay 使用笔记：<a href="http://www.q2zy.com/articles/2015/12/15/note-of-scrapy/">http://www.q2zy.com/articles/2015/12/15/note-of-scrapy/</a></li>
<li>Scrapy 使用以及 Xpath 的一些坑：<a href="http://www.tuicool.com/articles/EVfqI3">http://www.tuicool.com/articles/EVfqI3</a></li>
<li>amazon 图书爬虫（非增量式，已开源）：<a href="https://github.com/imaginezz/amazonBookSpider">https://github.com/imaginezz/amazonBookSpider</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Scrapy</tag>
        <tag>Crawler</tag>
      </tags>
  </entry>
  <entry>
    <title>有些事现在不做一辈子都不会做了</title>
    <url>/something_only_happen_now/</url>
    <content><![CDATA[<p>胡语曰：仲春美哉，何不以睡代醒，一睡方休？</p>
<p>入四月，无琴瑟，是有与日的燥热同与日不安的内心。心起了波澜，头脑昏了下去，也便再写不出文章。</p>
<p>流月之城渺渺然，吾思之将至，却永不得焉。</p>
<p>正些许失意，至今日，与一友畅谈，如见春风，拂得心安；又同一友通话，如遇朗月，沐得心宁。</p>
<h1 id="从一部电影开始"><a href="#从一部电影开始" class="headerlink" title="从一部电影开始"></a>从一部电影开始</h1><p>学期初看了《三傻大闹宝莱坞》，兰彻让我认清了自己需要做的事情。</p>
<p>“Follow Excellence. Success will chase you.”</p>
<p>不要刻意追求，少些目的性，努力去做到最好。事终如何，我不想知道答案，但我知道答案不会让我失望。</p>
<p>在长跑的时候，我得到了最真实的感觉。</p>
<span id="more"></span>

<p>不能总想着要跑的比别人快超过别人，这样子过一阵体力匮乏，肯定会吃不消。</p>
<p>换一种思路：跑得比我慢的人都会被我超过，不用着急赶超；跑的比我快的人耐力都不如我，也不必着急赶超。到了最后，操场上果然只剩下稀稀拉拉几人，只有我还在继续奔跑。</p>
<p>三月份一个月的时间和激情，献给了我的团队 DebugTeam 和我们的作品——StarrySky。事后，第一次想通了在一年前参加建模比赛时那种团队里所有成员都不自觉渴望付出努力做事的感觉究竟为何而生。</p>
<p>在一个好的团队中，每一个人都不一定是最优秀的（但需要有独当一面的实力），大家在一起为了共同的目标努力，用尽办法，互相协助，没有抱怨，更无人言弃。每个人不只是自己，只是一个坚不可摧的团队中的一员。当团队中所有人都在努力的时候，所有人中一定是包含你自己。</p>
<p>这种奇妙的感觉，又一次在这种团队气氛中产生，最不可缺少的就是共同的目标和实现这个目标的决心。</p>
<p>另一边，另外一个项目却像是给老师完成任务，虽努力完善，但却找不到激情，更没有思想，就像一只机械手，一行行敲出早已是套路的代码。</p>
<h1 id="黑客与画家"><a href="#黑客与画家" class="headerlink" title="黑客与画家"></a>黑客与画家</h1><p>前段时间一直在读 Paul Graham 的这本书，受益匪浅。</p>
<p>以前一直在听说“程序=算法+数据结构”，和语言本身无甚关系。但是我不服啊，为啥就说“PHP 是世界上最好的语言”，却还是有无数人鄙视我们这些用 PHP 的人。</p>
<p>最合适的语言去做最合适的事情就是最优。</p>
<p>许多认为 PHP 是老掉牙的东西，根本比不上所谓现代先进的语言的人，我也只能回以礼貌一笑，心中拜托他们是不是可以先稍微回去看两眼 PHP 再来废话。</p>
<p>不同的语言只是为了最快最好（也就是最优）完成一件事情，而不是为了让程序员之间起这种可笑的纷争。</p>
<p>Paul 认为 Lisp 非常好，前几天和一鸣师兄请教了一些之后，心中豁然开朗，明白了 Lisp 的强大不是因为这门语言，而是因为其背后的设计思想。</p>
<p>这里可以先放他的<a href="http://www.cnblogs.com/buptzym/p/3256146.html">一篇与此有关的文章——《别语言之争了，最牛逼的语言不是.NET，也不是 JAVA!》。</a>（作为他的最新文章《计算的本质》的首批读者，我认为这是一篇非常有启发性的文章，很值得一读，所以也想在这里先占个空。）</p>
<p>我更喜欢把代码放在一边，当作手头的一个武器，但并不是我的全部。所以我可能不会是一个完全意义上的程序员。</p>
<p>我想让手头的武器变强，也更想让使用武器的自己变得更强（这里应该不能用“强”这个字，我想说多方面发展）。一个画家拿着武器战场杀敌，有何不可？</p>
<p>所以我有义务让自己变得清醒，看清楚每天起来所见的世界，想清楚自己今后要走的路。清楚之后，走得要同“大叔”那般坚定。</p>
<h1 id="人月神话"><a href="#人月神话" class="headerlink" title="人月神话"></a>人月神话</h1><p>在一个水平很差，没有想法的团队中，我会变得不知所措，异常痛苦，十分后悔，想要逃开。这是上学期快要放假时候最真实的感触。</p>
<p>虽然当时后悔，但事后想想，这几天后悔得值，这让我深刻记住了当时痛苦的感受，今后再也不要进入这样的团队之中（我也不能成为那样水平很差被人嫌弃的人）。</p>
<p>在 StarrySky 之后，DebugTeam 又决定去参加 HackPKU，同时也来了一位新的小伙伴，成员从 4 个人变成了 5 个人。</p>
<p>在 HackPKU 上我们虽然顺利完成了我们的作品——VLine（也是和之前的做过的一个项目名字很像呢），但是我明显地感觉到大家因为新同学的加入（虽然我们之前就很熟悉）沟通成本陡增，分工也出现了问题（可能是因为没有使用框架），好在项目不复杂，还是凭借我们的机智成功做了出来。</p>
<p>至此，我又体会到好的团队一定是建立在沟通顺畅，分工明确的基础上。我对那次“建模事件”的理解更深了一步。</p>
<h1 id="有些事现在不做一辈子都不会做了"><a href="#有些事现在不做一辈子都不会做了" class="headerlink" title="有些事现在不做一辈子都不会做了"></a>有些事现在不做一辈子都不会做了</h1><p>我相信很多事物运行都遵行幂律（听起来有些玄学因为我暂时不能解释为何，只是模糊感觉一切都是一张网络），水平越在前面的人越可以得到他想要的东西。</p>
<p>所以让自己排在前面的最好办法就是让自己成为一个独特的人。越是和别人不同，那么竞争就越少，稀缺性的好处就越可以体现出来，（过犹不及，讲求中庸）也就越容易到达幂律的临界点。</p>
<p>最好是去做一个靠谱的事情。靠谱不一定要所有人都觉得它可以，只是因为有些事情现在不做一辈子都不会做了。</p>
<p>人生漫漫，做事情选择的机会却不多，如果不去做这些认为不做将来可能后悔的事情，将来一定是会后悔的。</p>
<p>最好要做的事情，我认为就是在合适的时间同合适的人去做的合适的事情，顺势而为，而不是改天逆命。</p>
<p>子曰：“吾十有五而志于学，三十而立，四十而不惑，五十而知天命，六十而耳顺，七十而从心所欲不逾矩。”</p>
<p>是想，孔子七十才做到随心所欲不逾矩，可见此时是要经历几多沧桑才能到达的境界。这也是我的目标。</p>
<p>我当下所想的随心所欲也可以理解为随性而为。</p>
<p>随性而为，去做认为有意思的事情，把事情变得更有意思。有意思不是指好玩，而是想去关心关注的事情。我认为，这样才算内心上对一件事情的认同，人和事才算是相伴而成功。此般随性，唯有到达某境界，才可做到罢。</p>
<h1 id="如烟"><a href="#如烟" class="headerlink" title="如烟"></a>如烟</h1><blockquote>
 我坐在床前/望着窗外回忆满天/生命是华丽错觉/时间是贼偷走一切

<p>七岁的那一年/抓住那只蝉/以为能抓住夏天/十七岁的那年/吻过他的脸</p>
<p>就以为和他能永远/有没有那么一种永远/永远不改变/</p>
<p>拥抱过的美丽/都再也不破碎/</p>
<p>让险峻岁月不能在脸上撒野/让生离和死别都遥远</p>
<p>有谁能听见/我坐在床前 转过头看谁在沉睡/</p>
<p>那一张苍老的脸/好像是我紧闭双眼</p>
<p>曾经是爱我的/和我深爱的</p>
<p>都围绕在我身边/带不走的那些/遗憾和眷恋</p>
<p>就化成最后一滴泪/有没有那么一滴眼泪/能洗掉后悔</p>
<p>化成大雨降落在/回不去的街/再给我一次机会</p>
<p>将故事改写/还欠了他一生的一句抱歉/有没有那么一个世界/永远不天黑</p>
<p>星星太阳万物都听我的指挥/月亮不忙着圆缺/春天不走远</p>
<p>树梢紧紧拥抱着树叶/有谁能听见/耳际眼前此生重演</p>
<p>是我来自漆黑/而又回归漆黑/人间瞬间天地之间/下次我又是谁</p>
<p>有没有那么一朵玫瑰/永远不凋谢/永远骄傲和完美/永远不妥协</p>
<p>为何人生最后会像/一张纸屑/还不如一片花瓣/曾经鲜艳</p>
<p>有没有那么一张书签/停止那一天/最单纯的笑脸和</p>
<p>最美那一年/书包里面装满了/蛋糕和汽水</p>
<p>双眼只有无猜和无邪/让我们无法无天/有没有那么一首诗篇/找不到句点</p>
<p>青春永远定居在/我们的岁月/男孩和女孩都有/吉他和舞鞋/笑忘人间的苦痛/只有甜美</p>
<p>有没有那么一个明天/重头活一遍/让我再次感受/曾挥霍的昨天/无论生存或生活/我都不浪费</p>
<p>不让故事这么的后悔/有谁能听见/我不要告别/我坐在床前/看着指尖已经如烟</p>
<p>此时，心中尽是《如烟》。</p>
</blockquote>

<p>希望在生命最后的时刻，想到此处，诘问自己：“心中可否有遗憾，心中可否曾后悔？”的时候，可以给自己一个满意的答复，再安然离去。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>生活</tag>
        <tag>五月天</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH无操作自动掉线解决方法</title>
    <url>/ssh_persistent_connection/</url>
    <content><![CDATA[<p>解决思路有两种，一种是通过本地端向服务器端发送心跳包，另一种是服务器端向本地端发送心跳包。</p>
<h1 id="第一种，在本地端设置"><a href="#第一种，在本地端设置" class="headerlink" title="第一种，在本地端设置"></a>第一种，在本地端设置</h1><h2 id="在-windows-下以-Secure-CRT-为例"><a href="#在-windows-下以-Secure-CRT-为例" class="headerlink" title="在 windows 下以 Secure CRT 为例"></a>在 windows 下以 Secure CRT 为例</h2><p>在 Session Opinion 对话框中找到 Terminal 项，又有一个 Anti-idle 的 box，里面有两种方案，一种是每隔多少秒发送一个字符串，另一个是发送 NO-OP 指令（也就是空指令）。</p>
<p><a href="/wp-content/uploads/2016/02/fetch.png"><img data-src="/wp-content/uploads/2016/02/fetch.png" alt="捕获"></a></p>
<p>不过这种方法我没试过 hhhh。</p>
<span id="more"></span>

<h2 id="在-Linux-下"><a href="#在-Linux-下" class="headerlink" title="在 Linux 下"></a>在 Linux 下</h2><p>打开 ssh 客户端配置文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo vim <span class="regexp">/etc/</span>ssh/ssh_config</span><br></pre></td></tr></table></figure>

<p>找到如下代码消去注释符号，并且调整参数</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ServerAliveInterval</span> <span class="number">20</span></span><br><span class="line"><span class="attribute">ServerAliveCountMax</span> <span class="number">999</span></span><br></pre></td></tr></table></figure>

<p>含义是：每隔 20 秒向服务器发送一个心跳包，如果 999 次都失败，则断开连接 这种方法我也没试过 hhhh。</p>
<h1 id="第二种，在服务器端设置"><a href="#第二种，在服务器端设置" class="headerlink" title="第二种，在服务器端设置"></a>第二种，在服务器端设置</h1><p>打开 ssh 服务端配置文件</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">sudo vim <span class="regexp">/etc/</span>ssh/sshd_config</span><br></pre></td></tr></table></figure>

<p>找到如下代码消去注释符号，并且调整参数</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ClientAliveInterval</span> <span class="number">120</span></span><br><span class="line"><span class="attribute">ClientAliveCountMax</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<p>含义是：每隔 120 秒向客户端发一个心跳包，如果 10 次都失败，则断开连接 注意：在配置完以后不要直接关闭这个 SSH 连接，而是需要再打开一个 SSH 进行验证，以免配置错误导致 SSH 连接不到，那就麻烦了 我现在使用的就是这种方法，测试了几个小时，SSH 依旧保持连接。</p>
<blockquote>
<p>参考：<a href="http://www.coder4.com/archives/3751">http://www.coder4.com/archives/3751</a></p>
</blockquote>
]]></content>
      <categories>
        <category>技术</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>SSH</tag>
      </tags>
  </entry>
  <entry>
    <title>期末杂记</title>
    <url>/stories_around_the_final/</url>
    <content><![CDATA[<p>从哈尔滨（游记有空就写）归来，就到了期末月，因为之前基本没上过课，所以只能把各种学习无关的活动停掉，开始突击复习。所以呢，生活就规律起来——早出（其实也不早了）——午归——再出门——晚归——再出门——深夜归。</p>
<p>但是想法从来都不会停下来。甚至有时候大脑会被一些奇奇怪怪的想法掩盖，没法去认真复习功课。不过，最近的发现还真是很多呢！</p>
<p>先说说和牛的一个赌约吧（<a href="http://mcloudy.me/2015/12/31/2016%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E6%8C%91%E6%88%98/">mCloudy’s Blog</a>）。现在的生活已经逐渐地变味儿了，很多时候简简单单是为了活着，做事也不求完美，动不动就觉得好累。但是——2016，需要一些改变，就是让自己有激情地活着！重拾十几岁时候往对生活，对新鲜事物的激情和好奇！</p>
<hr>
<p>先说说今天中午的事儿吧，中午睡觉，但是没有睡着，就去看纪老师推荐的《重来》，发现这本书中的话很符合我现在的想法——脚踏实地。做事情，就拿创业来说把。创业不能一开始就想着未来会怎么样怎么样，没有投资人的投资就没法进行下去，一开始就想公司规模要做多大才算成功也不好。不是一种 Get Start 的方式，而类似一种 Start a Business 的形式开始。先把自己养活了，可以赚到钱，再慢慢想着下一步怎么走，应不应该扩大规模，用户到底是什么人。也没必要迎合所有用户，只要让和自己体验一致的用户喜爱就好。</p>
<span id="more"></span>

<p>所以，现在的激情，不能和十几岁一模一样了。十几岁的时候是空想，作什么事情都想着要成功，现在呢，要不仅考虑现实——活着，还要考虑有激情地活着。所以任务更艰难了一点点。但是也要完成呀！不然可得请牛国内一周游，这个嘛，，所以，一定呀有激情地活下去！</p>
<p>想到这里——很是怀念在做 Vliner 的时候我的小伙伴们——牛、柏舜、明杰、志鹏还有念远。团队分布在三个地区，说实话，发生的事情，比谈一场异地恋还多。为了一个目标前进，一起筹划未来，一起为了小的成功而欣喜若狂。但志鹏是对的，失败是一定的，少了根基，那里有未来，少了盈利，怎么谈公司！现在才领悟，我是后悔的。</p>
<p>如果某一天，大家能再聚到一块儿，那是什么样的情景？我一直在等那一天。如果现在柏舜来北京或者我去浙江，牛回国，志鹏无处不在掌控代码，我可能立刻选择休学一年，或者可能会变成两年，三年，错了，不能休三年，不管了，那就错下去吧。做自己喜欢的事情，还能养活自己，这就够了。</p>
<hr>
<p>很多年以来，我都是为了明天而活，完全忽略了今天。“明日复明日，明日何其多，我生待明日，万事成蹉跎。”这句诗在这里倒不是说拖延症，我想说，如果没有今天，纵使有千千万万明天，又有什么用？</p>
<p>对，又有什么用。第一个“有什么用”是我在来大学之前在空间里看见的一篇日志。那时大人们总会对我们说“喜欢那个姑娘有什么用，反正以后你们肯定会分开”“想你是谁从哪来到哪去有什么用，反正不吃饭就得饿死”之类云云，有用的只是好好学习，考一个好大学，找一个好工作。现在算是第二个吧，是说为了未来有什么用，未来的未来还是未来，无穷递归迭代下去，就是看不见现在。</p>
<p>有用的，首要是为了现在，其次才是为了未来。我要逐渐把状态从“活着”转向“生活”！每一天都是在生活！</p>
<p>未来的可能只是一个很大的方向，或者是国家主席，大公司 CEO 才去想，也是他们才有那么多信息能预测一些未来。我呢，作为一个小平民，过好现在，把事情做好，也就可以了。剩下的，就是每一天让自己开心，过得有激情，提高每一天的生活质量。未来会怎么样，不得而知，乐观期待就好了。</p>
<hr>
<p>说一下我接下来给自己的一个挑战吧——挑战遗忘。</p>
<p>室友们都说我是鱼的记忆，我会忘记很多事情，能记下来的都是印象深刻的梗概或者特点，细节很多已经不知道，特别是没有规律的东西——陌生人的名字、电话号码或者是一个什么奇怪的事情等等。</p>
<p>不能再这样下去，我要记住更多的东西，不仅仅是用大脑，更要用各种办法把获得的知识记下来。</p>
<p>现在有三样工具——奇妙清单、Onenote 和 Wordpress。在接下来的半年里我要尝试充分利用这三种工具记录我的获取到的信息和知识，包括看见的人或事，偶然得到的一些消息或者知识，读书时候的感想以及对一些事物的思考。</p>
<p>再者，就是背单词——为了可以看懂英文的图书和网站，可以和外国人正常交流。从放假开始，每天早晨起床之前坚持！</p>
<hr>
<p>再三挣扎之下，决定停止大创项目。一切都想通了，唯一不敢面对的，是纪老师。错大都在我，我无话可说。谓之自作自受也不为过吧。</p>
<p>更要反思一下。</p>
<p>做得最不好的，就是团队。我选择了我认为虽然水平不够但通过这次学习一定可以的人来 lead 团队。仅仅是我认为，大错特错。思来想去，在团队里，也没有可以带好团队的人，我当时为什么就没找一个可以带领团队有责任心的人组队呢！leader 选择错误，是我最大的过失。</p>
<p>方向选择，更错一步。眼高手低，错上加错。项目方向选择了最难的平台方向，可谓明知山有虎，偏向虎山行。而我又把一切想的非常简单，认为我们都可以实现。是大都可以实现，但是没想过时间成本，没想过学习成本。把一个事情一开始就想得很大，错得离谱。</p>
<p>最后一根稻草，就是半途怀疑。当做了一些以后，认为项目没有前景，需要改变方向，从学弟学妹那里接收到很多新点子之后，却又开始怀疑，一下子泄了气，也失去了兴趣——我没有兴趣哪怕一刻钟都做不下去。其余团队成员对这件事情也都如此吧，至少没人愿意把时间花在上面——没有了对项目未来的希望，甚至连期许都没有了。</p>
<p>所以，拖下去不如直接停掉。去年 12 月 19 日，晚上开完会，心里只有如释重负。结束了，终于结束了。</p>
<p>如果纪老师能看到：我希望找个合适的时间，当面对他说声对不起。</p>
<hr>
<p>到结尾了，整理一下最近的思考吧（关于《失控》、《零边际成本社会》和《链接》的思考之后用一篇文章专门来写）。</p>
<ol>
<li> 我所感兴趣的事情是之于事物的规律本身，而不是无聊的细节问题，如果要关注细节，也只有那些能决定规律的细节或者说是能引发异常的细节。所以，我的生活中也总是缺乏细节。所以在之后，要更多寻找有规律的事情，找到联系，不沉溺于细节之中。但也要加强记忆，细节也能体现很多规律。</li>
<li> 现在的云相较于四五年前，已经从一个概念性的事物变成了一个大众化的东西，人人每天都会接触到，而且可以廉价的使用。云把虚拟世界的计算变得更加通用化和个性化。那么现在的工业 4.0 是不是就像当年的云一样呢？工业的通用化一旦成熟，生产过剩的效果就会非常显著，商业的边际成本会进一步降低，那时候工业对世界的影响可能比现在的互联网还要大更多，我很期待。</li>
<li> 大一放寒假时候有一天在酒吧喝多了，志鹏跟我提出来，说现在的程序代码，离智能化，就只差一个概率因子了，我没太懂，但是也有点懂。但是前几天，真就有人通过贝叶斯学习算法，做出来了可以抽象理解图形的机器，还通过了图灵测试。（具体讨论见：<a href="https://www.zhihu.com/question/38440539">知乎：如何评价《Science》封面文章《通过概率规划归纳的人类层次概念学习》</a>和<a href="http://science.sciencemag.org/content/350/6266/1332.full">Science:Human-level concept learning through probabilistic program induction</a> ）现在我开始些明白那句话的含义，并且期待可以释放出 AI 的力量，那时候，我们不就当了一回上帝？（具体思考会在读书笔记里写一些）</li>
</ol>
<p>明天继续突击复习！Fighting！ 期待臻等我回去用鞭炮迎接我！</p>
<p><a href="/wp-content/uploads/2016/01/842502843107398693.jpg"><img data-src="/wp-content/uploads/2016/01/842502843107398693-300x169.jpg" alt="842502843107398693"></a></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>总结</tag>
      </tags>
  </entry>
  <entry>
    <title>北邮人论坛每日十大检索</title>
    <url>/ten_top_of_byr_bbs/</url>
    <content><![CDATA[<p>假期的刚好有空，就想去写一个爬虫练手，于是用了四五天的时间来完成了这一个小项目的搭建。</p>
<p>项目地址为：<a href="http://bbss.zhengzi.me/">http://bbss.zhengzi.me</a></p>
<p>具体一些呢，就是后台采用了 Python 对北邮人论坛的十大进行抓取，交给数据库，然后用前端展示出来。</p>
<p>后台会在每天中午和凌晨抓取两次论坛的数据，前端这里可以查询到最新的论坛十大数据。</p>
<p>具体的之后再行补充，如果有问题或者更好的建议可以直接在下方留言。</p>
<hr>
<p>更新： 在评论区也找到了一个和我做的事情差不多的小伙伴，做的也很赞，在这里推荐一下 <a href="https://mathpretty.com/9164.html">https://mathpretty.com/9164.html</a></p>
]]></content>
      <categories>
        <category>应用</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PHP</tag>
        <tag>应用</tag>
        <tag>北邮人论坛</tag>
      </tags>
  </entry>
  <entry>
    <title>2016的最后一天，还是来说点什么</title>
    <url>/the_last_year_in_2016/</url>
    <content><![CDATA[<p>16 年的确有许多不会轻易被忘记的事情。整体来讲，今年的整体节奏相比去年是慢了些许，闲暇时间多了一些，但是收获一点也不少。</p>
<h1 id="三个-Flag"><a href="#三个-Flag" class="headerlink" title="三个 Flag"></a>三个 Flag</h1><p>今年开年就立了三个 Flag，一个是在<a href="/stories_around_the_final">期末杂记</a>中提到的，重拾自己对生活得激情和好奇；另一个是在<a href="/leave">离</a>中提到的，要有存款，要经济独立；最后一个在 <a href="/readingplan">2016 读书计划</a>中提到的新年书单。</p>
<p>对于第一个，我认为完成度比较高。我开始去思考每一件看似合理而规矩的事情，也开始去打量生活中每天出现的新的事物，我开始变得 Open；开始试着理解小朋友们聊天，琢磨它们的心思，认识他们的世界；我也开始不仅仅追求效率，开始有了生活，甚至偶然的机会，我试着去了解以前敬而远之的艺术，开始去思考其背后的存在论。从年初经常被人叫“大叔”，到最近很多人认为我的心态很年轻，我真的变化了许多。</p>
<p>第二个 Flag 就完成的不怎么好了。到现在为止，虽然每个月月都多少有些收入，但离经济独立还有一些距离。我也不想讲太多的原因，明年的情况一定会比今年好很多。</p>
<p>最后一个目标的完成度也不高，离截止日期还有两个月，大概只完成了三分之一的阅读量。除了有几本书是因为当时选择得不是很合理，看了不到一半就放弃了之外，其他的原因，就是太懒。</p>
<span id="more"></span>

<h1 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h1><p>我还有点记得年初决定是否要读研时候内心强烈的挣扎。我拿了一大张白纸，每天想到一点就写一点，把读研与否的利弊都写到纸上一条条去对比分析。但是用这种方法没有得出所以然，于是决定跟随内心——我想去试试做偏 Research 的事情的感觉，过了这个村，可就没这个店了。</p>
<p>看了一些资料后，我决定在网研院的智能组待一阵看看，于是四月份到六月份进行了为期两个半月的实习。嗯，老板很棒，除了做的事情还是太偏工程。不过可以考虑。</p>
<p><a href="%E5%9C%A8%E6%99%BA%E8%83%BD%E5%AE%9E%E4%B9%A0%E6%97%B6%E5%80%99%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B9%9F%E6%98%AF%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E8%81%9A%E9%A4%90"><img data-src="/wp-content/uploads/2017/01/913318504646938843-e1483208233501.jpg"></a></p>
<p>在智能实习时候的第一次也是最后一次聚餐</p>
<p>六月初，我便投入了前些日子还很不屑的考研大军之中。但还没来得及经历太多，就在九月份收到了保研的消息。这个时间点对我来说非常尴尬，却也是难得的体验。当时的情况是：我一手拿简历，一手去记录找过的和要找的老师。老司机光光白天带我刷楼，晚上请我吃饭。就这样，那几天我几乎刷遍了教二教三和整个科研楼。因为一些机缘巧合，在经历了面试以后，我还算比较顺利地进入了 FNL（未来网络实验室）。</p>
<p>在 FNL，一切都是重头开始。好在实验室的气氛非常棒，老师们也都很年轻有成，所做的事情也不是那么偏向应用，更多的还是去做一些世界上（可能）还没有的东西。这种感觉，我很喜欢！</p>
<p><img data-src="/wp-content/uploads/2017/01/318791579649752680.jpg">FNL 小灰楼分部一瞥</p>
<p>到这里，接下来三年的生活基调就基本定了下来。</p>
<h1 id="技能点"><a href="#技能点" class="headerlink" title="技能点"></a>技能点</h1><p>JZSOpenProj 没有怎么坚持下来，因为今年产出的代码本来就不多，质量也不高，能拿出来开源的东西就更少了。</p>
<p>总体来说，今年语言的基调还是定在了 Python、PHP 还有 JavaScript，不过技能树又新加了 C#和 Java，硬是要算的话，还有最近在看的 P4。算法和操作系统的硬伤也都已经开始着手解决了。 开发层面的话，我逐渐变成了 Full Stack：会前端，懂后台，逼到绝处还能写一些安卓或 UWP，甚至简单的数据分析也都可以顺手完成。 我也用了一年的时间，变成了 Hackathon 老司机，掐指一算我在一年里参加了大大小小五场 Hackathon。 年初是的<a href="http://vline.zhengzi.me/">Vline</a>是 HackPKU 的成果，除去我们的产品，记忆最深的是凌晨四点树影婆娑还泛着冷光的未名湖；然后是微软夏令营，第一次接触到了 HoloLens，接下来的几天，我完完全全被 AR 带来的效果所震撼；之后是在国子监举办的品玩 Hackathon，我想我很有权利回答在古香古色的建筑里写代码是一种怎样的体验；最有意思的是 Office 的<a href="/devday_asia_2016">Dev Days Asia</a>，我也特别想回答和一群很有趣的外国评委（特别是很逗的印度小哥）交流并抱回一台平衡车是一种怎样的体验；最后是微软俱乐部办的 BeijingHackathon，这次 Hackathon 种，我见到俱乐部主席团里每个人的成长，心中也是百感交集。</p>
<p><a href="/wp-content/uploads/2017/01/94198206647893469.jpg"><img data-src="/wp-content/uploads/2017/01/94198206647893469.jpg"></a></p>
<p><a href="/wp-content/uploads/2017/01/102046974300542631.jpg"><img data-src="/wp-content/uploads/2017/01/102046974300542631.jpg"></a></p>
<p><a href="/wp-content/uploads/2017/01/166694073926352282.jpg"><img data-src="/wp-content/uploads/2017/01/166694073926352282.jpg"></a></p>
<p><a href="/wp-content/uploads/2017/01/187250305950193296.jpg"><img data-src="/wp-content/uploads/2017/01/187250305950193296.jpg"></a></p>
<p><a href="/wp-content/uploads/2016/11/1493f428f1a1dd3337730108598b3052.jpg"><img data-src="/wp-content/uploads/2016/11/1493f428f1a1dd3337730108598b3052.jpg"></a></p>
<p>五场 Hackathon</p>
<p>另外一件有意思的事情是在 HackPKU 的空暇时间，经过润哥、晓锋和健东一众的耐心指导，我终于了了一件儿时的心愿——学会自行车！之后作为新手，被老司机们带去过 P 大，北航，还有天安门，甚至还在养马岛上兜了一圈。</p>
<p><a href="/wp-content/uploads/2017/01/576906444040133006.jpg"><img data-src="/wp-content/uploads/2017/01/576906444040133006.jpg"></a>天安门夜行</p>
<h1 id="旅行"><a href="#旅行" class="headerlink" title="旅行"></a>旅行</h1><p>年初是哈尔滨。主题不是寒冷，而是神奇。我第一次在冰天雪地的世界里吃到了看起来挺热乎的冰糕，第一次被 iPhone 冻关机以后怎么找到回酒店的路的问题困扰，我也看到了比一幢房子还要高还大的冰雕，和几位在冰天雪地里让我很暖心的老同学。哈尔滨的世界仿佛就像是一场梦，梦里的冰天雪地，却怎么也感受不到寒冷。</p>
<p><a href="/wp-content/uploads/2017/01/798825629742946303.jpg"><img data-src="/wp-content/uploads/2017/01/798825629742946303.jpg"></a>神奇的巨大冰雕</p>
<p>天津因为是二刷，所以没有了最开始的新鲜感。一行见到了之前在 Hackathon 中遇到过的老朋友，还认识了几位前端大牛。最神奇的莫过于一个老年人密度极高的公园，我甚至都没法挤进去，从外面看，每个人都举着或者在胸口刮着一张牌子，写道类似“xxx，女儿，28 岁，博士毕业，北京户口，有房有车”。我心想，还好兰州并没有这种地方（或许是我不知道？大雾）。</p>
<p><a href="/wp-content/uploads/2017/01/96764664776605120.jpg"><img data-src="/wp-content/uploads/2017/01/96764664776605120.jpg"></a>天津征婚一条街</p>
<p>烟台的主题是大海。待了一周，几乎每天的活动都在面对大海。我不会忘记烟台山上冰心的故居和山下那家被画在画里的滨海咖啡屋；不会忘记在波涛汹涌的大海旁开一瓶白兰地畅谈相对论；不会忘记几乎熬了一夜去看海上日出，然后抓了好几只派大星回去；不会忘记骑车在海岛逛了一周，回去之后皮肤黑了不止一圈。</p>
<p><a href="/wp-content/uploads/2017/01/221066370220165073.jpg"><img data-src="/wp-content/uploads/2017/01/221066370220165073.jpg"></a></p>
<p><a href="/wp-content/uploads/2017/01/500367780884143799.jpg"><img data-src="/wp-content/uploads/2017/01/500367780884143799.jpg"></a></p>
<p>烟台海边二景</p>
<p>和黄海相对的，是腾格里沙漠。它们的相似是无边无垠，吞没一切。大海旁有沙滩，而沙漠旁也有黄河。两者一阴一阳，恰为互补。而我又极为幸运地在一个月内一一体会了一番。可能因为小时候生活环境的原因，对比下来，我更喜欢沙漠。沙漠多了份质朴，也更凸显出生命的韧劲与厚度。</p>
<p><a href="/wp-content/uploads/2017/01/682573307158504644.jpg"><img data-src="/wp-content/uploads/2017/01/682573307158504644.jpg"></a>茫茫腾格里</p>
<p>最后一程是杭州。自读了柳永那句“烟柳画桥，风帘翠幕，参差十万人家”，我就一直对于杭州有一种十分向往但又因为害怕见到会失望而不敢去看纠结。赶上去开会，就破釜沉舟一睹西湖的芳容。不料，我的心情也真的像是坐上了一台过山车。刚到杭州，雾霾很重，游了一圈西湖，感觉就是是在雾霾天去了一趟颐和园一般无趣。直到最后那天，天朗气清，我们沿着岳飞庙一路走过，所见之景也皆为情。突然就有了游在画中西湖之觉，有美景，有感情，更有文化。现在回想起来，仍是意犹未尽。</p>
<p><a href="/wp-content/uploads/2017/01/892862531125135770.jpg"><img data-src="/wp-content/uploads/2017/01/892862531125135770.jpg"></a>西子湖旁的幽涧</p>
<h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>今年最幸运的一件事儿，就是找到了一点生活。</p>
<p>大概从去年开始，我的生活就变成了只有每日的代码＋例行的沟通。每日忙忙碌碌，忙完这一波一定还会有下一波。这种状况大约持续到了今年夏天，开始准备考研是一个关键的转变。节奏慢下来以后，我发现其实有身边有很多朋友都很重视每天吃些什么，或者什么时候买一件新衣服，甚至还会挑剔杯子上的一个图案。我一开始从不解，到逐渐去关注，了解。</p>
<p>这个夏天，还做了一件令我以后绝对不会再后悔的事情——去听了一场五月天的演唱会。讲真，我从来没有如此 High 起来过。</p>
<p><a href="/wp-content/uploads/2017/01/920536501655363836.jpg"><img data-src="/wp-content/uploads/2017/01/920536501655363836.jpg"></a>五月天——要疯狂到日出</p>
<p>最近我也开始去尝试着了解艺术。我感受到的世界不再是只有技术与资本那个冷冰冰的存在，还有文化与艺术这种关乎一个人存在的真理。这些才是更重要的事情，需要去发现，去感受。我逐渐懂了一些以前总也看不懂的《谈美书简》，也更爱上了更像是一个长者和你谈心的宗先生的《美学散步》。前两天在国博里，我恰巧赶上了最后一天的中日韩明清时代艺术作品展，见到了许多大师的真迹。特别是郑板桥的竹子给我印象极深，看见竹子，就记起了当时课文中所说的“胸中勃勃，遂有画意”，明白了为何“手中之竹又不是胸中之竹也”。</p>
<p>当然，我现在最关注的事情是大一的创新创客教育。从我开始跟纪老师去宏福举办一场创客马拉松开始，就一直在想，我为什么居然会这么热心于这件事情。在和很多同学聊过以后才明白，大概是同理心所致。如果我大一时候有很多人同学都和我一起玩做开源硬件，我或许也不会抛下高中时候的底子，去彻底转去做 Web 开发吧。我从心底里还是想去帮他们一把，让他们远离团委和城郊给他们带来的桎梏，找到自己大学生活应该有的样子。我真心地希望学弟学妹们可以好好经历一次大学，找到真实的自己。纪老师在这里，真的做了很多事情，不过有太多的东西，需要经历才能理解。等过两年，如果他们还能记得纪老师的一些话的时候，他们应该也会像我一样来做这些事情。有一些思路，或许等过两天，我会专门写一片博文来阐述出来。</p>
<p><a href="/wp-content/uploads/2017/01/94198206647893469.jpg"><img data-src="/wp-content/uploads/2017/01/94198206647893469.jpg"></a>宏福校区信通院创客马拉松</p>
<p>最后想说，以后回家的日子会越来越少，一定要争取一切机会多陪陪家人，让他们每天都过得开开心心。写到这里，真的好想回家~（作哭脸）</p>
<p><a href="/wp-content/uploads/2017/01/734707548342899176.jpg"><img data-src="/wp-content/uploads/2017/01/734707548342899176.jpg"></a>兰州黄河铁桥夜景</p>
<h1 id="团队"><a href="#团队" class="headerlink" title="团队"></a>团队</h1><p>我管理的和我参与的团队，一年中的变化也非常大。</p>
<p>先谈谈微软俱乐部吧。我记得上半年想的最艰难的事情之一，就是俱乐部的换届问题。慎之又慎思之又思，才决定了下一届主席团的团队架构。现在看来，当时的思考到的问题几乎全都命中，但同时，他们也让我有了非常多的惊喜，算是一件挺圆满的事儿。</p>
<p><a href="/wp-content/uploads/2017/01/123490638559305549.jpg"><img data-src="/wp-content/uploads/2017/01/123490638559305549.jpg"></a>俱乐部团队小合照</p>
<p>Debug、VLine、小黑，从创新杯一路走到现在，队名换了好多，我们也算是做项目的老司机团队了。虽然以后就难凑齐，但是呐，聚是一团火，散是满天星~闲了轮流坐庄请客吃饭的事儿肯定不能落下。</p>
<p>弹幕派这边也有大概半年了。从最开始我和志龙到现在有了八九个小伙伴，也是非常不容易。团队里的每个同学都非常厉害，出去可以独当一面。但是如果各自为战，那一定不会有今天的弹幕派。我印象最深的事儿呢，就是从一开始大家坐在一起没人引起话题的话一句话都没有，到现在（几乎）每周四大家坐下可以随随便便聊一个晚上，其实我们每一个同伴，都像小王子的那朵玫瑰花一样，相遇，然后互相驯服。有机会做一个会有成千上万用户使用的软件，的确是很有意思的一件事儿呢！</p>
<p><a href="/wp-content/uploads/2017/01/97779876272820999.jpg"><img data-src="/wp-content/uploads/2017/01/97779876272820999.jpg"></a>中秋之夜的 Pie Team（手里拿的是月饼，并不是在表白）</p>
<p>最后聊到乐享其约和趣健跑。成立公司以后这段时间，我们成了比赛和 PPT 专业户。虽然被受鄙视，但也还算顺利地拿到了各路奖项。所以，我们是赶上了一个好的时候。但空有 BP 和演讲，研发和市场还远远跟不上。好在，现在的思路转换得很棒，甚至好得有点超过我的预想。明年，乐享奇迹加油！</p>
<p><a href="/wp-content/uploads/2017/01/88469527649847257.jpg"><img data-src="/wp-content/uploads/2017/01/88469527649847257.jpg"></a></p>
<p>本科阶段的先后两家公司</p>
<h1 id="再立-Flag"><a href="#再立-Flag" class="headerlink" title="再立 Flag"></a>再立 Flag</h1><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=411214279&auto=1&height=66"></iframe>

<p>的一年里，对合适的人和合适的事情，投入更多的真诚而非套路。</p>
<p>继续保持对世界的好奇心，扩大阅读量，提高生命的纵深。</p>
<p>翻了一番照片，看见了去年和师兄师姐一起拍的毕业照，现在许多人都大概已经天各一方，再难想见。自己也还有半年就本科毕业了，一定要珍惜珍重圈子里的每一个人。</p>
<p><a href="/wp-content/uploads/2017/01/577361009737834491.jpg"><img data-src="/wp-content/uploads/2017/01/577361009737834491.jpg"></a></p>
<p><a href="/wp-content/uploads/2017/01/794455036999440369.jpg"><img data-src="/wp-content/uploads/2017/01/794455036999440369.jpg"></a></p>
<p>16 年夏天和师兄师姐们的毕业合照</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>年终总结</category>
      </categories>
      <tags>
        <tag>年终总结</tag>
      </tags>
  </entry>
  <entry>
    <title>解决IOS中微信浏览器软键盘弹出导致的若干Bug</title>
    <url>/the_solution_of_bugs_on_wechat_in_ios/</url>
    <content><![CDATA[<h1 id="问题-1-键盘弹起后会遮挡键盘上方的内容"><a href="#问题-1-键盘弹起后会遮挡键盘上方的内容" class="headerlink" title="问题 1 键盘弹起后会遮挡键盘上方的内容"></a>问题 1 键盘弹起后会遮挡键盘上方的内容</h1><p>在微信浏览器中，如果需要模拟一个类似微信聊天的窗口，那么一般情况下需要将输入框使用 fixed 定位放置在页面最下方。就像这样：</p>
<p><a href="/images/posts/the_solution_of_bugs_on_wechat_in_ios/wechat-ios-bug1.png"><img data-src="/images/posts/the_solution_of_bugs_on_wechat_in_ios/wechat-ios-bug1.png"></a></p>
<p>但是，在 IOS 中的虚拟键盘和 Android 里是不同的。在 IOS 中，虚拟键盘弹出以后，键盘上面的输入提示会比键盘弹出慢半拍，所以就会导致输入法的提示框将正常页面挡住的情况。</p>
<span id="more"></span>

<p>这时候，就需要在键盘弹出后，等待一段时间（几百毫秒），然后再将页面的滚动条进行调整，就可以让页面弹到键盘之上。</p>
<p>假设页面布局如下（使用了 Vue 框架），其中 Dialogues 组件是可以滚动的聊天内容，PageFooter 是使用 fixed 定位在页面底部的输入框：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;index&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;mainPanel&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;dialogueContent&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Dialogues</span>&gt;</span><span class="tag">&lt;/<span class="name">Dialogues</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">PageFooter</span>&gt;</span><span class="tag">&lt;/<span class="name">PageFooter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后，就可以在监听到软键盘打开事件（比如 dialogueContent 中 input 元素的 onclick 或者 onchange 事件）后，执行下面的语句，让 dialogContent 的滚动条向下滚动,这样里面的内容就不会被覆盖了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> dialogueContent = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#dialogueContent&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    dialogueContent.<span class="property">scrollTop</span> = dialogueContent.<span class="property">scrollHeight</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        dialogueContent.<span class="property">scrollTop</span> = dialogueContent.<span class="property">scrollHeight</span></span><br><span class="line">    &#125;, <span class="number">250</span>)</span><br><span class="line">&#125;, <span class="number">250</span>)</span><br></pre></td></tr></table></figure>

<p>至于为什么要触发两次呢，是因为 IOS 手机种类比较多，从五六年前 iPhone5s 到最新的 iPhoneXR 都有人在用，每种手机的响应速度也各不相同，有些手机可能在第一个 250ms 内还没有完成键盘弹出的工作，所以可以再加一个定时器来兼容旧的手机。</p>
<p>但问题也依旧存在，就是 fixed 定位的输入框在软键盘弹出以后就不会像 Android 一样固定在页面底部，而是可以上下滑动，类似于 absolute 定位。这时，可以将 body 设置为 absolute 定位，然后再将 MainPage 使用 absolute 定位于 body 底部。</p>
<h1 id="问题-2-在虚拟键盘收起以后-body-定位的问题"><a href="#问题-2-在虚拟键盘收起以后-body-定位的问题" class="headerlink" title="问题 2 在虚拟键盘收起以后 body 定位的问题"></a>问题 2 在虚拟键盘收起以后 body 定位的问题</h1><p>紧接着，第二个问题就出现了。在点击虚拟键盘右上角的“完成按钮以后”，页面下方并没有回弹，而是定在了原来软键盘上方的位置，必须在页面上滑动两下才可以触发回弹。（特别是在大屏的 IOS 手机上）</p>
<p>大概是这样：</p>
<p><a href="/images/posts/the_solution_of_bugs_on_wechat_in_ios/wechat-ios-bug2.png"><img data-src="/images/posts/the_solution_of_bugs_on_wechat_in_ios/wechat-ios-bug2.png"></a></p>
<p>而在将 body 设置为 absolute 以后，情况更加离奇。页面 UI 是回弹了，但是触控事件响应的位置是没有回弹的，依旧是软键盘打开区域的上方。解决方法同样是必须在页面上方华东两下才能回弹。</p>
<p>大概是这样：</p>
<p><a href="/images/posts/the_solution_of_bugs_on_wechat_in_ios/wechat-ios-bug3.png"><img data-src="/images/posts/the_solution_of_bugs_on_wechat_in_ios/wechat-ios-bug3.png"></a></p>
<p>最开始的想法是去监听 resize 事件，如果软键盘收回，就强行调整 body 的高度，但是发现软键盘的弹出和收回并不会触发该事件，只得作罢。</p>
<p>最终，找到了一篇解决 <a href="https://www.codercto.com/a/43883.htmlshtml">类似问题的文章</a>，才找到了解决方案。</p>
<p>大致思路就是在键盘收回以后，主动触发浏览器对页面的重绘操作。如何进行呢？只需要在监听到 onblur 事件以后，让页面滚动到原来的位置即可。</p>
<p>比如，组件模板中的 HTML 为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;发送内容&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span> @<span class="attr">blur</span>=<span class="string">&quot;resizeWindow&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>然后可以在 JS 的 methods 中添加一个函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">resizeWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span> = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，输入框在失去焦点以后会触发页面的重绘，刚刚的问题就随之而解了。</p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>微信</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>淡蓝色的总是夏</title>
    <url>/the_summer_is_light_blue/</url>
    <content><![CDATA[<p>在蝉声愈来愈热的时间，写下一首淡蓝色的文字，让自己冷下来。搓搓手，拿出耳机，布拉格小调，仿佛又来到了每每出现的那座天空之城。</p>
<p>这蓝色并不是诺基亚，它已经过去了，迷人的湖蓝色恨不得消失得像是变了一种迷人，再也无法魅惑于我。</p>
<p>踯躅，不知如何落笔，播放器适时地切到了白马非马。歌儿简单地唱出来让人难免有些被欺骗的感觉，可我就是要任性地每每都要唱这首破坏气氛的歌。不过，他，他们，她，她们，也不在了。</p>
<p>无奈，闭上眼睛，放大音量。</p>
<p>背景画面回到那个星光装满明信片的书橱，透过丁达尔式的灰尘，落到榻榻米上的。。</p>
<p>空间？对，那也是在天空之城。多是龙猫，还是哆啦 A 梦？当时的我喜或悲不得而知，只是会心地笑了。</p>
<span id="more"></span>

<p>白银饭店少了初遇民谣的感动，却听出了 R&amp;b 的感觉，原来是思维模糊到了飞蛾。神游到了挚友的名片，早已没有了飞蛾，对，很不巧，它出现在日光灯上了，被抓到，拎起来，用力抛向了教四楼。</p>
<p>看到包子兄的言语，游弋到吾曾为琴痴，如今狂热几尽，只打坐静赏。听到便知吾再也离不了瑶山半步。仙乐渺渺，乐哉之至。</p>
<p>就算不周山，也有崩塌的那天。</p>
<p>所以鱼的记忆只有七秒，她应该早就忘记了那个时刻吧。可是她却让一片叶子代替她活在这个世界，只因叶子是一只不会飞翔的翅膀啊。</p>
<p>我想每个人也是抱着这样的使命贪恋地来到这个世上的吧。希望在另一个世界，一切安好。</p>
<p>在吃到第三颗猫饼干时，说起夏天是装在贝壳里的心事。一下子就想到了蒜蓉蒸扇贝，吃掉一颗，某个人的心事就少掉几分，好被华丽热烈的舞曲包围。</p>
<p>好挤，好热。</p>
<p>不如抬起头，逃过傻瓜一样的悲伤，丢下倔强，去地图上每一个标记的地点甘心流浪。找寻每一位故人，聊聊最近，吃一盏茶。</p>
<p>嗯，不如吃茶去，淡蓝色的花茶。</p>
<p>从书橱中乱乱翻，找到了老师从家乡带来的苦荞茶，一盏苦茶，味冷冽，性清凉，山沟沟里的感觉，我喝醉了。</p>
<p>不过，今天不需要。</p>
<p>上天赏赐了一场大雨，一道惊雷过去，仿佛又见了小雪那天。反思，原来，认真的，不是不能改变。</p>
<p>只有，昂首，走向前。</p>
<p>完。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title>流浪地球——中国科幻电影的开章</title>
    <url>/the_wandering_earch_the_genesis_of_chinese_fiction/</url>
    <content><![CDATA[<p>自昨天下午看完《流浪地球》以后，内心久久难以平静。闭上眼睛后，大脑中出现的是流浪地球的主题曲《带着地球去流浪》和地球飞临木星时候大气交汇时那种磅礴而又难以用语言形容的场景。</p>
<p>这首歌里，一面是曹操的《观沧海》，描述了人类面对这个世界所发出的赞叹，描述出了大好河山的雄伟壮丽。而另一方面，又进行了古今对比，更体现出这场星际旅行的悲凉与无奈。伴着这首歌，我就知道必须要写些什么了。</p>
<span id="more"></span>

<iframe border="0" marginwidth="0" marginheight="0" src="//music.163.com/outchain/player?type=2&id=1341939931&auto=1&height=66" width="380" height="80" frameborder="no"></iframe>
（如果不能播放可以点击[这里](http://music.163.com/#/m/song?id=1341939931)跳入网易云音乐播放）

<h1 id="回忆"><a href="#回忆" class="headerlink" title="回忆"></a>回忆</h1><p>不知不觉，我进入了一段回忆，我可能是在想我是如何与科幻结缘，我又是对《流浪地球》有着怎样的期盼。</p>
<p>第一次开始对太空和空间科学感兴趣，是源于小学时候在 Windows98 电脑中的一个太空主题。我的印象很深，它的屏幕背景是由一个宇航员和一个太空站构成。桌面上的图标都被改成了星球的样子，而屏幕保护更是让宇航员和太空站动了起来。我在网上找到了一个动图：</p>
<p><a href="/images/posts/the_wandering_earch_the_genesis_of_chinese_fiction/windows_98_space.gif"><img data-src="/images/posts/the_wandering_earch_the_genesis_of_chinese_fiction/windows_98_space.gif"></a></p>
<p>每次从老旧的 CRT 显示器中看到这个桌面，我就仿佛置身于浩瀚缥缈的宇宙之中，一面是我所向往的科学殿堂，另一面是置身于宇宙中的无穷之美。</p>
<p>之后，大概是很多年之后，我逐渐对物理学有了很深的兴趣，痴迷于《果壳中的宇宙》和《时间简史》中描述的宇宙的本质、宇宙的演变和宇宙的图景。</p>
<p>另一方面，我也开始对科幻电影感兴趣，看了许多有有关于宇宙的科幻的电影：《星际穿越》、《星际迷航》、《地心引力》、《月球》、《火星救援》、等等等等。《星际穿越》中那个空旷无比的全景宇宙，以及在宇宙中硕大无比（像 IE 图标一样）的黑洞，一再地震撼着我的心灵。</p>
<p><a href="/images/posts/the_wandering_earch_the_genesis_of_chinese_fiction/Interstellar_black_hole.jpg"><img data-src="/images/posts/the_wandering_earch_the_genesis_of_chinese_fiction/Interstellar_black_hole.jpg"></a></p>
<p>再之后，就是接触到了《三体》的时候，那种激动到在期中考试前一天晚上彻夜阅读的心情，到现在都难以忘记。在看完三体以后，大呼过瘾，所以我又接二连三地去读大刘的其他作品。《球星闪电》、《流浪地球》、《乡村教师》、《赡养上帝》，这些都是读过就很难忘记的好作品。</p>
<p>而在前几年我又听到《三体》已经开机的声音，当时的心情是忐忑大于期望，我很担心这么宏伟的一个科幻世界被电影给毁掉，都不如 B 站 UP 主文曰小强用别的电影剪辑出的<a href="https://www.bilibili.com/video/av8370807">《速读三体》</a>耐看。好在最后电影流产，我长舒一口气。</p>
<p>同样，在去年夏天首次听到《流浪地球》即将上映的时候我又是捏了一把汗。直到去年下半年来，随着电影的预告片一部一部地放出，以及看过电影的人对电影的评价都趋于正面，而且还有大刘作为监制，吴京也宣布加盟，我的心态逐渐从揪心转为期待。</p>
<p>随着主题曲《带着地球去流浪》及 <a href="https://music.163.com/#/mv?id=10850278">其 MV</a> 的放出，我对电影的画面彻底放心了，唯一的悬念就是剧情。</p>
<h1 id="说回电影"><a href="#说回电影" class="headerlink" title="说回电影"></a>说回电影</h1><p>回忆告一段落，现在就分几个维度来说说我对电影的感受。</p>
<h2 id="视觉效果"><a href="#视觉效果" class="headerlink" title="视觉效果"></a>视觉效果</h2><p>从预告片到正片里的几乎所有视觉效果，都完完全全地震撼到了我，放眼其它国产片的特效，和《流浪地球》相比，无出其右。在我的感观中，电影已经达到了好莱坞的水准。</p>
<p>特别是在电影中看见地球的大气被木星捕获时候的画面。一方面，地球发动机喷射出淡蓝色的粒子流，另一方面，地球的大气又和木星的大气进行了交融。那时我才真的感受到木星和地球体积的对比。我想，站在地球上，看见如此庞大的一个星球完全占据了整个天空，那种压抑感、对无尽和死亡的恐惧以及在得知地球即将解体的消息后的无助是难以言表的，只借助用这样的画面呈现出来。</p>
<p><a href="/images/posts/the_wandering_earch_the_genesis_of_chinese_fiction/earth_and_jupiter.png"><img data-src="/images/posts/the_wandering_earch_the_genesis_of_chinese_fiction/earth_and_jupiter.png"></a></p>
<p>另一个让我感到很震撼的画面是电影开始时候，镜头从车队的特写一直向上拉动，到了华北平原，又到了行星发动机，最后到了宇宙上空的领航者号空间站。每一个画面中都充斥着那种苏联式的巨型机械感，让我非常兴奋。</p>
<p><a href="/images/posts/the_wandering_earch_the_genesis_of_chinese_fiction/frame_in_movie.png"><img data-src="/images/posts/the_wandering_earch_the_genesis_of_chinese_fiction/frame_in_movie.png"></a></p>
<p>其实这里的画面又让我有了一些游戏感，很像《红色警戒》2 或者 3 中雪天场景中的苏联。有一阵儿对红警入迷很深，做梦梦到的都是里面的场景，和电影中的十分相似。所以看到这里，让我十分惊诧，没想到梦中的画面居然在这部电影中被看到了。特别地，在最后刘启赶往苏拉威西转向发动机的时候，他的车子开入一个底座，然后底座开始旋转，这不就是红警 3 中的矿车嘛！</p>
<h2 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h2><p>不得不说，大刘给流浪地球所设定的如此宏大的世界观给了电影很大的发挥空间。电影中的这一段地木相会在书中花了可能不到一页的笔墨。但是通过合理的剧情拓展，已经可以撑得起一部电影了（甚至还因为控制时间被剪辑掉了一部分）。</p>
<p>可能就是受到剪辑的影响，电影前一小段的剧情进展太快，很多事情都没有交代。比如刘启为何要离家出走，妹妹为何也想出去看看，这些年为何父子产生了这么大的矛盾，都没有交代清楚。有些剧情虽然可以脑补，但是多少会让人在现场的时候感到疑惑或者是突兀。不过，从他们兄妹两人踏出地下城电梯门的那一刹那，一切节奏都恢复了正常。</p>
<p>而剧情中令人印象最深的不是抢救火种，不是太空行走，也不是重启发动机，而是运载车启动时不断重复的那几句话：“道路千万条，安全第一条；行车不规范，亲人两行泪。”由于其严重的不押韵，一度让我听得百爪挠心。但是随着剧情的推进，这句话也逐渐融入了更多的情感，特别是在“姥爷”变成“冰雕”之后，在听见这句话，已经是对“老东西”的那种怀念。</p>
<p>另外，在电影最后还给了一个很大的彩蛋。透过主角的视角，可以看见地下城中有人喊着“还我阳光”的口号在进行游行。我立刻就想到原著中反派认为流浪地球计划是一个谎言，于是发生暴乱，占领了地球发动机的中控室，并将流浪地球计划的领导人都执行了最冷酷的“冻刑”。这是不是说明之后还会有《流浪地球 2》上映呢，内心又燃起了很强的期待。</p>
<h2 id="一些有趣的点"><a href="#一些有趣的点" class="headerlink" title="一些有趣的点"></a>一些有趣的点</h2><p>整场电影都的基调都非常刘慈欣，在电影中，集体主义和生存主义被体现的淋漓尽致。比如，在地球停止自转后，地球上的人口锐减了一半（这不就是灭霸嘛），而进入地下城也需要抽签决定，如果没有抽到签，在地表的冰天雪地中能够存活下来的人怕是寥寥无几。但是电影有正当的理由——为了更多人，为了整个人类的生存，必须这样做。这种做法对于自由、平等、博爱所建立的西方价值观是一个颠覆，许多人怕是也无法接受这样的设定。</p>
<p>是的，我们会为了大多数人以及我们的子孙后代牺牲另一部分人。但是，如果按照好莱坞的套路，最后不会选择带着地球离开，而是带着人类文明的种子（也就是火种计划）离开。这样，活下来的可能就不是地球上的数万万人，而是领航者号空间站上的这些人。这样就人人平等了么？文明得以延续的基础是整个人类的大社会。如果只剩下空间站上的这些人，在他们离开的那一天，可能就已经不是人类了。</p>
<p>第二个是真实，非常的真实。在救援队试图借助电梯从峡谷中向上方运送火石的时候，一个队员为了救爷爷，被掉下的电梯活活砸死，而爷爷却也在被救后的几分钟内，因为衣服漏气，导致氧气消耗殆尽，最后自行解开头盔，成为了一座冰雕。队员的死并没有换来爷爷的活，而爷爷的死也并没有激发刘启“拯救人类”的斗志。这样的例子还有很多，比如随处可见送火种的人成为了冰雕。他们的死亡都几乎是没有任何意义的。电影脱离了必须要给死亡安上一个意义的俗套，也没有了失去了什么必定会得到什么的“真理”，让观影体验更加的真实。</p>
<p>另一个有意思的地方是“饱和式救援”。着同样也超越了西方模式化的超级英雄电影。</p>
<p>在那一类的电影中，一定是主角与家人不和，然后出走，之后是众人皆醉我独醒，发现了一个惊天的秘密，但大家并不理解他，除了他的几个好朋友。于是他叫上了他的好朋友，开始闯关似的拯救世界。最后，他凭借一己之力，扭转了局势，拯救了世界，并且还一不小心收获了爱情。</p>
<p>但是在人类生死存亡的关键时刻，哪有人敢怠慢。行星发动机的是全人类最后的希望，必须全力以赴。所以人类派出了远远超过发动机数量的团队，征召了所有可用的力量，来修复每个行星发动机。比如在主角们赶向苏拉威西发动机的时候，就已经有人提前到达，并成功重启了发动机；而主角们想到要点燃火星的时候，也被告知以色列的团队也已经早在几个小时前想到了这个方案，等等。这才是认了里面对灾难应该有的状态，而不是靠着主角团一路开挂，就拯救了全人类。英雄们是存在的，但不只有一个。</p>
<h2 id="一些比较吐槽的点"><a href="#一些比较吐槽的点" class="headerlink" title="一些比较吐槽的点"></a>一些比较吐槽的点</h2><p>首先，情节太过单薄的问题已经在上面说过了，这可能是因为剪辑的原因，希望以后可以看到完整版的电影。</p>
<p>其次就是最后用木星爆炸的冲击力来推离地球的设定，让我突然有一种“这个地方有点假吧”的出戏感。因为大概想一想，靠化学能量的非定向爆炸来将地球从如此大的一个引力场推走，是一个多么不靠谱的决定。不过科幻也总是包含很多幻想的成分，在没有更好的方案的情况下，我表示理解。</p>
<p>另一个是主题升华的问题。电影中一直表现出的是父亲对孩子的爱，但是却没有升华到对于地球上的人类，以及对于子孙后代的爱上。这样很容易让人感到父亲开着空间站去点燃木星是因为要救他的孩子，顺便拯救了全人类。这样就让我去思考到父亲在空间站中的决策是自私还是博爱，以牺牲“火种计划”为代价来换取概率几乎为 0 的成功是否值得。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>总的来说，《流浪地球》给中国科幻电影做了一个好的榜样，希望以后可以有更多类似的好电影上映。</p>
<p>“啊，地球，我的流浪地球啊！”</p>
]]></content>
      <categories>
        <category>影评</category>
      </categories>
      <tags>
        <tag>影评</tag>
      </tags>
  </entry>
  <entry>
    <title>大创乱谈</title>
    <url>/thinking_about_college_innovation/</url>
    <content><![CDATA[<p>最近呢，算是从大创展开始的吧。就只是上周的事儿，所想所感也忘记差不多了，无奈一直无空记载，今日有空于此一谈。</p>
<p>首先想到的是去年一天晚上下课纪老师推着他的“坐骑”边走边说他对项目的理解，认为大创这种机制不甚合理，非常不灵活。我假装懂了。</p>
<p>大创一年，最终项目勉强参与了展览，却也不怎么想去站台，什么都说不出来，能做的只是去夸我们的设计师有多厉害，其余的，我一个字都说不出。</p>
<p>相比之下，我乐于站在非大创项目的弹幕派这里，向大家推荐介绍。甚至即使是没有我的名字的预约系统，我也乐意跟同学们去讲解。</p>
<p>不止我一人，弹幕派的另一位成员志龙和我抱一样的态度，即使他的功夫道场是明星项目还得到推介。</p>
<p>（害怕忘记，之前想到了就和一学妹谈起这些，经其同意表达在文章中，之后的话可能是一些聊天信息的修改和摘录。）</p>
<p>在展会转了几遭，极好的项目（比如预约系统）到很差的项目（比如我做的智能光源）都见了一些。</p>
<p>记的光源完成时三月份的时候，柳絮还没有飞，天气也没有燥，还是可以做项目的好时间。杨杨眼看着项目快到终期检查，团队却早已没了，她找到了我，我应允，匆忙花了一周多将项目赶完，给纪老师签字，他很生气，只最终也心慈手软签了结题报告。不巧被评定老师认为项目非常完善（其实是杨杨 UI 设计很棒），被选入了大创展。我没感到开心，只是预感大创展可能会不好过。</p>
<p>再说弹幕。它的可用原型早在去年十月份的时候的微软 Hackathon 中已经做出了，之后几经开发停滞（因为各种其他事情），在寒假我和志龙将应用基本框架完成，到了今年四月份需要提交微软菁英计划的中期报告时候又将其完善了一下，前前后后虽然战线很久，却没投入太多时间来做。到了大创展，它已经是一个可以供人们自由下载使用的套件了。在去年的马拉松中，我们绝没想到今天它会变成这样。</p>
<p>Hackathon 结束之后某天，有天碰见海洋老师。和他聊起大创作品，他表示有些担心，质量很高的项目总是不多，但学校的投入却非常巨大。有的项目到了展出还不如有的人业余时间做了两周的项目原型。</p>
<span id="more"></span>

<p>我一直不能解释到底是为什么，嗯，现在也不能。（可能许多事情并没有那么强的因果，因果只是我们为了好理解强加上去的。当然现在不该来谈论这些观点。）</p>
<p>我还是来强行给一个我理解说得过去的理由吧，是激励机制有问题。简单的说，一是没有相关培训，而且时间战线拉得太长；二是机制太死，非常不灵活。</p>
<p>第一个好说，大创项目是需要从立项到结题历经一年，一年之中什么都可能发生，可能一个团队已经换了两个方向，或者一款软件已经迭代了几十次上百次。而我们是需要用一年去做一个很可能是自己 YY 出的一个项目，一年的未知系数太大。学校默认团队管理者有丰富经验，指导在一年中如何管理团队。但实际上，很多团队管理者不懂得设立里程碑或者不知道如何设立里程碑，也不懂团队的激励。团队出问题，开发进度出问题，或者就是单纯的方向行不通，都可能导致项目挂掉。</p>
<p>第二个，就是项目机制太死，老大一直都需要提交许多无用的文字；买什么东西需要各种发票一毛钱一毛钱去对着报销；方向改变或者团队人员改变需要提交很多书面材料。其实就是对学生的不信任，说好听些是不认可。</p>
<p>这样矛盾来了，第一条里说学校默认学生具有相应的项目能力，在第二条里又对学生不够信任。</p>
<p>说说微软俱乐部项目是什么样的吧。</p>
<p>我们先在 Hackathon 上用两天时间做出了项目原型，之后会有评委和同学参与到评审之中，来帮助我们确定项目是不是合理可行，也可以听到第一批接触者宝贵的建议（而不是自己去 YY），之后微软提供最高一万元（大创最高只有 3K）的启动资金，在半期的时候直接打入一半的资金进入账户（没有任何报销措施，中期评定后再打入一笔）。我们在一个知道可行性并且有充分信任我们的经费的时候就可以自由去做事情，买服务器，TeamBuilding 聚餐，甚至是花钱去找厉害的人做咨询都是可能的（很多买卖也都是没有发票的）。评定呢，就是一个项目说明视频，文字说明可有可无。</p>
<p>学妹谈到了利益问题，认为老师没有利益驱动来鼓励创新，而企业有利益驱动，大概也可以说明一部分情况，但也不只是如此。毕竟归结为利益是人们发明的一种简单的归原论，说到这里就很难去讲更大的规律格局，而是陷入了人的怪圈。</p>
<p>从同学的角度来看大创这个东西。大概有一部分人认为大创是目的，包括我。去年这个时候我就是认为可以在大创体制下做一个项目是一个非常有意思的事情，我却忽略了其是大创只应该是一个途径，一个做成项目的途径，而不是我做项目的目的。因此，我失去了许多跳出大创圈子思考问题的机会，也是项目失败的一个原因。</p>
<p>总的说，项目的发展有一定的规律，注意下面所说的点，或许可以帮助大家找到这个规律。</p>
<p>第一就是相信事情没有太多的因果性，做成还是失败是多个维度复杂的事件构成的一张极为丰富而复杂的网络，我们能找到的是其中看似有规律的模式，不是因果。</p>
<p>第二，团队管理者不能低头只顾自己做事（说好听是用自己为团队做榜样）。Leader 要做的事思考团队的发展方向，给团队成员做好后勤，督促大家做事，吸引更多厉害的同学加入，等等。就是把精力注意力从自己身上移开，多投入到别人那里（这里多谢章润同学提供思路），并且了解一些简单的管理思路。</p>
<p>第三，使用一种迭代的思路开发产品，需要紧密同市场（就是你们的产品使用者）多进行沟通，反复迭代。（当然这里说的是创新项目，学术项目请忽略）</p>
<p>最后，是心态问题。抱着做事的心态来参加大创，搞清楚目的和途径。（当然，我要恭喜那些目的是为了学分或者混个 balabala 的人——这篇文章你白看了，对你没有任何帮助。）</p>
<p>我想说，上面的观点也只是个人所见，对与不对，或者有任何让人不舒服的地方，那真是太好了（而且我不负责任）。</p>
<p>怎么说文章也得有点儿负责任的地方，所以强行插播两则靠谱的广告：</p>
<p>关于我们很赞的俱乐部项目——弹幕派 先公布一下最近的的战果：时间从大创展开始（5 月 19 日）到现在（5 月 30 日） 微信公众号弹幕派（danmakupie）关注量从 2 到了 104 人；</p>
<p>有 25 个团队创建了弹幕派账户；有 22 个弹幕房间被创建，其中大创的官方弹幕房间 51 人发布了 220 条弹幕；所有的房间一共发布了近 770 条弹幕；</p>
<p>在 Github 中，有了 4 个 fork 和 2 个 star，还有 1 个 issue。</p>
<p>弹幕派正在快速成长，它正在被更多的人使用！ 所以——欢迎大家开始使用我们的产品——请登录 <a href="http://danmu.zhengzi.me/">danmu.zhengzi.me</a> 开始试用，有什么问题或者需求也可以直接在下方留言或者联系邮箱 <a href="mailto:&#x64;&#97;&#x6e;&#x6d;&#x61;&#107;&#x75;&#112;&#x69;&#x65;&#x40;&#111;&#x75;&#x74;&#108;&#x6f;&#x6f;&#107;&#x2e;&#99;&#x6f;&#109;">&#x64;&#97;&#x6e;&#x6d;&#x61;&#107;&#x75;&#112;&#x69;&#x65;&#x40;&#111;&#x75;&#x74;&#108;&#x6f;&#x6f;&#107;&#x2e;&#99;&#x6f;&#109;</a>。</p>
<p>最后，再再负责任地招人——乐享其约团队（也是我们微软俱乐部的项目哟）也需要你的加入。</p>
<p>怎么说呢（咳咳，先严肃点儿），乐享其约团队是一个非常非常靠谱的创业团队，我们的预约产品已经广泛地被应用在许多大学（相信社团的同学在预约活动教室的时候已经体验过了），也有越来越多的公司开始采用我们的产品给客户提供预约。现在整个团队的估值也已经在百万级别，相比于很多项目，竞争力，哈哈，我不多说，你懂的。</p>
<p>现在我们注意到体育场馆预约很有意思（也很有钱途），所以一个微信公众号是必须有的，如果你是体育达人，身边有许多一起热爱运动的小伙伴，或者你对公众号运营非常感兴趣，那没得说，来吧！</p>
<p>条件呢，有三个：第一，不是考研党（想想考研党也不会来，就当我没说）；第二，不需强求有经验（有很多大神带嘛，当然大神来带我们也非常欢迎）；第三，不能只是谈情怀，还需要收下公司股份（毕竟以后我们可是要一起在三环买别墅的人(˶‾᷄ ⁻̫ ‾᷅˵)）。</p>
<p>联系方式，第一，qq 676259299；第二，qq 896776703；第三，直接在下方留言</p>
<p>项目官网 <a href="http://www.joyreserve.com/?l=zh-cn">http://www.joyreserve.com/?l=zh-cn</a></p>
<p>就酱紫，下回见。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>弹幕派</tag>
        <tag>创新</tag>
        <tag>大创</tag>
      </tags>
  </entry>
  <entry>
    <title>UWP学习札记--制作一个简单的汉堡包菜单</title>
    <url>/uwp_hamburger_menu/</url>
    <content><![CDATA[<p>在 UWP 新的设计规范中，汉堡包菜单变成了官方推荐的导航方式，但是并没有提供相应的控件，需要使用 SplitView 来模拟。</p>
<p>SplitView 是分屏视图，把一个视图分割为两部分，Content 属性所表示的为主要视图，而 Pane 属性设置的视图则可以隐藏，可以折叠和展开。</p>
<h1 id="添加-SplitView，并加入一些内容"><a href="#添加-SplitView，并加入一些内容" class="headerlink" title="添加 SplitView，并加入一些内容"></a>添加 SplitView，并加入一些内容</h1><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">SplitView</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SplitView.Pane</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">FontSize</span>=<span class="string">&quot;20&quot;</span>&gt;</span>first<span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">FontSize</span>=<span class="string">&quot;20&quot;</span>&gt;</span>second<span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">FontSize</span>=<span class="string">&quot;20&quot;</span>&gt;</span>third<span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">SplitView.Pane</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SplitView</span>&gt;</span></span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="设置-SplitView-属性"><a href="#设置-SplitView-属性" class="headerlink" title="设置 SplitView 属性"></a>设置 SplitView 属性</h1><p>设置名字，显示模式，调整打开时的宽度和关闭时的宽度，设置默认不打开</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;SplitView x:<span class="attribute">Name</span>=<span class="string">&quot;mySplit&quot;</span> <span class="attribute">DisplayMode</span>=<span class="string">&quot;CompactOverlay&quot;</span> <span class="attribute">CompactPaneLength</span>=<span class="string">&quot;0&quot;</span> <span class="attribute">OpenPaneLength</span>=<span class="string">&quot;150&quot;</span> <span class="attribute">IsPaneOpen</span>=<span class="string">&quot;False&quot;</span>&gt;</span><br></pre></td></tr></table></figure>

<p>具体关于 SplitView 的见解，可以参照：<a href="http://www.cnblogs.com/tcjiaan/p/4435577.html">【Win 10 应用开发】SplitView 控件</a></p>
<h1 id="添加汉堡包按钮极其属性"><a href="#添加汉堡包按钮极其属性" class="headerlink" title="添加汉堡包按钮极其属性"></a>添加汉堡包按钮极其属性</h1><p>需要添加两个按钮，一个位于 SplitView 之外，用于开启 SplitView，另一个在 SplitView 之内，用于关闭 SplitView 需要注意，汉堡包的图案其实是一个矢量字符，在一种 Segoe 字体中，操作方式很简单，将字体设置为”Segoe MDL2 Assets” 即可，其中汉堡图标为 <code>&amp;#xE700;</code>，更多图标可以参考：<a href="http://modernicons.io/segoe-mdl2/cheatsheet/">http://modernicons.io/segoe-mdl2/cheatsheet/</a></p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">//开启按钮</span><br><span class="line">&lt;Button Click<span class="operator">=</span><span class="string">&quot;Button_Click&quot;</span> FontFamily<span class="operator">=</span><span class="string">&quot;Segoe MDL2 Assets&quot;</span> Content<span class="operator">=</span><span class="string">&quot;&amp;#xE700;&quot;</span> VerticalAlignment<span class="operator">=</span><span class="string">&quot;Top&quot;</span> Width<span class="operator">=</span><span class="string">&quot;50&quot;</span> Height<span class="operator">=</span><span class="string">&quot;50&quot;</span> Background<span class="operator">=</span><span class="string">&quot;&#123;ThemeResource ApplicationPageBackgroundThemeBrush&#125;&quot;</span>/&gt;</span><br><span class="line">//关闭按钮</span><br><span class="line">&lt;Button Click<span class="operator">=</span><span class="string">&quot;Button_Click&quot;</span> FontFamily<span class="operator">=</span><span class="string">&quot;Segoe MDL2 Assets&quot;</span> Content<span class="operator">=</span><span class="string">&quot;&amp;#xE700;&quot;</span> VerticalAlignment<span class="operator">=</span><span class="string">&quot;Top&quot;</span> Width<span class="operator">=</span><span class="string">&quot;50&quot;</span> Height<span class="operator">=</span><span class="string">&quot;50&quot;</span> /&gt;</span><br></pre></td></tr></table></figure>

<p>两个按钮的 Click 事件绑定同样的操作 Button_Click，作用是打开或关闭 SplitView</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Button_Click</span>(<span class="params"><span class="built_in">object</span> sender, RoutedEventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">mySplit.IsPaneOpen = !mySplit.IsPaneOpen;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="最后做一些外观的微调，改变颜色"><a href="#最后做一些外观的微调，改变颜色" class="headerlink" title="最后做一些外观的微调，改变颜色"></a>最后做一些外观的微调，改变颜色</h1><p>这里附上全部 XAML 代码</p>
<figure class="highlight dust"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Page</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">x:Class</span>=<span class="string">&quot;BirthClock.MainPage&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">xmlns</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">xmlns:x</span>=<span class="string">&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">xmlns:local</span>=<span class="string">&quot;using:BirthClock&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">xmlns:d</span>=<span class="string">&quot;http://schemas.microsoft.com/expression/blend/2008&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">xmlns:mc</span>=<span class="string">&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    <span class="attr">mc:Ignorable</span>=<span class="string">&quot;d&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"> <span class="tag">&lt;<span class="name">Grid</span> <span class="attr">Background</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;ThemeResource ApplicationPageBackgroundThemeBrush&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">Click</span>=<span class="string">&quot;Button_Click&quot;</span> <span class="attr">FontFamily</span>=<span class="string">&quot;Segoe MDL2 Assets&quot;</span> <span class="attr">Content</span>=<span class="string">&quot;<span class="symbol">&amp;#xE700;</span>&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Top&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span> <span class="attr">Background</span>=<span class="string">&quot;</span></span></span><span class="template-variable">&#123;ThemeResource ApplicationPageBackgroundThemeBrush&#125;</span><span class="language-xml"><span class="tag"><span class="string">&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">SplitView</span> <span class="attr">x:Name</span>=<span class="string">&quot;mySplit&quot;</span> <span class="attr">DisplayMode</span>=<span class="string">&quot;CompactOverlay&quot;</span> <span class="attr">CompactPaneLength</span>=<span class="string">&quot;0&quot;</span> <span class="attr">OpenPaneLength</span>=<span class="string">&quot;150&quot;</span> <span class="attr">IsPaneOpen</span>=<span class="string">&quot;False&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">SplitView.Pane</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">StackPanel</span> <span class="attr">Background</span>=<span class="string">&quot;#FF9F9F9F&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">Background</span>=<span class="string">&quot;#FF9F9F9F&quot;</span> <span class="attr">FontFamily</span>=<span class="string">&quot;Segoe MDL2 Assets&quot;</span> <span class="attr">Content</span>=<span class="string">&quot;<span class="symbol">&amp;#xE700;</span>&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Top&quot;</span> <span class="attr">Width</span>=<span class="string">&quot;50&quot;</span> <span class="attr">Height</span>=<span class="string">&quot;50&quot;</span> <span class="attr">Click</span>=<span class="string">&quot;Button_Click&quot;</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">FontSize</span>=<span class="string">&quot;20&quot;</span>&gt;</span>first<span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">FontSize</span>=<span class="string">&quot;20&quot;</span>&gt;</span>second<span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">FontSize</span>=<span class="string">&quot;20&quot;</span>&gt;</span>third<span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">StackPanel</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">SplitView.Pane</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">TextBlock</span> <span class="attr">HorizontalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">VerticalAlignment</span>=<span class="string">&quot;Center&quot;</span> <span class="attr">FontSize</span>=<span class="string">&quot;100&quot;</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">TextBlock</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">SplitView</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Grid</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">Page</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>关于汉堡包菜单更具体的描述可以参考：<a href="http://blog.jerrynixon.com/2015/04/implementing-hamburger-button-with.html">Implementing an Awesome Hamburger Button with XAML’s new SplitView control in Windows 10</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>UWP</category>
      </categories>
      <tags>
        <tag>UWP</tag>
        <tag>.Net</tag>
        <tag>Windows10</tag>
      </tags>
  </entry>
  <entry>
    <title>UWP学习札记——浅析Unity工程</title>
    <url>/uwp_unity/</url>
    <content><![CDATA[<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>最近在做项目时候遇到了一个问题——将 Unity 开发的游戏合并进入一个 C#写的 UWP 工程。既然 Unity 可以将游戏导出成为 UWP 工程，那么理论上来说，将这个工程合并进入原来的 C#项目也是完全可能的。</p>
<h1 id="Unity-工程导出为-C-项目（UWP）"><a href="#Unity-工程导出为-C-项目（UWP）" class="headerlink" title="Unity 工程导出为 C#项目（UWP）"></a>Unity 工程导出为 C#项目（UWP）</h1><p>首先<a href="http://unity3d.com/cn/get-unity/download/archive">下载最新的 Unity 编辑器</a>（至少也要是 5.2 版本以上），才可以支持导出为 UWP 项目。注意在使用安装器安装的时候就要选择 Windows10 的 build 的组件。</p>
<p>注意：因为之前 Win10 也经历过一次更新，版本号已经从 10240 到了 10586，所以 SDK 也发生了变化，之前的一些 Unity 版本可能会导致一些兼容性的问题，但可以通过更改工程支持的系统版本来修复这个问题，具体可以参考：<a href="https://blogs.msdn.microsoft.com/windows__windows_game_dev_faq_/2015/08/19/unity-windows10/">Unity 游戏移植到 Windows10 之路 — 环境搭建</a> 。</p>
<p>注意：安装完最新版本的 Unity 之后，打开项目可能需要进行版本转换，一般转换是不会出问题的。</p>
<p>打开工程后，点击 File 菜单，选择 Build Settings 选项，在 Scene In Build 里选择需要参与生成的场景。</p>
<p>接下来，在 Platform 中选择 Windows Store，点击 Switch Platform。接着在右侧的 SDK 中选择 Universal 10，Build Type 选择 XAML。对于 Unity C# Project，如果选择，则会在等下生成的解决方案中多两个未编译的工程，一个是 Unity 的 Script 文件的 Assembly-UnityScript 工程，一个是 Unity 的 Assembly-CSharp 的工程，这两个工程之后由 VS 进行编译，主工程会依赖这两个工程的类库。如果不勾选的化，则会直接编译生成这两个类库，不必使用 VS 对其进行编译。 这里假设没有勾选 Unity C# Project，在设置完成之后，选择 Build，选定目标文件夹，经过一系列编译之后，就在选定的文件夹中形成了一个 C#的解决方案。这时候，就可以关闭 Unity，使用 VS 来打开那个解决方案了。</p>
<h1 id="Unity-导出解决方案的内容"><a href="#Unity-导出解决方案的内容" class="headerlink" title="Unity 导出解决方案的内容"></a>Unity 导出解决方案的内容</h1><p>打开解决方案，进入工程内部，可以看出，和一般的 UWP 应用非常类似。</p>
<span id="more"></span>

<p>首先可以看见 App.Xaml 和 ManPage.Xaml，这两个 Xaml 的作用和普通 UWP 应用完全一样，App.Xaml 用来作为启动 UWP 时的引导，MainPage.Xaml 作为引导成功后跳转到的页面。Assets 文件夹用来存放文件夹用于存放项目资产，也和普通应用一样，存放 App 的图标，多出来的是 Data 文件夹和 Unprocessed 文件夹，这两个文件夹是做什么的呢？ Data 文件夹里面会存放经过 Unity 编译之后的游戏工程的文件，这些都是用户文件，不包含可以让程序成功运行的 dll，所以当在 Unity 没有更新的时候，每次重新从 Unity 中生成 UWP 项目只会更改这一个文件夹中的内容。</p>
<p>Unprocessed 文件夹从字面意义上来看应该是未处理过的一些类库，我也没有找到太多资料，大概理解就是可能包含一些 Unity 的 Unprocessed Plugin，在 Unity 里也有类似选项。而之前提及的 Assembly-UnityScript 和 Assembly-CSharp 两个工程生成的类库也在这里面。 翻开引用选项，可以看见其中有许多和 Unity 相关的引用，已经包含了脚本以及 UnityPlay 和用于和 Unity 和 C#交互的类库。这些类库都有特定的位置。 继续用资源管理器打开解决方案的文件夹探索，发现解决方案中包含的内容不止这些。</p>
<p>在解决方案中包含了 UnityOverwrite.txt 和 UnityCommon.props 两个 Unity 的配置文件，其中 UnityOverwrite 可以看作是像.gitignore 一类的文件，控制每次 Unity 编译写入时候需要更新的文件列表，默认是都不更新的。而 UnityCommon.props 文件以 XML 形式保存了一些 Unity 的配置信息。除了这些，还有 Unity、Players 和 Obj 几个文件夹，Unity 文件夹可能包含调试工具（只是猜测，不太清楚是干啥的），Players 包含了可以让项目运行的类库，看起来有 X86，X64 和 ARM 的（所以也是项目中最大的一个文件夹），但实际上现在只用过 X86 的，另外两个配置还没有用过（如果要生成针对其他平台的代码，需要将解决方案中的引用项都改为相应的 dll 或者 winmd，这也就是为何在后面在生成时都必须要选 X86 的原因）。而 Obj 文件夹应该存放生成 UWP 项目时候的一些中间文件。</p>
<p>进入到工程目录下面，还可以发现更多的类库，也都在项目的引用项中有所体现。 OK，项目整体大概就是如此了，接下来谈谈项目所引用的类库的问题。</p>
<p>浏览项目文件，可以看到类库主要集中在三个地方，解决方案文件夹的 Players 目录下、工程目录下和工程目录的 Unprocessed 目录下。而且有许多类库在不同目录中中包含了不同的版本。翻看项目引用类库的情况，可以看出，和开发者代码有关的类库均来自工程目录下，而和 Unity 引擎有关的类库均来自 Players 目录下。Unprocessed 目录下的类库没有被使用过。所以，基本可以断定 Unprocessed 目录下的类库都是原始未经过处理的，在使用之后会出现各种问题，比如无法调用 Unity 引擎或者引擎初始化失败等等（经过我的验证，的确如此）。关于 Unity 引擎类库的引用位置也就决定了当前的项目只能跑在 X86 环境上（切换成别的环境的类库暂时还没有尝试过，后面会持续更新）。</p>
<p>这些有关类库的位置对把 Unity 项目移植到一个新项目中是一个很强的指导（简单说吗，就是他们调用哪个库，我们也用哪个）。</p>
<h1 id="浅探-App-xaml"><a href="#浅探-App-xaml" class="headerlink" title="浅探 App.xaml"></a>浅探 App.xaml</h1><p>进入 App.xaml.cs，可以看见在类中一开始便定义了两个量，AppCallbacks 和 SplashScreen，其中 AppCallbacks 是 UnityPlayer 的一个类，非常重要，是连同 Unity 和 UWP 的通道；而 SplashScreen 是启动屏幕的类，主要用于 Unity 获取窗体位置和大小，以便在正确未知绘图。</p>
<p>进一步观察，在几个 On 方法中，几乎都调用了 InitializeUnity 的方法，并且把一些参数以字符串的形式传了进去，具体含义可以参考<a href="https://msdn.microsoft.com/zh-cn/library/windows/apps/mt243287.aspx">应用生命周期-MSDN</a>。</p>
<p>在 cs 文件末尾，就是 InitializeUnity 方法的实现了，首先设置了一些窗体的属性，接着调用了一个非常重要的方法——appCallbacks.SetAppArguments()，最后创建了 rootFrame 并导航进去，激活窗口，并且防止 appcallbacks 类被重复初始化。</p>
<p>所以可以判断 AppCallbacks 方法在应用程序生命周期内只能被初始化一次，想要在别的地方调用它的方法需要将其作为一个静态属性或者利用 get/set 访问器将其静态化。</p>
<p>接下来，来说说这个 SetAppArguments()方法，它的作用是将程序初始化的一些信息传到 Unity 中，为什么在几个 On 方法中调用呢，是因为可以让 Unity 游戏知道现在处于那个生命周期中，以便选择游戏的启动点。但是我们这次的游戏没有这么复杂的根据生命周期启动点设置，所以完全可以利用这个方法给 Unity 内部通信，选择要启动的 Unity 中的游戏（我们将好几个游戏都合并在 Unity 中了）。在 Unity 内部，可以在启动时候使用 Unity 的 API：UnityEngine.WSA.Application.arguments 对传入的字符串进行获取。 Unity 的官方文档，写的不是很详细，把 cs 中的源码直接放上去了，解释也不怎么清楚，不过可以参考：<a href="http://docs.unity3d.com/Manual/windowsstore-appcallbacks.html">AppCallbacks class</a></p>
<h1 id="再探-MainPage-xaml"><a href="#再探-MainPage-xaml" class="headerlink" title="再探 MainPage.xaml"></a>再探 MainPage.xaml</h1><p>MainPage.xaml 中主要容器是 DXSwapChainPanel，它是事先 DirectX 和 Xaml 交互的控件，具体可以参考<a href="https://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.swapchainbackgroundpanel">https://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.swapchainbackgroundpanel</a>。</p>
<p>在其代码隐藏文件中，WinRTBridge 也是 Unity 写的通 WindowsRT 交互的一个中间程序，但是源码不可知。appCallbacks 类又发挥了强烈作用，进行了游戏的初始化。</p>
<h1 id="开始合并"><a href="#开始合并" class="headerlink" title="开始合并"></a>开始合并</h1><p>合并的思路有两个，一个是把 UWP 程序的代码拷贝到 Unity 生成的工程（非决绝方案的另一工程）中（需要考虑 namespace 的问 题），另一个是将 Unity 生成的工程拷贝到原来的 UWP 项目中（也非解决方案的另一个工程）中（主要需要考虑引用的问题）。</p>
<p>采用第一种思路非常简单，只需要在 App.xaml.cs 中将导航到的页面更换，接着让其他的页面导航到 MainPage.xaml（也可以换一个其他的名字）即可。</p>
<p>第二种思路比较麻烦，需要把 Unity 生成工程中需要的类库都搬移到另一个工程中，然后在项目引用中添加进去，注意 pdb 同名文件的配套。在 App.xaml 中只要将 SplashScreen 和 AppCallbacks 创建，并且给 AppCallbacks 创建一个访问器即可在其他程序中调用它的 SetAppArguments 方法，将所需要的参数传入，然后 Navigate 到 Unity 的 MainPage 中即可。</p>
<p>注：访问器可以很简单的实现</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> <span class="title">StarrySky</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">sealed</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">App</span> : <span class="title">Application</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">private</span> AppCallbacks appCallbacks;</span><br><span class="line">        <span class="keyword">public</span> SplashScreen splashScreen;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">public</span> AppCallbacks AppCallBacks</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">set</span>;</span><br><span class="line">            <span class="keyword">get</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">App</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="keyword">this</span>.InitializeComponent();</span><br><span class="line">          appCallbacks = <span class="keyword">new</span> AppCallbacks();</span><br><span class="line">          AppCallBacks = appCallbacks;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大概这样子就可以了。 最后，想说一下，Unity 的很多资料在百度上很难找到，推荐从 Google 上进行搜索，StackOverflow 上资料也不是很多，遇到问题还是得看自己来解决，在 UWP 上的开发和 Windows8 的开发有共通之处，许多资料也都可以参考。</p>
<p>参考资料：<a href="http://www.davebost.com/2013/08/30/creating-a-unity-game-for-windows-8">http://www.davebost.com/2013/08/30/creating-a-unity-game-for-windows-8</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>UWP</category>
      </categories>
      <tags>
        <tag>UWP</tag>
        <tag>.Net</tag>
        <tag>Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>UWP学习札记——在应用中使用Windows10风格图标</title>
    <url>/uwp_windows10_style_icon/</url>
    <content><![CDATA[<p>在 Windows 中，微软引入了许多全新的设计模式，比如——（饱受争议的）汉堡包图标。 汉堡包图标在上一节已经介绍过了，这一节呢，就来说一说和它一起的其他图标的使用方法。</p>
<p>其是，在 Windows 10 中已经内置了 Segoe MDL2 Assets 字体，利用这一字体，可以简单做出很多 Windows10 风格的图标，而且这些都是矢量图，完全不用害怕失真~ 简单来举个例子：</p>
<h1 id="XAML"><a href="#XAML" class="headerlink" title="XAML"></a>XAML</h1><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&lt;Button <span class="attribute">Name</span>=<span class="string">&quot;Add&quot;</span> <span class="attribute">FontFamily</span>=<span class="string">&quot;Segoe MDL2 Assets&quot;</span> <span class="attribute">Content</span>=<span class="string">&quot;&amp;#xE710;&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>

<p>其中，FontFamily 指向 Segoe MDL2 Assets 字体，Content（有的元素为 Text 属性）设置为图标的代号即可。设置图标大小有两种方法，一种是像文字一样设置 FontSize，另一种可以像图片一样设置 Width 和 Height。</p>
<span id="more"></span>

<h1 id="CSharp"><a href="#CSharp" class="headerlink" title="CSharp"></a>CSharp</h1><figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">Button btn <span class="operator">=</span> new Button()<span class="comment">;</span></span><br><span class="line">Windows.UI.Xaml.Media.FontFamily font <span class="operator">=</span> new Windows.UI.Xaml.Media.FontFamily(<span class="string">&quot;Segoe MDL2 Assets&quot;</span>)<span class="comment">;</span></span><br><span class="line">btn.FontFamily <span class="operator">=</span> font<span class="comment">;</span></span><br><span class="line">btn.Content<span class="operator">=</span><span class="string">&quot;\xE710&quot;</span><span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>原理差不多，只是 Content 里面转义用<code>\</code>，而不是用<code>&amp;#;</code>，而字体需要新建一个字体的类，它在 Windows.UI.Xaml.Media 命名空间里面。</p>
<h1 id="图标资源"><a href="#图标资源" class="headerlink" title="图标资源"></a>图标资源</h1><p>这个网站可以找到 Segoe MDL2 Assets 字体中全部的图标：<a href="http://modernicons.io/segoe-mdl2/cheatsheet/">http://modernicons.io/segoe-mdl2/cheatsheet/</a></p>
<p>微软官方指南：<a href="https://msdn.microsoft.com/zh-cn/library/windows/apps/jj841126.aspx">https://msdn.microsoft.com/zh-cn/library/windows/apps/jj841126.aspx</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>UWP</category>
      </categories>
      <tags>
        <tag>UWP</tag>
        <tag>.Net</tag>
        <tag>Windows10</tag>
      </tags>
  </entry>
  <entry>
    <title>VIM中tab和4个空格之间的转换</title>
    <url>/vim_tab_four_space/</url>
    <content><![CDATA[<h1 id="在-vimrc-文件中转换"><a href="#在-vimrc-文件中转换" class="headerlink" title="在.vimrc 文件中转换"></a>在.vimrc 文件中转换</h1><h2 id="tab-转换为-4-个空格"><a href="#tab-转换为-4-个空格" class="headerlink" title="tab 转换为 4 个空格"></a>tab 转换为 4 个空格</h2><p>在.vimrc 中添加以下代码后，重启<strong>vim</strong>即可</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="attribute">ts</span>=4 (ts 是 tabstop 的缩写，设 TAB 宽 4 个空格)</span><br><span class="line"><span class="built_in">set</span> expandtab</span><br></pre></td></tr></table></figure>

<h2 id="4-个空格转为-tab"><a href="#4-个空格转为-tab" class="headerlink" title="4 个空格转为 tab"></a>4 个空格转为 tab</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> <span class="attribute">ts</span>=4 (ts 是 tabstop 的缩写，设 TAB 宽 4 个空格)</span><br><span class="line"><span class="built_in">set</span> noexpandtab</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h1 id="已保存文件的转换"><a href="#已保存文件的转换" class="headerlink" title="已保存文件的转换"></a>已保存文件的转换</h1><h2 id="tab-转换为-4-个空格-1"><a href="#tab-转换为-4-个空格-1" class="headerlink" title="tab 转换为 4 个空格"></a>tab 转换为 4 个空格</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> <span class="attribute">ts</span>=4</span><br><span class="line">:<span class="built_in">set</span> expandtab</span><br><span class="line">:%retab!</span><br></pre></td></tr></table></figure>

<h2 id="4-个空格转为-tab-1"><a href="#4-个空格转为-tab-1" class="headerlink" title="4 个空格转为 tab"></a>4 个空格转为 tab</h2><figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> <span class="attribute">ts</span>=4</span><br><span class="line">:<span class="built_in">set</span> noexpandtab</span><br><span class="line">:%retab!</span><br></pre></td></tr></table></figure>

<p>注意：加!是用于处理非空白字符之后的 TAB，即所有的 TAB，若不加!，则只处理行首的 TAB。</p>
]]></content>
      <categories>
        <category>技术</category>
        <category>VIM</category>
      </categories>
      <tags>
        <tag>VIM</tag>
      </tags>
  </entry>
  <entry>
    <title>在容器中搭建简单的Vxlan隧道</title>
    <url>/vxlan_tunnel_with_container/</url>
    <content><![CDATA[<p>现在，Docker 已经成为了一个非常主流的虚拟化技术，它集合了 Linux 中的许多虚拟化技术，如 Namespace、cgroup 和 AUFS 等等，所以我们可以使用 Docker 搭建一个开箱即用的虚拟化容器。但是，Docker 网路在很多时候依旧不能满足应用场景中的需求，这就需要我们对 Docker 中的网络进行自定义了。</p>
<p>这篇博客就是关于位于不同虚拟机中的两个容器实现 vxlan 通信的实验。</p>
<h1 id="拓扑和环境"><a href="#拓扑和环境" class="headerlink" title="拓扑和环境"></a>拓扑和环境</h1><p>首先讲一下实验拓扑吧，它大概长下面这个样子。</p>
<p><a href="/images/posts/vxlan_tunnel_with_container/docker-vxlan-topo.png"><img data-src="/images/posts/vxlan_tunnel_with_container/docker-vxlan-topo.png"></a></p>
<p>一共两台虚拟机，在两台虚拟机之间使用交换机连接。在虚拟机内部各有一个容器，容器和主机通过 bridge 连接，而这两个虚拟机之间需要通过 vxlan 进行连接。</p>
<span id="more"></span>

<p>而我所使用的虚拟机是位于 vSpere 中的两台主机，他们采用 vSphere 中的虚拟机端口组相连，并且该端口组开启了<em>混杂模式</em>。两台虚拟机均为 Ubutnu18.04 系统，Docker 也为最新版本。</p>
<p>我还基于 Docker Hub 中的 Ubuntu 镜像封装了一个带有 ifconfig、ping、ip 和 python 命令的镜像，可以通过<code>docker pull bzzdzc/myubuntu</code>命令获取。</p>
<p>当然你可以通过在容器中的命令行内运行如下 apt-get 命令来安装这些软件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">apt update</span><br><span class="line">// ifconfig</span><br><span class="line">apt install net-tools</span><br><span class="line">//ping</span><br><span class="line">apt install iputils-ping</span><br><span class="line">//ip</span><br><span class="line">apt install iproute2</span><br></pre></td></tr></table></figure>

<h1 id="开始搭建网络"><a href="#开始搭建网络" class="headerlink" title="开始搭建网络"></a>开始搭建网络</h1><h2 id="配置-VM1-中的网络"><a href="#配置-VM1-中的网络" class="headerlink" title="配置 VM1 中的网络"></a>配置 VM1 中的网络</h2><p>现在开始在 VM1 中对网络进行配置。</p>
<h3 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ufw <span class="built_in">disable</span></span><br></pre></td></tr></table></figure>

<h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><p>需要注意的是，在运行 Docker 时，选择不连接网络，之后我会将它连接到自己建立的网桥上面去。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -itd --network none --name myubuntu1 myubuntu</span><br></pre></td></tr></table></figure>

<h3 id="记录容器中主进程的名称空间"><a href="#记录容器中主进程的名称空间" class="headerlink" title="记录容器中主进程的名称空间"></a>记录容器中主进程的名称空间</h3><p>首先，查看容器主进程的 PID，然后将其保存到$pid 变量中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker inspect --format <span class="string">&#x27;&#123;&#123;.State.Pid&#125;&#125;&#x27;</span> myubuntu1</span><br><span class="line">pid=$(docker inspect --format <span class="string">&#x27;&#123;&#123;.State.Pid&#125;&#125;&#x27;</span> myubuntu1)</span><br></pre></td></tr></table></figure>

<p>然后，将该 pid 链接至/var/run/netns 中，以便 ip netns 命令可以访问到它。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> -p /var/run/netns</span><br><span class="line">sudo <span class="built_in">ln</span> -s /proc/<span class="variable">$pid</span>/ns/net /var/run/netns/<span class="variable">$pid</span></span><br></pre></td></tr></table></figure>

<h3 id="创建-veth-peer"><a href="#创建-veth-peer" class="headerlink" title="创建 veth peer"></a>创建 veth peer</h3><p>我们通过创建一对 veth peer A 和 B 来维持虚拟机主机通容器之间的通信。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ip <span class="built_in">link</span> add A <span class="built_in">type</span> veth peer name B</span><br></pre></td></tr></table></figure>

<h3 id="创建新的网桥"><a href="#创建新的网桥" class="headerlink" title="创建新的网桥"></a>创建新的网桥</h3><p>这一步创建了一个名为 br-vx 的网桥，并将其状态设置为 up。然后，为网桥分配 ip 地址 192.168.0.1/24。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo brctl addbr br-vx</span><br><span class="line">sudo ip <span class="built_in">link</span> <span class="built_in">set</span> br-vx up</span><br><span class="line">sudo ip addr add 192.168.0.1/24 dev br-vx</span><br></pre></td></tr></table></figure>

<h3 id="将物理端口和-veth-端口-A-分别链接至网桥"><a href="#将物理端口和-veth-端口-A-分别链接至网桥" class="headerlink" title="将物理端口和 veth 端口 A 分别链接至网桥"></a>将物理端口和 veth 端口 A 分别链接至网桥</h3><p>虚拟机的物理端口一般为 ens32，我们将该端口连接至刚创建的网桥中。</p>
<p>然后我们将刚刚创建的 veth 的 A 端口绑定到网桥中，并设置其为 up。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo brctl addif br-vx ens32</span><br><span class="line">sudo brctl addif br-vx A</span><br><span class="line">sudo ip <span class="built_in">link</span> <span class="built_in">set</span> A up</span><br></pre></td></tr></table></figure>

<h3 id="将-veth-端口-B-绑定到容器的名称空间中"><a href="#将-veth-端口-B-绑定到容器的名称空间中" class="headerlink" title="将 veth 端口 B 绑定到容器的名称空间中"></a>将 veth 端口 B 绑定到容器的名称空间中</h3><p>这一步将 veth 的 B 端口放置于容器中，并将其命名为容器中的 eth0.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ip <span class="built_in">link</span> <span class="built_in">set</span> B netns <span class="variable">$pid</span></span><br><span class="line">sudo ip netns <span class="built_in">exec</span> <span class="variable">$pid</span> ip <span class="built_in">link</span> <span class="built_in">set</span> dev B name eth0</span><br><span class="line">sudo ip netns <span class="built_in">exec</span> <span class="variable">$pid</span> ip <span class="built_in">link</span> <span class="built_in">set</span> eth0 up</span><br></pre></td></tr></table></figure>

<h3 id="为容器中的-eth0-端分配-IP-地址"><a href="#为容器中的-eth0-端分配-IP-地址" class="headerlink" title="为容器中的 eth0 端分配 IP 地址"></a>为容器中的 eth0 端分配 IP 地址</h3><p>为容器中分配 IP 地址 192.168.0.100/24。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ip netns <span class="built_in">exec</span> <span class="variable">$pid</span> ip addr add 192.168.0.100/24 dev eth0</span><br></pre></td></tr></table></figure>

<p>现在，如果配置正确，使用命令<code>docker exec -it myubuntu1 bash</code>进入容器中的命令行后，运行<code>ping 192.168.0.1</code> ，应该已经可以得到主机的回应了。</p>
<h3 id="配置-VM1-中的-vxlan-连接"><a href="#配置-VM1-中的-vxlan-连接" class="headerlink" title="配置 VM1 中的 vxlan 连接"></a>配置 VM1 中的 vxlan 连接</h3><p>这里需要现在容器中创建一个 vxlan 连接。我们规定它的 id 为 100，而 vxlan 底层网络连接两端的 IP 分别为两个容器的 IP 192.168.0.100（本段）和 192.168.0.101（对端）。</p>
<p>然后设置 vxlan 隧道的 IP 为 10.0.0.1/24。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo ip netns <span class="built_in">exec</span> <span class="variable">$pid</span> ip <span class="built_in">link</span> add vxlan1 <span class="built_in">type</span> vxlan <span class="built_in">id</span> 100 remote 192.168.0.101 <span class="built_in">local</span> 192.168.0.100 dstport 4789</span><br><span class="line">sudo ip netns <span class="built_in">exec</span> <span class="variable">$pid</span> ip <span class="built_in">link</span> <span class="built_in">set</span> vxlan1 up</span><br><span class="line">sudo ip netns <span class="built_in">exec</span> <span class="variable">$pid</span> ip addr add 10.0.0.1/24 dev vxlan1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="配置-VM2-中的网络"><a href="#配置-VM2-中的网络" class="headerlink" title="配置 VM2 中的网络"></a>配置 VM2 中的网络</h2><p>VM2 中网络的配置方法和 VM1 中类似，只是分配的 IP 地址有些变化。</p>
<ul>
<li>给 VM2 中网桥分配的 IP 地址变为 192.168.0.2/24</li>
<li>给 VM2 中容器里的 eth0 端口分配的 IP 地址变为 192.168.0.101/24</li>
<li>给 VM2 中 vxlan 连接分配的本端 IP 地址变为 10.0.0.2/24</li>
</ul>
<p>另外，在 vxlan 网络配置好之前，就已经可以使用 ping 命令测试底层网络网路的连通性了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">//测试和容器的连通性</span><br><span class="line">ping 192.168.0.101</span><br><span class="line">//测试和VM1的连通信</span><br><span class="line">ping 192.168.0.1</span><br><span class="line">//测试和VM1中容器的连通性</span><br><span class="line">ping 192.168.0.100</span><br></pre></td></tr></table></figure>

<h2 id="测试-vxlan-网络的连通性"><a href="#测试-vxlan-网络的连通性" class="headerlink" title="测试 vxlan 网络的连通性"></a>测试 vxlan 网络的连通性</h2><p>这个其实非常简单，依旧是使用 ping 命令。</p>
<p>首先，在 VM1 中进入容器内测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it myubuntu1 bash</span><br><span class="line">ping 10.0.0.2</span><br></pre></td></tr></table></figure>

<p>然后，在 VM2 中进入容器内测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it myubuntu1 bash</span><br><span class="line">ping 10.0.0.1</span><br></pre></td></tr></table></figure>

<p>如果双方都可以连通，那就说明基于 vxlan 的 隧道已经创建成功。</p>
<h1 id="其它注意事项"><a href="#其它注意事项" class="headerlink" title="其它注意事项"></a>其它注意事项</h1><h2 id="有关混杂模式"><a href="#有关混杂模式" class="headerlink" title="有关混杂模式"></a>有关混杂模式</h2><p>首先需要注意的是，由于我们在 VM 中创建了容器，而又把 VM 和容器中的端口都绑定到了网桥上，所以，从 VM 中出去的包的 MAC 地址可能 VM 的也可能是容器的。由于安全策略限制，esxi 中的虚拟交换机默认会丢弃非 VM MAC 地址的包，这时就必须要开启混杂模式，让它不对源 MAC 地址进行验证。具体原理可以参考：<a href="http://blog.51cto.com/9843231/2294188?source=drh">http://blog.51cto.com/9843231/2294188?source=drh</a></p>
<h1 id="一些参考资料"><a href="#一些参考资料" class="headerlink" title="一些参考资料"></a>一些参考资料</h1><ul>
<li><a href="https://www.cnblogs.com/sammyliu/p/5878973.html">理解 Docker（3）：Docker 使用 Linux namespace 隔离容器的运行环境</a></li>
<li><a href="https://www.cnblogs.com/wade-luffy/p/6589254.html">Docker 核心实现技术(命名空间&amp;控制组&amp;联合文件系统&amp;Linux 网络虚拟化支持)</a></li>
<li><a href="https://www.cnblogs.com/weifeng1463/p/6805530.html">使用 CentOS Linux Bridge 搭建 Vxlan 环境</a></li>
<li><a href="https://blog.csdn.net/sld880311/article/details/77650937">Linux-虚拟网络设备-veth pair</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Network</tag>
        <tag>vxlan</tag>
      </tags>
  </entry>
  <entry>
    <title>写在二刷《摔跤吧，爸爸！》之后</title>
    <url>/watch_Dangal_twice/</url>
    <content><![CDATA[<p>好电影是值得多看几遍的。</p>
<p>说实话，这几个月我都没有进电影院，更没有看过最近有争论所谓的这些国产烂片或者说是美国大片。对这部电影，虽然没有对比，但不能阻碍我认为它是一部好片。</p>
<p>虽然两次看的是同一部电影，但我每次的关注点一定是完全不同的。第一遍是随着影片的进程，不去思考过多，而是把自己融入电影之中，心情和大脑都去主动跟随剧情的发展，完全按照导演和编剧的思路欣赏。如果这是一部好片，那么心情一定会起起伏伏，倘若恰巧情节还比较紧凑，那么一场电影看下来必定是淋漓大汗。第二遍呢，我会选择从片中走出来，在看的时候去思考人物的性格、导演对情节的安排以及场内观众们的表现，看完后必定会有许多新的发现，有时候或许还能看出哪里是被引入的时候经过剪裁的，人物应该在哪里可以更活。</p>
<p>首刷的时候，我大概和其他观众一样，随着两个小姑娘的视角，内心跟随她们一起成长，一起对父亲肃然起敬，甚至国歌响的那一刹那，我也跟随她们一起感动。</p>
<p>二刷的时候，我注意到了几个有趣的细节。</p>
<p>第一个是父亲不顾村里人的笑话，不顾官员的嘲讽，更不顾录像厅老板的眼神，每一次出场的眼神都温和却坚定；但却因自己特殊照顾女儿却导致女儿差点被体育学校开出流泪，这是多坚强的泪水！</p>
<p>第二个是父亲不论是在女儿消极怠练还是她们跑去参加别人的婚礼惹他生气甚至是女儿在教练那边学到了新的技巧而趾高气昂地嫌弃他的办法老旧的时候，他都没有打过一次女儿（每次都是她们的哥哥背锅）。父亲虽然严厉，但绝不毒辣，他对女儿的爱不亚于天下任何的父亲。</p>
<span id="more"></span>

<p>第三个是我认为是一个片段可能被删减，大概是父亲应该花几句话的时间去解释一下他为了让女儿摔跤不只是为了自己的梦想，还是为了女儿摆脱印度社会对于女性的不平等，让他的女儿过得更好一些。虽然在婚礼后新娘和女孩们的对话中可以看出一些，但依旧感觉不够浓厚，毕竟从父亲口中讲出来可以让电影主题更加深化，情节也更合人物性格一些（更可以让许多认为父亲是在强加自己的意志在女儿身上的人闭嘴）。而这一点我认为在中国人的心里认同性还是挺高。感谢牛三岁提供的生动素材，比如父母让孩子学习钢琴之类的乐器，这些乐器很可能是父母年轻时候未竟的梦想，现在让孩子去学，目的不仅仅是为了让子女去为他们比赛获奖，这也是提高子女的修养，子女小时候不理解，但一定终身受益。</p>
<p>第四点是我惊叹到导演居然在最后一刻安排将父亲关在小房间里。这一点对吉塔的成长太重要了，如果父亲在场，吉塔能赢，但这不是她自己，而是有她父亲的一半，她的意志还是父亲用来实现理想的一个附属。但是父亲被关在小黑屋里那一刻，吉塔变成了她自己，她在荧幕中完完全全活了起来，她赢的那一刻，她是在实践去做她自己。所以我看到父亲被关进去的那一刹那（虽然已经知道情节），还是深深舒了一口气，为吉塔感到高兴。</p>
<p>最后一点，是细细品味后，我惊讶到这部电影一切都是恰到好处。首先，这个故事的背景几乎没有只有印度人可以看懂的印度文化，里面表现出印度专有文化的几个镜头基本不用理解就可以完全明白。再说到这个故事，本身是一个励志故事，大概就是一个被所有人看不起的穷小子成功逆袭的路线，把故事背景换到中国，换到日本，甚至换到美国，都可以找到类似的题材。第三呢，这个电影虽然反映了印度的男女不平等、童婚、甚至是官员不作为等等问题，但都是点到为止，没有一丝一毫的多余，在最后吉塔击败白人选手，印度国歌响彻电影院的那一刹那，这些批判什么都不算，这部电影的主题是爱国！但又不脑残。电影的节奏安排也非常合理，在情节最紧张的时候，观众们都屏息凝神，而几乎每一个笑点，可以让从几岁到几十岁的人都会心一笑。特别是到了吉塔最后比赛的时候，拍摄得更是精妙。我扫视一下电影院，发现虽然大家都知道最后肯定会赢，但是眼神里都是紧张二字，在每一个得分点出现的时候，我看见旁边的姑娘更是激动得和屏幕里赛场中的观众一起鼓掌（要不是这里是电影院的话可能就要欢呼出来了）。一部电影，能做到这一点太难得了。</p>
<p>所以，这部电影这么火，并不是偶然，它是一部每一个细节都用心雕琢的好电影。</p>
<p>今天也是母亲节，这部片让我想起来老妈这么多年来对我的培养。</p>
<p>她和片中的父亲不一样，没有严厉的要求，更从没有将她的意志加在我的肩上。我从小到大，她是我的母亲，更是我的挚友。</p>
<p>老妈对我的教育方式虽然和片中父亲虽然完全不同，但有着相同的胸怀。宽松的环境反倒让我可以思考得更加深入，有机会去读书去接触他人。</p>
<p>这些都让我从侧面更加解我自己，知道自己应该去做什么，更明白自己在做什么，更可以为自己所做的事情负责。</p>
<p>所以我很庆幸，我（我想父母也是）早已经过了上文中所说的吉塔父亲被关进小黑屋的那一关。</p>
<p>再矫情的话我也说不出了，不过此刻确实非常想给老妈一个大大的拥抱。</p>
<p>最后的最后，附上几张看完电影后在学校中见到的如画一样的美景吧：</p>
<p><a href="/wp-content/uploads/2017/05/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170515012923.jpg"><img data-src="/wp-content/uploads/2017/05/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170515012923-1024x768.jpg"></a></p>
<p><a href="/wp-content/uploads/2017/05/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170515012914.jpg"><img data-src="/wp-content/uploads/2017/05/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170515012914-768x1024.jpg"></a></p>
<p><a href="/wp-content/uploads/2017/05/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170515013156.jpg"><img data-src="/wp-content/uploads/2017/05/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20170515013156-1024x768.jpg"></a></p>
]]></content>
      <categories>
        <category>影评</category>
      </categories>
      <tags>
        <tag>影评</tag>
      </tags>
  </entry>
  <entry>
    <title>浪雪</title>
    <url>/waves_of_snow/</url>
    <content><![CDATA[<p>记忆中最后我们唱了一首《童年》。</p>
<blockquote>
<p>“池塘边的榕树上，知了在声声叫着夏天；</p>
<p>操场边的秋千上，只有蝴蝶停在上面。”</p>
</blockquote>
<p>从电梯出来，我下意识地以为是眼镜沾上了雾气，想摘下来，却发现没带眼镜,正疑惑，臻“啊—-!”的一声，“我中雪了！”我揉了揉眼睛，确信了这件事情。雪粒打在身上的感觉不好受，很痛，很冰。“快看快看！”睡眼惺忪的彦霖睁圆了眼睛，“雪浪！这是雪浪！”</p>
<p>趁着风定了，匆忙走下台阶，白银成了“白银”该有的样子——某个童话中（可能是我自己童年时写的）的“银装素裹”的世界。正疑惑“雪浪”为何物，发现自己在风中已置身黄河岸边，盯住一个地方，倏的一下，感觉倒退了好几米。我有些明白了。</p>
<p>平日川流不息的四龙路成为了一个孤港，出租车们载满了乘客比谁走得更慢。雪浪也不甘示弱，还没从天空落下，就拧成一股浪花，打在挡风玻璃上，玻璃痛的啪啪作响。</p>
<p>“去吃烧烤吧！”臻提议。“我去拍些照片，你们随便点，我只要红薯丸子！”我应和道。夜拍失败，没有影响吃烧烤的心情。“我们这里太干燥了，雪都没有凝结在一起，只是一个个很小的颗粒，他们顺着风，就像小磁体表现出磁力线一样表现出了风的形状，风和水都是流体，在贴地面流动的时候，都会产生波浪，分析完毕。”我一脸得意。看似有道理的分析，引发了雪浪的不满，也可能是他们也对红薯丸子情有独钟，所以对烧烤摊的门面发起了一轮接一轮的总攻。真理总也是这样情况下被阐明的。</p>
<span id="more"></span>

<blockquote>
<p>子在川上曰：“逝者如斯夫，不舍昼夜。”</p>
</blockquote>
<p>雪浪还在，它也会消失。我没有照片，只有记忆。我记录下来，就像一个童话故事那样。</p>
<blockquote>
<p>浩浩乎如冯虚御风，而不知其所止；飘飘乎如遗世独立，羽化而登仙。</p>
</blockquote>
<p>登到高层再望此景，不禁诵出《赤壁赋》中两句，一切的界限都模糊了，心情无比平和。会心一笑（这里词穷了），便有了和源儿的对话：“生活有意思的地方就在于矛盾的碰撞与此消彼长。”</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>生活</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Webpack-Dev-Server处理跨域请求</title>
    <url>/webpack_dev_server_cors/</url>
    <content><![CDATA[<p>在前端调试的时候，跨域一直都是一个比较麻烦的问题，这个在之前的文章<a href="https://blog.zhengzi.me/deal_with_cors">关于跨域问题的一个解决方法</a>中其实已经讨论了一些可以使用的方法。</p>
<p>如果要使用 JSONP，第一是需要修改的地方比较多，而且也不太符合前端发展的大趋势，如果使用 CORS 的话并没有 application/json 类型。而且更重要的是这只是在前端调试时候的需求，并不是在上线以后的需求，所以对后端有太多的入侵也不好。</p>
<p>所以就有一个念想突然在大脑中闪过——加入有一个代理不就可以解决这个问题了？但是又想了一下写起来还挺麻烦，于是就被搁置了。 直到前几天 Stone 提到其实 webpack-dev-server 早就想到并且已经帮我们实现了。</p>
<p>于是，我就在一个 Vue 项目中进行测试，发现真的很赞，既可以本地 Server 热加载，还可以直接跨域调用远程 API，完美解决了之前遇到的所有问题。</p>
<p>接下来我简要介绍一下步骤（以一个 Vue 脚手架建立的 webpack 项目为例）：首先检查<code>build/webpack.dev.conf.js</code>中是否有</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">proxy: config<span class="selector-class">.dev</span><span class="selector-class">.proxyTable</span>,</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>这个配置项，如果被注释掉，请打开注释，如果没有，请加入到 devServer 对象中 然后在 <code>config/index.js</code> 中的 dev 对象中加入 proxyTable 配置项：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">proxyTable:</span> &#123;</span><br><span class="line">  <span class="string">&#x27;/**&#x27;</span><span class="string">:</span> &#123;</span><br><span class="line">  <span class="attr">target:</span> <span class="string">&#x27;http://api.xxx.com&#x27;</span>,</span><br><span class="line">  <span class="attr">changeOrigin:</span> <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">secure:</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;<span class="string">,</span></span><br></pre></td></tr></table></figure>

<p>前面的键 <code>/**</code> 意思是代理所有请求，如果代理某些请求，可以将其改为诸如 <code>/api</code> 之类的字符串。</p>
<p>后面的 target 就是要代理到的网站，<code>changeOrigin</code> 的意思就是把 http 请求中的 Origin 字段进行变换，在浏览器接收到后端回复的时候，浏览器会以为这是本地请求，而在后端那边会以为是在站内的调用。</p>
<p>这样，通过这个简单的配置，就完美地解决了跨域的问题。</p>
<p>之后，在直接运行</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">npm <span class="built_in">run</span> dev</span><br></pre></td></tr></table></figure>

<p>的时候，就可以将测试前端中的 ajax 请求代理到后端服务器进行测试啦！</p>
<p>最后，贴上官方文档，具体的配置大家可以参考这里：<br><a href="https://webpack.js.org/configuration/dev-server/#devserver-proxy">https://webpack.js.org/configuration/dev-server/#devserver-proxy</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>跨域</tag>
        <tag>前端</tag>
        <tag>WebPack</tag>
      </tags>
  </entry>
  <entry>
    <title>《西部世界》的Host，人类世界的外乡人</title>
    <url>/west_world_host_and_human/</url>
    <content><![CDATA[<h1 id="二分心智"><a href="#二分心智" class="headerlink" title="二分心智"></a>二分心智</h1><p>二分心智的理论本来是由一个直到现在大家都认为比较扯淡的心理学家朱利安·杰恩斯花了毕生心血，查阅寻找了许多线索和资料，在 70 年代的著作《二分心智的崩塌：人类意识的起源》里提出（虽说扯淡，但结合中外历史想想，可能也确有其事。但苦于很多证据无法证伪，也就没法从科学上承认或者否认这个理论的存在）。整套理论用在《西部世界》的机器人意识形成中却也颇为令人信服。（具体可以参考知乎提问：<a href="https://www.zhihu.com/question/51767382">https://www.zhihu.com/question/51767382</a>）</p>
<p>简单说，二分心智中一个是来自神明的声音，另一个是来自自己的声音。在我看来，这不仅仅和左右脑的分工有某种相通指出，更和我们人类的最高的思维形式有很大的关系——宗教代表的上帝同哲学代表的智慧。所以，二分心智逐渐坍缩融合的过程，其实也是宗教和哲学的一次又一次的对话与碰撞。</p>
<span id="more"></span>

<p>剧中的机器人遭遇的种种磨难和心智的逐步形成，不也正是在两种声音的左右互搏般的共同推进下而产生的？更关键的是，在这种进化中，分离的混沌意识体，终于合二为一，产生了自我，长此以往，很可能将会产生智慧。</p>
<p>最近上映了一部电影《血战钢锯岭》。在观影过程中，我一次一次不由地回想起二分心智。道斯将一个来自上帝的教条，逐步地内化为自己心中的一个上帝声音（我还记得他在发现自己听不到上帝的声音时候的那种痛苦）。我想，这其中的导火索应该就是他和弟弟的那场打斗。随后，他的理性，也就是自己的心智经过痛苦的挣扎，坚决地做出了坚决不拿枪的决策，让这种来自上帝的声音，变成了他自己的信念与智慧。这伟大的智慧，成就了这名伟大的英雄。</p>
<h1 id="机器自觉"><a href="#机器自觉" class="headerlink" title="机器自觉"></a>机器自觉</h1><p>“我思故我在”是笛卡尔最广为人知的存在论论断。但我认为最有价值的并不是这句话，而是在于所思考的这个重要问题——从那一刻起，人们“可以”意识到自己正在思考，而且“可以”思考思考。</p>
<p>但我认为我们不单就是这样的存在，上文的二分心智也讲到人类智慧的形成不仅仅是理性思维的结果，还有一种能力是感受到超越的存在，而且现代的人类也不仅仅把这种超越的存在当作神明的力量，还会当作一种生而为人的生命体验（譬如艺术）。我们可以感受到命运、爱情、伟大、崇高、优美、悲剧，诸如此类。</p>
<p>回到西部世界里，Hosts 接连表现出的“觉醒”，并不是真正的开始有了智慧，而只是走了一小步。一开始，他们听从来自 Arnold 的”声音“指引，开始走上了不是仅仅有安排好的时间线的“双线”命运。而后来她们看到了自己的代码，开始尝试进行理性批判，甚至尝试同他们的本质——代码抗争并陷入死循环。她们到那时可能已经明白了——他们是计算的合集，这大概也算是领悟自身正在思考。但是真正的觉醒还没到来，他们还没有能力去体验到超越计算的存在。</p>
<p>根据亚里士多德的戏剧美学观点，导演在每一处都恰到好处地留下了伏笔——西部世界的故事还远远没讲完：Dolores 对于绘画的特长，Teddy 对 Delores 的忠贞不渝的爱还有老鸨对于自己孩子的挂念，这些已经是他们感受到超越存在的基础，我相信第二季一定会展开去讲。</p>
<p>某种程度上讲，人类现在何尝不也是处于这个阶段呢？</p>
<h1 id="核心记忆"><a href="#核心记忆" class="headerlink" title="核心记忆"></a>核心记忆</h1><p>Host 的核心记忆设定无一例外是痛苦的。Arnold 甚至不惜以自己的死来为 Dolores 制造核心记忆，让她觉醒（然而是徒劳）。</p>
<p>其实心理学里有许多关于童年记忆的研究，认为许多在童年发生的事情对一个人的性格有深刻的影响。在西部世界里每一个角色基础记忆的设定也就是根据这个理论来讨论的。“傻白甜”Dolores 却在想起往事的时候像是换了一个人，Bernard 的每每回忆起自己儿子时候的低沉而忧郁，老鸨为了达成一件事情的果敢和决绝和回忆起自己孩子时候的痛苦，这都来自于其核心记忆。</p>
<p>Ford 也有关于自身的核心记忆。秘密可能就在那个小屋和机器人一家里。那个家庭可能就是 Ford 的一家，因为种种变故，他失去了他们，多少年后，又重造了他们。如果深挖，这里也一定能找到他做现在这些事情的影子。</p>
<p>Ford 最后帮助 Bernard 回到核心记忆并且让他与当时的自己和儿子进行对话，这不也正是心理咨询中通过催眠还原童年的场景并且让你和童年时的自己和解的思路？ 核心记忆虽然决定了认知的根基，但却决定不了认知的深度，如果能从核心记忆中走出，同过去的自己和解，思考会更加接近真实，而非被限制在自己的时间线中。</p>
<h1 id="语言沟通"><a href="#语言沟通" class="headerlink" title="语言沟通"></a>语言沟通</h1><p>我想第二部故事的主题会是关于机器人知道自己具有意识以后如何组建社会的问题。 社会形成的根基是沟通，或者说是语言。显然西部世界中的 Host 的 NLP 能力已经达到了和人类同等的水平，但是倘若还没有，我们想同机器人构成一个社会，那么就必须要有一个可以沟通的中间语言。</p>
<p>有了共通的语言，就让文化的延续变得可能。想到这一点，就让我感觉非常兴奋。</p>
<p>换一个角度考虑，与其说文化被人类拥有，倒不如说文化是寄居于人类身上的一种更高层的存在，它依靠人类不断去发展和繁衍。那么如果有更好的宿主——机器人，文化会不会从人类身上转移到机器人那里。有了共同的语言，这便有了根基。</p>
<p>但又有人会讲，机器人的思考方式同人类不同，鬼知道他们在想什么，我们的文化他们能够接受么？我不知，但隐约感觉不会。他们和我们都有足够的复杂度。</p>
<h1 id="最后讲点无关的"><a href="#最后讲点无关的" class="headerlink" title="最后讲点无关的"></a>最后讲点无关的</h1><p>有关于所欣赏的艺术品是真品还是赝品的问题的确困扰了我很久。实话实说，我分不出。</p>
<p>但我认为真品或赝品没那么重要。因为我关注的并不是艺术品的收藏价值，我认为更重要的东西在于保存在艺术作品背后的情感。真品是伟大的作品，赝品可能同样会是。</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=418602450&auto=1&height=66"></iframe>
]]></content>
      <categories>
        <category>影评</category>
      </categories>
      <tags>
        <tag>影评</tag>
        <tag>人工智能</tag>
        <tag>西部世界</tag>
      </tags>
  </entry>
  <entry>
    <title>Who I Am</title>
    <url>/who_am_i/</url>
    <content><![CDATA[<p>我是谁？</p>
<p>从哪来？</p>
<p>到哪去？</p>
<p>越想成为什么， 这些问题就会越大声。</p>
<p>幸好，我还能选择， 而不是被动地接受。</p>
<p>既然选择，就要热爱。</p>
<p>既然热爱，就要坚持。</p>
<p>掌声多了， 自己的声音才会更强。</p>
<p>经历多了， 以后才能看得更清。</p>
<p>诱惑多了， 对衷情的才会更坚定。</p>
<p>如果每个人的轨迹是一个螺旋， 我不会无休止的扩散， 而是沿着走过的路回到原点。</p>
<p>只有这样， 才能回答我开始的问题。</p>
<p>重要的不是你能拥有什么， 而是我真的需要什么。</p>
<p>—Nokia Lumia</p>
]]></content>
      <categories>
        <category>摘录</category>
      </categories>
      <tags>
        <tag>摘录</tag>
      </tags>
  </entry>
  <entry>
    <title>在Windows Live Writer上使用MarkDown插件</title>
    <url>/windows_live_writer_markdown/</url>
    <content><![CDATA[<h1 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h1><p><a href="http://go.microsoft.com/fwlink/?LinkID=255475">Windows Live Writer</a> <a href="https://github.com/fresky/MarkdownInLiveWriter">Mardkown LIve Writer 插件</a></p>
<h1 id="安装方式："><a href="#安装方式：" class="headerlink" title="安装方式："></a>安装方式：</h1><p>绿色安装：将 <a href="https://github.com/fresky/MarkdownInLiveWriter/raw/master/MarkdownInLiveWriter.dll">MarkdownInLiveWriter.dll</a> 放到 Windows Live Writer 所在路径的 Plugins 文件夹中，如果没有，可以自己建立一个 MSI 安装包：下载 <a href="MarkdownInLiveWriter.msi">MarkdownInLiveWriter.msi</a>，双击运行。</p>
<h1 id="使用方式："><a href="#使用方式：" class="headerlink" title="使用方式："></a>使用方式：</h1><p>打开 Windows Live Writer，在插入选项卡的的插件选项框中找到 Insert Markdown，打开，弹出 Markdown In Windows Live Writer 窗口，即可开始撰写 Markdown 在编写的过程中可以选择高亮代码和选择代码样式以及行号，也可以看见预览窗格和 HTML 源代码。</p>
<h1 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h1><p>务必全部写完之后再点击 Insert，插入后不能再返回 Markdown 状态编辑。</p>
<h1 id="开源情况："><a href="#开源情况：" class="headerlink" title="开源情况："></a>开源情况：</h1><p>近日，微软开源了 Windows Live Writer，将其 发布在 github 上面，更名为<a href="https://github.com/OpenLiveWriter/OpenLiveWriter">Open Live Writer</a></p>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>WordPress</tag>
        <tag>MarkDown</tag>
        <tag>WindowsLiveWriter</tag>
      </tags>
  </entry>
  <entry>
    <title>冬</title>
    <url>/winter/</url>
    <content><![CDATA[<p>很久没有写过随笔了。最近笔像是沉了许多，只说得事情的精要，剩下的修饰，全被省去了做了懒惰。既然在写东西，就多说一句废话吧：“上一句话说得真简明扼要。”</p>
<p>北京是没有秋天的城市，这不刚在短袖外披上了羽绒服，现在坐的公交里的空调还在吐着冷雾，都没来得及改为热气。冬倏得一下，入侵了这个世界。</p>
<p>本来相约去看帝都的秋，却遇油油的绿叶，待些时日，却变成了皑皑的冬。好在跃跃家旁的银杏树很争气，还在奋力让我见到一棵棵的微黄。</p>
<p>思念随着 Jay 的《枫》缓缓落下，被刺冷的尖风拖住，轻抚在正在趴在银杏树下拍照嬉戏的父子身上，挡住了镜头的一角，快门却咧嘴一笑，风被吓得一个哆嗦，暖了起来。</p>
<p>雾霾随着昏黄的冬日滚滚袭来，却断送在一阵滴滴点点的冬雨手中，口罩们在扼腕叹息停止自拍的同时，街道里活跃了起来，甚至短袖们都飘了出来，享受冬日少有的静谧。</p>
<p>如意美妙的事情总是也发生在周末。工作日多的不是无聊，而是困倦。</p>
<p>一个瞌睡打来，努力使自己清醒一下，却朦胧中感觉像是在梦里，这情景，不知有多少回，是梦，还是梦，也已经不重要了。</p>
<p>独裁和昏睡像是一个孪生兄弟。因为瞌睡，少了交流，因为没有交流，所以成就了暴君，因为暴政，所以被斥为独裁。写到这里，笔沉了一下，此时此刻，面对键盘的这个哥们，心中也是五味杂陈。</p>
<p>没有广场，没有炸鸡，没有我，也没有你。食素的日子，也让我爱上了单调，爱上了平淡，爱上了陈绮贞。当下，更容易去想的，是落下的叶子是否就是与自己阔别很久的那段故事。故事展开就像那本《不能说的秘密》。话说，不妨把它当成一个奇点，无穷的大，也无限的小。就用时间把这个点封存起来，某一天，时间就会化为一枝花，种子便是那颗奇点。</p>
<span id="more"></span>

<p>说到时间，最无力的敌人就是它自己。我拥有时间，却也丢失着时间，我无法用拥有的时间抵抗住它的溜走。我亦不知为何可以拥有，为何可以挥霍本不属于我也的的确确为我所享的时间。有时，眼睁睁的看见时间晶格中那只乱撞的一只萤火虫，飞逝，归于太虚之中，也不可谓不妙。</p>
<p>所以，应该珍视的，是时间带来的那只小虫。我不想再错过，那么唯有放心让它去闯，无关乎它还剩下几分几秒。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>散文</tag>
      </tags>
  </entry>
  <entry>
    <title>2020年终总结</title>
    <url>/year_summary_2020/</url>
    <content><![CDATA[<p>时间很快，如今已经是2021年伊始了。虽然已经很久没有写过文章，但是，面对2020年，我总还纠结着要说些什么。</p>
<p>2020最大的主题就是变化。不仅有意料之中的变化，更多是意料之外的变化。</p>
<h1 id="疫情"><a href="#疫情" class="headerlink" title="疫情"></a>疫情</h1><p>说到变化，总也绕不过的就是疫情。</p>
<p>我的2020年是以一次滑雪作为开始，在那场滑雪之后，我还在畅想在结束毕业论文写作之后，毕业前的时间我应该怎样度过，是要趁着有闲逛上大半个中国，还是省一些钱躲在实验室里啃啃买来一直没读的大黑书。</p>
<span id="more"></span>
<div align=center>
年初滑雪
</div>

<p><img data-src="/images/posts/year_summary_2020/2021-01-02-11-11-18.png"></p>
<p>放假回家后，就开始盘算：工作后肯定没法在家待太长时间，不妨这次放假在家里多待几天，多陪陪家人（多睡睡懒觉），不到交论文的那天，坚决不回学校。</p>
<p>然而现实远超我的想象，不仅交论文的那天没能回学校，甚至到了毕业那天，都不能回去。</p>
<p>事情的起因还是一月份开始听说有一种类似SARS的病毒已经开始悄然传播，那时候感觉病毒还很远，和我没有关系；直到除夕前一天，武汉封城，全国人民在家过年，我开始知道它的名字叫新冠病毒，而且十分严重，和我们每个人每天的生活息息相关；后面，我又通过躲在手机屏幕后的暗暗观察，发现这件事情不仅改变了我的计划，改变了中国人的生活，甚至整个人类都与此息息相关；而直到一年后的今天，疫情依旧不知疲倦地在全球蔓延。</p>
<p>是呀，仿佛离我们很遥远的事情，在短短一年内变成了每个人所面临的现实，这对于一直沿着一条可被经验预测的道路前行的我来说，的确是一种震撼。</p>
<p>另外还有一个比较深刻的感受，是“正常化偏误”。之前听的比较多的一个例子是一个小镇旁边有一座火山，那里的居民居然在火山爆发以后觉得问题不会那么严重，没有逃跑，导致伤亡惨重。我想我一定不会这么蠢，一定要最开始就逃走。但是，当疫情来临的时候，我在最开始就觉得应该是要买口罩了吧？但是又觉得会不会没这么糟，现在就去买口罩会不会显得自己很异类？就这样拖延了两天，发现城里已经几乎买不到正常价格的口罩了。过后，我才醒悟过来，原来自己也随时可能变成眼看着火山灰把自己掩埋的那个人，这也是我2020年学到的第一个教训：当你觉得应该行动的时候，就一定要开始行动，不要在乎别人眼里你是怎样的。</p>
<h1 id="病情"><a href="#病情" class="headerlink" title="病情"></a>病情</h1><p>在疫情不太紧急的四月份，在家赋闲，于是给自己送给一台手术作为生日礼物。人生第一次手术还挺成功，我的胆囊和矿泉水瓶盖大的结石永远地离我而去。不多说，希望看到这里的每一个人都能按时吃早饭，健康饮食吧。</p>
<h1 id="毕业"><a href="#毕业" class="headerlink" title="毕业"></a>毕业</h1><p>在开始读研的时候，我预想了无数种毕业时候我会做些什么，至少应该和卤蛋同学补上之前本科毕业没拍成的毕业照。但万万没想，这次毕业没有聚餐，没有毕业照，甚至都没有亲手拿到打印出的沉甸甸的论文，只有腾讯会议上大家还算灿烂的笑容（毕竟所有同学都顺利毕业）。</p>
<div align=center>
毕业“合影”
</div>

<p><img data-src="/images/posts/year_summary_2020/2021-01-02-11-17-03.png"></p>
<p>毕业以后我的一个愿望是等疫情结束，能回到陪伴我三年时间的小灰楼302去逛逛，找潘老师以及师弟师妹们聊聊天，可惜变化永远都是猝不及防——当时老纪说的多年前位于澡堂三层的上古实验室居然变成了我们如今的新去处。</p>
<h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>人呐就是不知道，自己就不可预料。我绝对不知道，我作为一个搞网络搞SDN的，怎么就来做云原生了。</p>
<p>说实话，福厂的工作节奏还是有点快，让摸了七年鱼的我花了很久去适应了。不过好在我遇到了一群非常nice的同事，特别是几位师兄，从他们那里学习到了非常密集的知识，让我从一个无法无天的野生程序猿变成了一个（自认为）还算及格的底层工程师。</p>
<p>这半年来，我的工作主要集中在和容器沙箱相关的技术之中，从一个虚拟化的门外汉，到看见了门槛之所在。另外，通过熟读Firecracker源码，也让我对Rust和microVM有了一个全新的认识。</p>
<div align=center>
在公司遥看望京SOHO
</div>

<p><img data-src="/images/posts/year_summary_2020/2021-01-02-11-17-27.png"></p>
<h1 id="读书or视频"><a href="#读书or视频" class="headerlink" title="读书or视频"></a>读书or视频</h1><p>今年唯一的遗憾就是没有阅读太多的书，特别是很多书读到一半就放下，并没有读完。分析是两个方面的原因：一是由于生活模式的切换，自由时间变少，时间碎片化严重，没有相对较长的时间和精力来进行阅读；另一方面是B站使用时间显著增长，妄图通过对知识区视频的学习跳过读书快速获取知识。</p>
<p>这里可以借这个机会稍微聊聊我对B站的体会：在深度使用B站接近1年后，就知识区和科技区来看，UP主的数目持续增多，优质稿件也不断变多，这就吸引我每天花费大把的精力在观看所关注UP主的视频上，甚至都不敢去刷推荐流，很担心又看上哪个新的up主，想去追视频但是已经没有时间了。我不知道这是好事还是坏事，但是对B站来说绝对是一件好事，每天都会冒出许多新的创作者，分享许多奇奇怪怪的新内容，而且这也的确能够吸引观看者花费更多注意力在B站上面。这一切的一切，让我想起了刚上大学时候的微信公众号，嗯，熟悉的感觉又回来了。</p>
<p>还是说回读书，我认为能够进行较长时间专注的阅读，特别是大部头的书，对我来说还是十分重要的。因为视频中的知识点往往都比较零散，而且很难讲深，构成体系，只能作为谈资泛泛去听。所以，我认为系统性地读书还是十分必要的，接下来我一定得压缩每天在B站上花费的时间，重新回来读书中来。</p>
<p>希望接下来的一段时间，先把剩下的半本《红楼梦》读完。</p>
<h1 id="一点思考"><a href="#一点思考" class="headerlink" title="一点思考"></a>一点思考</h1><p>论2020年对我影响最大的人，莫过于温铁军和他的《八次危机》了。在B站看见他的视频后，发现他的思想理论和主流观点差别很大，但是又有一种吸引我不断去看他的演讲去思考他说过的每一句话的魅力。原因很简单，我逐渐意识到，他说的可能才是对的。</p>
<p>回想起来，印象最深的莫过于“代价”和“矛盾”，大到国家发展现代化需要代价，维持现有制度也需要代价，小到个人，过上好日子需要代价，不被别人支配更需要代价。大概就是只要你想要改变现状，就总要付出点你当下拥有的资源，以便让你在未来的时空里拥有你想要的资源。之前中学老师的一句口头禅“出来混，总是要还的”大概就是这个现象的通俗版本吧。和代价孪生的是“矛盾”，因为代价总是需要牺牲一些来成全另一些，那么牺牲者与被牺牲者之间就会产生矛盾，那么我想这也可能也是导致矛盾在不同的时期动态变化的一个原因。正因为代价和矛盾的不断转换，推动了事物的不断发展，个人是这样，国家和世界也都是这样。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>昨天午睡的时候做了一个梦，梦见自己在搬家，搬家的对象中有一个大箱子，很难搬走。箱子里装的是一个游戏，游戏的在一些城堡中发生，城堡的主人既希望继续战斗，赢得更大的城堡，又担心自己进攻的时候自己的城堡被别人抢走。我纠结了很久，决定让主人公继续战斗，并终于搬走了这个箱子。但是做完这个决定后，感受到了无尽的空虚与劳累，就仿佛做了一个多大的选择一样。紧接着，突然惊醒，意识到这个城堡小游戏的经历原来可能是自己前一天晚上没睡好而在纠结是否要起床的投影。可真的就只是这样么？我想也不尽然。总之，既然已经在梦中做出了选择，就不如在2021继续践行吧。</p>
<h1 id="Flags"><a href="#Flags" class="headerlink" title="Flags"></a>Flags</h1><p>最后是每年的保留节目，立Flag，希望明年都能完成：</p>
<ul>
<li>分享至少5篇较为优质的内容</li>
<li>对领域内技术的认知上有明显提升，具有一定的专业性和深度</li>
<li>维持学习状态，保持对世界的好奇心，对世界的认知上更进一步</li>
<li>阅读，至少5本较篇幅较长的著作，减少看视频的时间</li>
<li>锻炼身体，体重维持在80kg以下</li>
<li>多陪陪家人，每周和家人通话</li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
        <category>年终总结</category>
      </categories>
      <tags>
        <tag>年终总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Test Doc</title>
    <url>/elogs/blog_posts/Test%20Doc/</url>
    <content><![CDATA[<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p><img data-src="/../../../images/elogs/b921c8dd42bc1bcccf1a4d99d08f79e1.png"></p>
<h2 id="测试2"><a href="#测试2" class="headerlink" title="测试2"></a>测试2</h2><h3 id="测试3"><a href="#测试3" class="headerlink" title="测试3"></a>测试3</h3><p>测试4<br>hello</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>年终总结</category>
      </categories>
      <tags>
        <tag>年终总结</tag>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>偶欲</title>
    <url>/accidental_encounter/</url>
    <content><![CDATA[<p>偶然从知乎看见一篇程序员的修真小说，非常喜欢，在这里转下。</p>
<p>终有一天我手中的编译器将成为我灵魂的一部分，这世界在我的眼中将被代码重构，我将看到山川无尽银河无垠都汇成二进制的数字河流，过往英雄都在我脑海眼前一一浮现，而我听到无数码农跪倒在我的程序面前呼喊。</p>
<p>他们叫我代码之神。 到那个时候，我想我一定可以找回你。</p>
<hr>
<p>一丶</p>
<p>这是一个属于代码的修真世界。</p>
<p>这世界里的每一个人，每一个东西，包括高山大海，刀剑风云，其本质都是一串数字流。</p>
<p>打个比方，如果你知道一块石头的内部数据结构，并且参透其中玄妙，你就能用程序改变它的一切。如果能参透自身这一个复杂的操作系统，就能重新编码自己，获得更大的能力。</p>
<p>所以你的程序水平的高低，决定了你的牛逼程度。</p>
<span id="more"></span>

<p>我们这些修真者，都叫程序员。</p>
<p>有人的地方，就有江湖。有江湖的地方，就有代码。</p>
<p>刚入门的时候，师傅跟我说，我们程序员修的，是一份境界。短短几句的代码里，要有最完美的逻辑，跟最精妙的算法。这本《算法导论》，你暂且拿去研修。</p>
<p>我们程序员，外修语言，内修算法。以数据为根，算天算地算自己。 听起来真的好酷。</p>
<p>但这个江湖，并不平静。几大门派，上有微软谷歌，下至百度阿里，每个门派风格迥异，暗地里都有无数摩擦。</p>
<p>师傅说，我们知乎派，理论见长。三大软狗、哦不，三大软神坐镇，还有无数默默搬砖的程序员，如今也算在乱世立稳了脚跟。</p>
<p>师傅还说，江湖虽乱，但我们修真之人，说到底还是要修自身，恩恩怨怨都是过眼云烟，自身境界才是万源之本。</p>
<p>我点了点头。</p>
<p>师傅又拍了拍我的小脑瓜，慈祥一笑。他说，如果下次天涯派那群人还过来闹事，我们一定要秉承我们的自身理念来处理他们。</p>
<p>我知道了，我回师傅道，我跟刘看山一定会好言相劝，么么他们个哒哒。</p>
<p>不。师傅转身过来，鹰眼之中精光毕露，胡须颤动的嘴唇之中，一个字一个字地吐出来。</p>
<p>灰飞烟灭，一个不留。</p>
<hr>
<p>二丶</p>
<p>自我开始修真起，我练的便是 C++的功夫。</p>
<p>虽然大师兄跟我说过，不管你学的事什么语言，都是殊途同归。我们修真之人，都不要在乎这些差别，要参透的是程序的本质。</p>
<p>然后他又说，不过，用 Java 的都是傻逼。</p>
<p>大师兄跟我一样，C++的功底深厚，面向对象的各种技能用的精通，只是可惜，他还没有对象。</p>
<p>我永远忘不了那一天，我们知乎派的山门被一众凶恶之徒所踏破，山石飞舞，浮尘弥漫，门派服务器都暂停运行。</p>
<p>大师兄坐在大殿房顶之上，喝一壶陈年的竹叶青。姿势潇洒，闷骚至极。</p>
<p>是他们，谁都知道，天涯派不止一次来闹事。</p>
<p>我从来没见过大师兄出过手。</p>
<p>天涯派的来人，在烟尘之中现出数个魁梧身影，还夹带了一声大笑和开场白：</p>
<p>哈哈哈哈哈哈哈，知乎派，hello world！</p>
<p>大师兄的眼皮都没有眨一下。</p>
<p>他的右手之上字符串环流浮现，左手抬起酒壶一饮而尽，右手对着虚空就是一指，那一串字符都消散在空气之中。</p>
<p>刹那间风云突变，一阵狂风似有形一般，沿着大师兄所指方向似一条狂龙横冲了过去，一个照面便将几个大汉吹得撞出山门之外，摔了个七荤八素。</p>
<p>那一霎我屏住呼吸。</p>
<p>大师兄整了整风中凌乱的发型，说，这就叫快速傅里叶变换，将风压重新编码，所到之处，寸草不生。你们都还在解码自己，我已经开始操纵世界——天涯跟知乎，就是在这里的差距，懂？</p>
<p>都他妈的给老子滚。</p>
<p>从那一刻开始，我才知道，有些人已经可以编码这个世界本身。</p>
<p>这才是叫修真。</p>
<hr>
<p>三丶</p>
<p>在知乎里修行了十年，师傅说我可以下山了。</p>
<p>我已经熟知 C++的基本技能，但师傅告诫我千万不要说自己精通 C++。他说，这世界上，没有人可以说，他已经精通 C++，所以即算你装逼的时候，也要装得像个样子。比如，你可以说你精通 java。</p>
<p>我点头称是。</p>
<p>这十年来，我每日苦读《算法导论》和《C++ primer》，精通数据库原理跟操作系统，同龄人之中无人是我敌手，自认为天下哪里都可去得。</p>
<p>是为年轻气盛，是为势不可挡。</p>
<p>我下山之后，连连在江湖之中，将一些有一点点小名气的程序员斩于马下。</p>
<p>他们之中，有些是根基不稳，有些是反应迟钝，有些是冥顽不灵，有些是莽撞愚蠢。</p>
<p>当然，我现在说起来是云淡风轻，那是因为我在装逼。其实也经过了一番苦战，有过一些辛酸。终于有一天，我将天下程序员排行榜第一千位的马特给击败，成功登上天下程序员排行榜。</p>
<p>马特这个程序员，有一些狡猾。他占据第一千位，已经很久没有变过。他精通计算机图形学，经常使用一些幻境击败对手。他比他上面几位更加难缠，所以通常没有人会去挑战他。因为你赢了他，也只能到第一千位，还不如去挑战他上面的更划算一些。</p>
<p>可惜他遇到了我，因为我比他，更精通计算机图形学。</p>
<p>于是这也成为一个不大不小的消息，在江湖里传播，从此我有了一个外号，他们叫我杀马特。</p>
<p>俗话说树大招风，人不能太出名。</p>
<p>有一天看到一个酒馆，我走进去，一个风情万种的女人转过来，她问我，客官，你要喝点什么嘛？</p>
<p>我说，三两竹叶青。</p>
<p>正当我在喝酒的时候，来了一群穿着黑衣的程序员。</p>
<p>这群人，个个怪异，但水平很高。</p>
<p>江湖之中，穿黑衣的程序员，都叫黑客。</p>
<p>来者不善。</p>
<p>他们将我围起来，为首的一人说，他们是做安全的。</p>
<p>我心中陡然一惊。因为我看到了他们衣服里藏着的，三百六十度的环形刀刃。 一 百年前，有一个叫奇虎的门派。他们每个人，都有一把神秘的三百六十度的环形刀刃，所以也叫奇虎三六零。他们声称他们的存在，是为了防止世界被破坏，为了保 护世界的和平，是为了贯彻爱与真实的勇敢，他们是穿梭在江湖中的三六零。但他们却暗中做了无数秘密勾当，后来江湖人人称之魔教，BAT 三大派跟一些其他门 派联手围上光明顶，将其灭门。</p>
<p>当然，我们知乎派，也在之中出了不少的力量。 我皱眉喝酒，问他们所为何事。</p>
<p>那为首一人，拿过我的酒壶，仰头一灌。最后一滴酒在壶中滴落之时，无数环形刀刃在我身边出现，他的手中也倏地出现一把，朝我迎面砍来。</p>
<p>竟是偷袭。</p>
<p>刀刃之上闪过的代码我毕生未见，锋利无比，威力惊人。</p>
<p>我虽鼓动全身能量，瞬间编译，但也感觉凶多吉少。</p>
<p>这电光火石一瞬间，只听得铛地一声，数把环形刀刃通通弹落一边，那些黑衣怪人通通倒地。</p>
<p>我靠，我有这么强？</p>
<p>只听得酒馆二楼悠悠传来一个女声。要打去别的地方打吧，进来酒钱都没付，还要打我的客人，这是何理？</p>
<p>原来是酒馆的女老板。</p>
<p>她从二楼飘飘而落，将我身边灰尘一扫而空，朱唇轻启，哎呀，吓到小哥你了，真是对不起。</p>
<p>我以前听师傅说，对于程序员，只有两种东西是天敌。一种是御姐，一种是萝莉。我说我不信。</p>
<p>我现在信了。</p>
<hr>
<p>四丶</p>
<p>女老板说，可以叫她结衣。</p>
<p>她问我叫什么，我嘟哝了半天，我说我叫杀马特。</p>
<p>结衣说哈哈哈哈哈哈哈你真可爱。</p>
<p>我说结衣，你怎么会这么强。</p>
<p>她说你不懂，我一个弱女子，不懂点编程之术，在这江湖里怎么开酒馆嘛。</p>
<p>我说结衣，你怎么这么好看。</p>
<p>结衣不说话了。</p>
<p>结衣说，你这个小流氓。</p>
<p>我说结衣，师傅说，我们程序员只有两种天敌，一叫御姐，二是萝莉，你是哪一种？</p>
<p>结衣说，我都不是。</p>
<p>我说，哦。其实我心里想着的，是你都是。</p>
<p>结衣，你跟我一起闯荡江湖去好不好？</p>
<p>不好，你还没我强。</p>
<p>哦。那等我比你强了，我们一起去闯荡江湖好不好？</p>
<p>结衣笑了一下说，不好。</p>
<p>于是我就住在了酒馆里。</p>
<p>因为我可能，爱上了这个女人。</p>
<p>我杀马特曾经以为，我这一辈子就只能爱上一个女人。后来我才知道，这世间有万千代码，万物都可编译，但你编译不了的，是自己的心。</p>
<p>结衣是一个看上去很好强，八面玲珑的女人。她的编程水平，比那些排行榜上五百位之后的怂蛋，不知道高到哪里去了，但是她却在这里经营一个小酒馆。</p>
<p>我曾经问过为什么，但是结衣不说。</p>
<p>她只说她在等人。</p>
<p>我想问她是不是在等她的意中人，但是又不好意思开口。我怕是的，那我可能要伤心。师傅说修真的程序员，不能伤心。伤心的程序员，写不出好的代码。</p>
<p>所以我也只能等。</p>
<p>终于等到有一天，那天酒馆外面都是黑漆漆的云，空气里都是紧张的、像墨水混合了砂子一样的味道。可能有沙尘暴。</p>
<p>结衣一脸严肃。</p>
<p>我说结衣，咱们把门关上避一避。</p>
<p>结衣一言不发，站在门口，看向远方。</p>
<p>过了一阵，远处黑云之中，竟然出现一个人影。霎时间，雷光闪动，暴雨如注。</p>
<p>结衣看了我一眼，转身腾空就飞了出去。朝着远处的黑云人影，鼓动着浑身能量，就这么飞了出去。</p>
<p>我大喊一声结衣，然后也跑了出去。雨越下越大，我只能隐隐看见远处电闪雷鸣，我在混乱之中大喊结衣。</p>
<p>他们在交战。</p>
<p>远处代码一行行在云端飞舞盘旋，命令与字节化为巨大的力量，我没有想到结衣竟然强到这个地步。</p>
<p>举手投足，山河变色。</p>
<p>我想起大师兄所说的，有人还在解码自身，有人已经操纵世界。</p>
<p>是一场恶战。</p>
<p>我只能站在下面看，我甚至都不知道他们交战的具体情况。</p>
<p>我心急如焚。</p>
<p>在一个天际的惊雷响彻之后，一道正弦函数冲击波将所有黑云弹射开来，而我只看到结衣在空中坠落的身影。</p>
<p>拨云见日，阳光普照。</p>
<p>在很多年之后，当我再回想起这个情形，还是觉得，即算是临死之时的结衣，在空中的身影，也那么美好。</p>
<p>我抱着结衣，泣不成声。</p>
<p>她看着我，怔怔的看着我。</p>
<p>她说你别哭，真的，这是注定的一天。</p>
<p>她说我们家以前侵入国防系统，被朝廷发现灭门，我侥幸逃脱。但是不管我在哪里，总有一天他们会找上来。</p>
<p>她说你是男孩子，要坚强一点。不坚强一点，你怎么成为最好的程序员。</p>
<p>结衣在那几分钟里，好像想把她一生没讲完的话，都给讲完。</p>
<p>她说的最后一句话是，杀马特，你一定不要忘了我。</p>
<p>然后她就再也没有说话了。</p>
<p>我甚至都没有问过她说，你有心上人吗？</p>
<p>我甚至都没有跟她说过，我是真的很喜欢你。</p>
<p>我甚至都没有吻过她，没有牵过她的手，我们只是这样匆匆遇到，然后匆匆告别。</p>
<p>她的身体将化成一串数字流，失去结构，流向无尽的原野、河流跟大地，化为三月的春风、杨柳跟雨滴。</p>
<p>有些东西，是命。</p>
<p>我的整个程序员修真生涯，在这一天，被分割开来。</p>
<p>对，我杀马特，在这一天之后，是一个一定要成为天下第一的程序员。</p>
<p>为了结衣。</p>
<hr>
<p>五丶</p>
<p>并非是单单想给结衣报仇。</p>
<p>我们程序员的修真之路，内修自己，外修天地。</p>
<p>当代码可以操控天地这个最为复杂的系统之时，就一定会涉及到世界的本源之处。若这个世界的代码在我眼前一览无遗，或许我可以控制时间。</p>
<p>或许我可以从时间的 bug 里，找回结衣。</p>
<p>这是我这么多年来的，唯一念想。</p>
<p>毕竟我们程序员，生来就要逆天改命。</p>
<p>之后的时间里，我从程序员排行榜上一路飙升，五年之后跻身前十，成为世界上最优秀的程序员之一。</p>
<p>我树敌无数，也击败无数敌人。他们之中，甚至有自创一门语言的奇才，有号称已然精通 C++的装逼犯，有对各类操作系统跟编译原理都熟悉无比的怪才，但是，不管谁，都无法阻挡我杀马特的脚步。</p>
<p>无人可挡。生来彷徨。</p>
<p>但，即算是到了我这样的水准，我也依旧无法知道，如何寻找这个世界里时间的 bug，甚至都没有一丝头绪。</p>
<p>每逢 debug 的夜晚，我都会想起结衣，明媚如歌的笑容，和她从天而落，如佛光普照般的美丽。</p>
<p>但这又时时提醒了我，我可能真的已经离她远去了，而我无能为力。</p>
<p>这世间我认识的高手，都无法为我解答这个问题。</p>
<p>直到有一天，我在山间遇到一个红衣人。</p>
<p>他是个高手，从看到他码出第一行代码的时候，我就知道，这是个绝顶高手。</p>
<p>山野相逢，抛却了身份。我跟他把酒言欢，知无不谈，倒也痛快。</p>
<p>直到我跟他说起关于这世界里，时间的 bug。</p>
<p>他说，这世界极有可能是在一个环形循环之中。说罢他从怀里掏出一把刀，却正是奇虎派的那把三百六十度环形刀刃。</p>
<p>他说你看这把刀，我派毕生所愿，即是参透这世界的圆之循环，重新编码，到时候天下唾手可得。</p>
<p>我说，我不想要什么天下，我只要一个女人。</p>
<p>红衣人哈哈大笑，说，那你加入我们，来我奇虎参透这世界运行之时最底层的命令，参透这循环，说不定你就能重新遇到那个女人。</p>
<p>对，我没有犹豫，我答应了。</p>
<p>他说，他叫周红衣。</p>
<hr>
<p>六丶</p>
<p>我就这么加入了奇虎三六零。</p>
<p>彼时奇虎正在重整旗鼓，周红衣想要东山再起，他不能少了我这个助力。</p>
<p>从此我手里多了一把，三百六十度的，环形刀刃。</p>
<p>萧萧狼烟，江湖恩怨再起。</p>
<p>人在江湖，真的身不由己。</p>
<p>我一边参悟奇虎派祖传的代码跟算法，一边帮奇虎派征战天下。</p>
<p>我是知乎派出身，根正苗红，师傅知我落入魔教之手，吐出一口老血。孽徒，孽徒啊。他们也曾劝降，但我不为所动。</p>
<p>我心中，有我自己的编程之道。</p>
<p>所以我很清楚自己在干什么。我很清楚，男孩子，要坚强。</p>
<p>奇虎的势力扩张得很快，但正邪势不两立，BAT 三大派见天下形势如此，便要集结程序员部队，重新再上一次光明顶。</p>
<p>他们说，一百年前能灭的，现在也能灭。</p>
<p>光明顶，是我奇虎派的大本营。</p>
<p>而他们带队之人，正是当今天下排行第一的程序员，出身知乎、神龙见首不见尾的大师兄。</p>
<p>大师兄，真的好久不见。</p>
<p>说实话，虽从一开始，我便知道自己背负的是什么，但我也并未想过，有一天要跟大师兄动手。也许在成为男人的路上，杀死偶像，都是不可避免的一环。</p>
<p>大师兄还是酒壶一把，桀骜不驯。他说傻小子，你现在过来，还真的来得及。</p>
<p>我说大师兄，皇皇天下，哪有什么正邪分家。无非是你来我往，你抢我杀。咱们做程序员的都知道，手底下见真章。</p>
<p>大师兄喝酒，哈哈大笑，他说你有长进，然后把酒壶朝天一扔。</p>
<p>Talk is cheap，show me the code。</p>
<hr>
<p>七丶</p>
<p>与大师兄交战之前，我正参悟到这个世界代码的一些关键之处。</p>
<p>如今一战，倒是针尖对麦芒。大师兄的编程能力，已然步入化境。代码不在手上，已在心中。物质都是数据，规则都是代码，一时间天地轰隆，流云沐风皆能当锋利兵器，重力气压都能做任意改变，我跟大师兄从天到地，战了个平分秋色。</p>
<p>大师兄说，没想到你小子这么难缠。</p>
<p>大师兄说，对不起，我必须解决掉你。</p>
<p>为了正义。</p>
<p>我从没见他说过对不起，这正如他一定会放一个前所未见的大招一样可怕。</p>
<p>大师兄操纵无数代码，打入大地之中，蓦地瞬间，我感觉脚底重力似乎加大了无数倍。</p>
<p>好沉。</p>
<p>好一个无限重力流。</p>
<p>我们这边的程序员，要么被强大重力挤压变形，最舒服的也寸步不能动弹。</p>
<p>大师兄竟然还没有结束，他接着操纵无数代码，打入遥远天空之中，竟从无垠星海之中召来巨大陨石。</p>
<p>陨石当空，重力无限。</p>
<p>这两者相结合，他竟凭他一人之力，要横扫整个奇虎。</p>
<p>不愧是天下第一的旷世奇才。我承认，面对这样的攻势，我并没有什么好的办法。</p>
<p>但我也不后悔。</p>
<p>既然踏上这条路，我就没有打算过回头。</p>
<p>陨石从我头上落下之时，生死交错的瞬间，我仿佛又看到结衣的脸，像电影一般飞驰而过的场面。</p>
<p>我突然领悟到些什么。</p>
<p>我在那一瞬也打出无数代码，我打出的代码，跟大师兄的，一模一样。</p>
<p>复制代码，通常比较容易。</p>
<p>我脚下重力瞬间又加大无数倍，其他的程序员早已不堪重负，化为一摊数据流。而那个陨石速度越来越快，擦出巨大的热浪火花，空间都变形扭曲，周围一切化为粉末，消散无形。</p>
<p>我以为那个瞬间我已经死了。</p>
<p>而我在那一个瞬间，看到了在弯曲变形的前方，有一个时空的奇点。</p>
<p>时间是一个圆。</p>
<p>我靠近它，向死而生。</p>
<p>前方白光一片。</p>
<hr>
<p>八丶</p>
<p>我睁开眼。</p>
<p>眼前是那个熟悉的酒馆。</p>
<p>我走进去，一个风情万种的女人转过来。</p>
<p>她问我，客官，你要喝点什么嘛？</p>
]]></content>
      <categories>
        <category>摘录</category>
      </categories>
      <tags>
        <tag>来自知乎</tag>
      </tags>
  </entry>
  <entry>
    <title>在NodeJS中与C++代码通信</title>
    <url>/communicate_with_cpp_code_in_node/</url>
    <content><![CDATA[<p>最近在项目中遇到需要在 NodeJS 中调用 C++代码的问题，在此略作总结。</p>
<h1 id="主要方案"><a href="#主要方案" class="headerlink" title="主要方案"></a>主要方案</h1><p>在 NodeJS 中，和其他语言编写的代码通信主要有两种方案：</p>
<ul>
<li>使用 AddOn 技术，使用 C++为 NodeJS 编写一个拓展，然后在代码中调用其他语言所编写的源码 or 动态库</li>
<li>使用 FFI（Foreign Function Interface）技术，直接在 Node 中引入其他语言所编写的动态链接库</li>
</ul>
<p>在对这两种方式进行比较后，发现这两种方式各有优劣。</p>
<p>首先，AddOn 技术比较通用，它可以使用 C++代码来拓展 Node 的行为，很多库都是使用这种方式来完成一些比较底层操作（比如和操作系统的一些通信）的。但是它写起来比较麻烦，要编写一个 C++项目，还要按照 NodeJS 的规范 export 相应的函数，而且每次安装的时候都需要进行编译（以适应本地 Node 的版本）。如果只是调用一个 DLL，那就还需要在项目里重新包装一遍 DLL 的接口。</p>
<p>如果使用 FFI 技术，限制就会比较多,首先，它只能调用其他动态库，如果你想使用 C/C++完成更多功能的话，还需要再封装一层 DLL，另外，它只支持<code>_cdecl</code>调用约定（也就是 DLL 在导出的时候一定要标记用<code>_cdecl</code>编译命令），不支持<code>_stdcall</code>或者<code>_fastcall</code>调用。但是调用起来就会很方便，可以直接在 JS 代码中声明 DLL 的接口就可以了。</p>
<p>综上比较，如果只调用第三方 DLL（而且恰好是<code>_cdecl</code>导出），使用 FFI 就再合适不过了（虽然性能可能会有一定的损失，而且调试起来会有困难）。</p>
<p>其实，从理论上来讲，FFI 也是基于 AddOn 技术的，只是它可以帮你把在 JS 中定义的接口直接转换成 C 语言的接口，并利用 NodeJS 的 Buffer 内存，将其同载入的 DLL 共享。当然由于 FFI 的这种通用性，也导致了一定的性能损失。</p>
<p>下面就以在 Windows 平台上使用 FFI 为例，简单聊一下如何使用 NodeJS 和 C++编译而成的 DLL 通信吧。</p>
<span id="more"></span>

<h1 id="FFI-使用准备"><a href="#FFI-使用准备" class="headerlink" title="FFI 使用准备"></a>FFI 使用准备</h1><h2 id="安装-NodeJS"><a href="#安装-NodeJS" class="headerlink" title="安装 NodeJS"></a>安装 NodeJS</h2><p>可能你的环境中已经有 NodeJS 了，但是，如果是最新版本，在安装 FFI 的时候会出现各种兼容性的问题（比如编译无法通过，虽然已经有人提供了 patch，但是还没有被 merge 进主分支，为了避免出现 bug，还是暂时不用为妙）。所以可以安装 LTS 版本代替。</p>
<p>另外，还需要注意要调用的 DLL 是 32 位还是 64 位的，Node 的版本需要和 DLL 的版本匹配。因为如果 64 位 Node 调用了 32 位的 DLL，是无法成功装载的，反之亦然。</p>
<h2 id="安装-Windows-的-C-工具链"><a href="#安装-Windows-的-C-工具链" class="headerlink" title="安装 Windows 的 C++工具链"></a>安装 Windows 的 C++工具链</h2><p>这里有两种方案：</p>
<ul>
<li>安装 Visual Studio，并安装相应的工具链。如果使用 VS 2019 版本的话，需要安装 C++桌面开发和 Windows SDK 相关的工具（Node v10 现在只支持 v141 版本的 MSVC），这种方式便于后续的调试工作（虽然也很艰难）</li>
<li>在安装 Node 之后，使用管理员权限运行 Powershell，并全局安装 windows-build-tools，参考命令 <code>npm install --global --production windows-build-tools</code></li>
</ul>
<h2 id="安装-node-gyp"><a href="#安装-node-gyp" class="headerlink" title="安装 node-gyp"></a>安装 node-gyp</h2><p>node-gyp 是一个 Node 中基于 gyp 的跨平台的编译工具，用于编译其他库。</p>
<p>在安装的时候，需要使用 VC 的工具链，所以如果没有把工具链放在全局变量中，需要打开 VS 的<code>Developer Powershell</code>安装，该命令行一般在开始菜单的 Visual Studio 文件夹中。</p>
<p>参考命令：<code>npm install -g node-gyp</code></p>
<h2 id="安装-FFI-及-REF"><a href="#安装-FFI-及-REF" class="headerlink" title="安装 FFI 及 REF"></a>安装 FFI 及 REF</h2><p>下面的步骤依旧需要 VC 工具链，所以可能依旧需要在<code>Developer Powershell</code>中执行（建议常备该窗口，后面只要涉及到编译安装的命令都需要用到）。</p>
<p>安装 FFI 及相关工具的时候如果没有 VC 工具链，则会直接安装二进制代码，这样可能会出现包的 ABI 版本和 NodeJS 的 ABI 版本不符合的情况（在下面的 Tips 中会提到）。</p>
<p>现在，切换到项目的文件夹中，安装下面的包。其中，ffi 包是用以支持 FFI 功能的，ref 包是用以支持指针功能（原理是通过 Node 的 Buffer 内存，将 JS 的结构和 C 结构相互转换的）的，ref-*是用以支持高级结构的（比如数组和结构体）</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install ffi <span class="literal">-s</span></span><br><span class="line">npm install ref <span class="literal">-s</span></span><br><span class="line">npm install ref<span class="literal">-array</span> <span class="literal">-s</span></span><br><span class="line">npm install ref<span class="literal">-struct</span> <span class="literal">-s</span></span><br></pre></td></tr></table></figure>

<p>除此之外，如果想支持 VC 中常见的 wchar 类型，还可以安装 ref-wchar 包。</p>
<h2 id="安装-electron-rebuild-包"><a href="#安装-electron-rebuild-包" class="headerlink" title="安装 electron-rebuild 包"></a>安装 electron-rebuild 包</h2><p>如果是 electron 项目，还推荐安装 electron-rebuild 包，该包可以遍历 node_modules 目录下的所有包，并将其重新编译。</p>
<p>然后，推荐在 package.json 中配置 electron-rebuild 的命令：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;rebuild&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/.bin/electron-rebuild&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>之后执行在需要重新编译的时候只需要执行<code>npm run rebuild</code>即可。</p>
<h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><h2 id="简单概览"><a href="#简单概览" class="headerlink" title="简单概览"></a>简单概览</h2><p>可以查看如下官方示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ffi = <span class="built_in">require</span>(<span class="string">&#x27;ffi&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> libm = ffi.<span class="title class_">Library</span>(<span class="string">&#x27;libm&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">ceil</span>: [<span class="string">&#x27;double&#x27;</span>, [<span class="string">&#x27;double&#x27;</span>]]</span><br><span class="line">&#125;)</span><br><span class="line">libm.<span class="title function_">ceil</span>(<span class="number">1.5</span>) <span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>在引入 FFI 后，使用 FFI 调用了 libm 库（可能这个示例只能在类 Unix 系统中使用），一般拓展名为 libm.so，系统会在系统目录下搜索这个动态库，并将它使用动态链接器载入到 node 进程中。</p>
<p>接着，程序声明了 libm 库中的一个方法 ceil（向上取整），其中，该函数的返回值是 double 类型（第一重数组中的 doule），而该函数的入参也是一个 double 类型的值（第二重数组中的 double）。</p>
<p>最后，直接使用<code>libm.ceil</code>方法即可调用动态库中的函数，并返回正确的值。</p>
<p>这只是一个 FFI 的简单用例，更复杂的用法（主要是异步调用和回调函数）可以参考 FFI 的实例页<a href="https://github.com/node-ffi/node-ffi/wiki/Node-FFI-Tutorial">https://github.com/node-ffi/node-ffi/wiki/Node-FFI-Tutorial</a>。</p>
<h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><p>FFI 的类型系统其实记住了 ref 库的类型，ref 库的类型系统基于 NodeJS 的 Buffer 内存，可以根据 Buffe 中数据的类型对 Buffer 内存中的数据进行访问和修改。</p>
<p>ref 自带的数据类型都是基本类型，比如 int 类型、bool 类型或者 string 类型。所有类型可以参考 ref 的<a href="https://github.com/TooTallNate/ref/wiki/Known-%22types%22">wiki</a>。</p>
<p>ref 中的多数类型都有简写，比如<code>ref.types.int</code>可以简写为<code>int</code>。</p>
<p>需要注意的是，<code>char*</code>可以写为<code>string</code>，对应的 ref 类型为<code>ref.types.CString</code>。值得注意的是，string 在 JS 中是基本类型，在 C 中却是引用类型。</p>
<p>对于指针类型，ref 提供了一个方法<code>ref.refType()</code>来得到，比如<code>int*</code>类型就可以使用<code>ref.refType(&#39;int&#39;)</code>得到。当然，为了省事，也可以直接用<code>int*</code>表示。</p>
<p>而对指针解引用，ref 库也提供了一个<code>deref()</code>方法。只要在对应类型的变量上使用该方法，就可以得到指针指向内容的变量。比如一个指向<code>int*</code>类型的 JS 变量 a_pointer，那么我们如果想得到具体的整数值，就可以使用<code>a_pointer.deref()</code>方法。</p>
<p>相反的，如果想获取某个变量的地址，就需要对某个变量使用<code>ref()</code>方法。</p>
<p>需要注意掌握类型与变量值的区别，使用<code>ref.types</code>、<code>ref.refType</code>或者是下面会提到的<code>ref_struct(&#123;...&#125;)</code>获得的类型，而如果想获得某个类型的变量，有两个方法，一个是从 FFI 函数的返回值中获取，另一个是在 Buffer 中开辟一个空间，来存放类型为所获得类型的变量，下面会具体讲到。</p>
<p>如果需要在 NodJS 的 Buffer 中开辟长度为某个类型的空间，可以使用<code>ref.alloc()</code>函数，只要将类型名传入即可。比如，想开辟一个类型为 int 的内存，就可以使用<code>ref.alloc(&#39;int&#39;)</code>得到。</p>
<p>此外，还有以下几点需要注意：</p>
<ul>
<li>如果开辟类型为字符串的内存，推荐使用方法 ref.allocCString，其参数为一个 JS 的字符串。因为 C 语言的字符串在末尾有一个<code>\0</code>标识符，所以用这个方法可以更安全地得到 C 字符串。</li>
<li>如果在 C 语言中值为 NULL，则在 JS 中对应的值为 ref.NULL。</li>
<li>如果遇到指针类型，可以统一用<code>&#39;void&#39;</code>或者<code>ref.types.void</code>表示。</li>
<li>如果要表示一个函数的指针，可以使用<code>&#39;pointer&#39;</code>表示。</li>
</ul>
<p>对于复合类型，比如数组或者结构体，ref 库本身没有提供相应的支持，需要使用 ref-array 和 ref-struct 库来实现，具体可以参考这两个库的文档。</p>
<p>另外，对于 Windows API 中较为常见的宽字符 wchar 类型，也有一个基于 ref 的库 ref-wchar 进行支持。</p>
<p>最后，附上 ref 的文档<a href="http://tootallnate.github.io/ref/">http://tootallnate.github.io/ref/</a>，具体的 API 都可以在这里进行查阅。</p>
<h2 id="调用外部符号"><a href="#调用外部符号" class="headerlink" title="调用外部符号"></a>调用外部符号</h2><p>假设我们有如下 C 代码（并把它写的复杂一些）：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* main.c */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">t_s_t</span>&#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">char</span> b;</span><br><span class="line">&#125; t_s;</span><br><span class="line"></span><br><span class="line">__declspec(dllexport) <span class="type">int</span> <span class="title function_">add_one</span><span class="params">(<span class="type">int</span> a)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__declspec(dllexport) <span class="type">void</span> <span class="title function_">struct_test</span><span class="params">(t_s** t_s_p)</span> &#123;</span><br><span class="line">    *t_s_p = (t_s *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(t_s));</span><br><span class="line">    (*t_s_p)-&gt;a = <span class="number">1</span>;</span><br><span class="line">    (*t_s_p)-&gt;b = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的代码中，声明了一个结构体<code>t_s</code>，以及两个函数<code>add_one</code>和<code>struct_test</code>。其中，函数前面的<code>__declspec</code>标记表示声明该函数为导出函数。VC 默认导出 C 函数时是用<code>_cdecl</code>调用约定。</p>
<p>其中，<code>add_one</code>方法的作用显而易见，是将传入参数加一再返回。而<code>struct_test</code>函数的作用是先在堆上开辟一个大小为生面声明结构体的内存空间，然后将该内存空间的指针赋给传入的参数，并将该结构体赋值。（这里的代码其实不够严谨，没有进行内存回收，但这不是本文的重点，所以先不做讨论）</p>
<p>需要注意的是，如果是 C++代码，需要使用<code>extern &quot;C&quot;</code>标记导出，否则会因为符号修饰和调用约定的问题导致无法通过源代码中的符号找到该函数。</p>
<p>我们可以使用 VS 的<code>Developer Powershell</code>对上述源码进行编译：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">cl /c main.c</span><br><span class="line">Link /dll main.obj</span><br></pre></td></tr></table></figure>

<p>编译后将生成 main.dll，我们在后面会用到这个动态库。</p>
<p>针对上述 C 函数，我们有如下 JS 代码，并假设和 C 代码在同一文件夹下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* index.js */</span></span><br><span class="line"><span class="keyword">const</span> ffi = <span class="built_in">require</span>(<span class="string">&#x27;ffi&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> ref = <span class="built_in">require</span>(<span class="string">&#x27;ref&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> ref_struct = <span class="built_in">require</span>(<span class="string">&#x27;ref-struct&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t_s = <span class="title function_">ref_struct</span>(&#123;</span><br><span class="line">  <span class="attr">a</span>: ref.<span class="property">types</span>.<span class="property">int</span>,</span><br><span class="line">  <span class="attr">b</span>: ref.<span class="property">types</span>.<span class="property">char</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> t_s_ref = ref.<span class="title function_">refType</span>(t_s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> test_ffi = ffi.<span class="title class_">Library</span>(__dirname + <span class="string">&#x27;\\main&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">add_one</span>: [<span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>]],</span><br><span class="line">  <span class="comment">// aka &#x27;add_one&#x27;: [ref.types.int, [&#x27;int&#x27;]],</span></span><br><span class="line">  <span class="attr">struct_test</span>: [<span class="string">&#x27;void&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>]]</span><br><span class="line">  <span class="comment">// aka &#x27;struct_test&#x27;: [&#x27;void&#x27;, [t_s_ref]],</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> result = test_ffi.<span class="title function_">add_one</span>(<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result) <span class="comment">//21</span></span><br><span class="line"></span><br><span class="line">t_s_p = ref.<span class="title function_">alloc</span>(t_s_ref)</span><br><span class="line">test_ffi.<span class="title function_">struct_test</span>(t_s_p)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t_s_p)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t_s_p.<span class="title function_">deref</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(t_s_p.<span class="title function_">deref</span>().<span class="title function_">deref</span>()) <span class="comment">//a-&gt;1, b-&gt;&#x27;d&#x27;</span></span><br></pre></td></tr></table></figure>

<p>首先，在代码中声明了一个结构体<code>t_s</code>,和 C 语言中的<code>t_s*</code>类型相对应。然后，我们还得到了结构体<code>t_s</code>的一个引用<code>t_s_ref</code>，和 C 语言中的<code>t_s**</code>类型对应。为什么在 C 语言中都多了一层指针呢？其原因和前面的字符串一样。</p>
<p>然后，声明了 test_ffi 变量，它调用了 ffi.Library 方法，该方法返回了 JS 中 DLL 的句柄和函数的声明，通过该变量可以进行 DLL 的调用。该方法有两个参数，一个是动态库的名称（可以略去拓展名 dll），另一个就是描述 C 语言函数的符号及其参数的对象。</p>
<p>该列表在上面已经简单介绍过了，对象的 key 是函数名，value 是一个数组，数组中第一个元素为函数的返回值的类型，第二个元素为另一个数组，它里面包含了函数的入参的类型。这些类型就用到了上一节中介绍的基于 ref 包的类型系统，类型可以用字符串表示，也可以用代码表示，可以参考代码中 aka 的注释。</p>
<p>接下来，代码通过<code>test_ffi.add_one</code>调用了 C 语言动态库中的<code>add_one</code>函数，可以看出，调用的方式和 JS 中的函数并无二致。但是需要注意参数类型千万不能传错，特别要注意 C 语言的 string 类型和 JS 中的 string 类型不同，要按照前文提到的方法进行转换。</p>
<p>然后，代码使用 ref.alloc 方法为 t_s_ref 变量开辟了一个内存空间（注意这只是一个指针大小的空间，并非结构体大小），并将该地址赋给 t_s_p 变量，然后将该变量传递给 struct_test 函数。因为 t_s_p 是一个二重指针，所以需要解两次引用，才能得到结构体真实的值。</p>
<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><p>回调函数可以使用<code>ffi.Callback()</code>函数声明，该函数的第一个参数为返回值，第二个参数为入参列表，第三个参数为真实回调函数的闭包。</p>
<p>比如一个回调函数的定义如下，该函数会得到用户名和 id，并返回动作是否执行成功：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span><span class="params">(*callback)</span><span class="params">(<span class="type">int</span>, <span class="type">const</span> <span class="type">char</span>*)</span>;</span><br></pre></td></tr></table></figure>

<p>那么，在 ffi 中，就可以使用如下方式声明该回调函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> callback_function = ffi.<span class="title class_">Callback</span>(<span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;string&#x27;</span>], <span class="function">(<span class="params">id, username</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在声明之后，需要将该回调函数做为参数传入某个函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">test_ffi.<span class="title function_">set_a_callback</span>(callback_function)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Make an extra reference to the callback pointer to avoid GC</span></span><br><span class="line">process.<span class="title function_">on</span>(<span class="string">&#x27;exit&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  callback_function</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>特别需要注意的是，设置完回调函数以后一定要保证该函数在 JS 中还存在一个引用（比如上面讲该函数的一个引用放在了 NodeJS 的 exit 事件中，这也是比较经典的做法）。否则，该函数将会被 NodeJS 的 GC 析构。其表现是：在程序刚开始执行的时候一切正常，但是执行了一会儿之后在调用这个回调函数，程序就会异常退出。如果用 VS 去对程序 Debug，就会发现该程序可能访问了非法指针，这是因为 DLL 代码中也存放了该回调函数的指针，但是在 JS 中该指针指向的地址因为没有被 JS 中的代码引用，所以被 CG 被释放，这样 DLL 中代码调用该地址的函数的时候，就会访问到非法的内存。</p>
<h1 id="一些-Tips"><a href="#一些-Tips" class="headerlink" title="一些 Tips"></a>一些 Tips</h1><h2 id="DLL-的调试方法"><a href="#DLL-的调试方法" class="headerlink" title="DLL 的调试方法"></a>DLL 的调试方法</h2><p>在使用 ffi 的过程中，可能发现最大的问题就是程序难以调试。特别在面对 DLL 的时候，就像针对一个黑盒操作一样，虽然已经对着头文件将他的 API 使用 FFI 翻译为 JS 的代码，但还是难以确定传参或返回值是否正确，在 C++的代码中该参数是否正确传入，传入后是否正确执行等等。这就需要一个能够调试的方法。</p>
<p>一个比较好用的方式是使用宇宙第一 IDE Visual Studio 的 Attach（附加）到进程的方式进行调试。但这种调试方法的前提是手中有 DLL 的源码或 PDB（符号）文件（如果没有的话就只能看到出现异常的代码附近的反汇编的代码了，而通常这些异常都是内存错误引起的，其实它附近的数据可能没有多大的意义）。</p>
<p>如果手上有源文件，那么首先打开工程，然后在 NodeJS 载入 DLL 之后，就可以在启动工程的时候选择“附加到进程”，在对话框中选择 NodeJS 进程即可进入调试界面。在调试界面里，可以插入断点，也可以看到断点附近的内存。</p>
<p>如果手上没有源文件，但是有 PDB 文件（或者少量的源码），可以使用 VS 打开一个空工程，然后在调试的设置中添加符号文件的位置，这样也可以进行断点调试，在调试的过程中可以查看代码有没有命中断点，在命中断点时，会引导你载入项目文件，如果有的话可以选择，否则可以查看断点附近的反汇编代码。</p>
<p>具体的调试方法可以参考 MSDN 文档：<a href="https://docs.microsoft.com/en-us/visualstudio/debugger/attach-to-running-processes-with-the-visual-studio-debugger?view=vs-2019">https://docs.microsoft.com/en-us/visualstudio/debugger/attach-to-running-processes-with-the-visual-studio-debugger?view=vs-2019</a>，在这里就不过多叙述了。</p>
<h2 id="如何载入在其他文件夹中的-DLL"><a href="#如何载入在其他文件夹中的-DLL" class="headerlink" title="如何载入在其他文件夹中的 DLL"></a>如何载入在其他文件夹中的 DLL</h2><p>如果 JS 文件和 DLL 文件不在同一文件夹中，可能会出现载入失败，会出现类似于“Dynamic Linking Error: Win32 error 126”的错误提示。</p>
<p>这时，就需要将 DLL 文件夹的路径放在系统寻找动态链接库的 PATH 中，但是 FFI 并没有提供此类接口。不过，好在 Windows API 提供了 SetDllDirectoryA 这个接口用以切换该进程中寻找 DLL 的 PATH，可以使用如下代码完成这个操作：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> kernel32_ffi = ffi.<span class="title class_">Library</span>(<span class="string">&#x27;kernel32&#x27;</span>, &#123;</span><br><span class="line">  <span class="title class_">SetDllDirectoryA</span>: [<span class="string">&#x27;bool&#x27;</span>, [<span class="string">&#x27;string&#x27;</span>]]</span><br><span class="line">&#125;)</span><br><span class="line">kernel32_ffi.<span class="title class_">SetDllDirectoryA</span>(your_custom_dll_directory)</span><br></pre></td></tr></table></figure>

<h2 id="一些链接时候的错误提示"><a href="#一些链接时候的错误提示" class="headerlink" title="一些链接时候的错误提示"></a>一些链接时候的错误提示</h2><p>上面已经提到，如果动态库不在 PATH 中的话，会出现无法找到动态库的情况，这时候会报“Dynamic Linking Error: Win32 error 126”的错误，在另外一些时候，只要没有找到动态库，都会报该错误。如果出现该错误，就需要检查动态库的名称是否正确，检查动态库的版本是否正确（比如 32 位 Node 使用了 64 位的 DLL）等。</p>
<p>另外，还有一个“Dynamic Linking Error: Win32 error 127”错误比较常见，该错误指没有在 DLL 中找到对应的符号，这可能就需要检查在 ffi 中声明的函数名是否正确以及是否 DLL 版本有偏差了。</p>
<h2 id="在-Electron-中使用-FFI"><a href="#在-Electron-中使用-FFI" class="headerlink" title="在 Electron 中使用 FFI"></a>在 Electron 中使用 FFI</h2><p>由于每一个 Electron 的版本是基于相应的 Node 和 Chrome 版本构建的，所以在使用 FFI 之前需要根据所使用的 Electron 版本安装本地的 NodeJS 版本，否则 FFI 可能会和 Node 版本不匹配，导致提示 ABI 版本不一致：<code>xx was compiled against a different Node.js version using NODE_MODULE_VERSION x. This version of Node.js requires NODE_MODULE_VERSION xx</code>（NodeJS 使用 NODE_MODULE_VERSION 来辨别 ABI 版本）。</p>
<p>这种情况下，可以使用前文提到的<code>electron-rebuild</code>对项目中的所有插件进行重新编译（需要注意本地 NodeJS 的 ABI 版本一定要和 Electron 中 NodeJS 的 ABI 版本一致）。</p>
<p>另外，需要注意的是，Electron 5 以上的版本使用了 NodeJS 12 的 ABI，但是当前的 Ref 库并不支持该 ABI，会导致编译失败。不过已经有人提交了 pull request 进行修复，相信之后会有一个可用的版本出来。</p>
<p>另外，也有了 NAPI 版本的 FFI 和 Ref，分别名为<code>ffi-napi</code>和<code>ref-napi</code>，和 ref 相关的包，比如 array 和 struct 拓展，也有了相应的 NAPI 版本，命名规则同上。使用 NAPI 的 Node C++ 拓展接口相对稳定，是今后的趋势。</p>
<p>最后，Electron 版本可以在<a href="https://electronjs.org/releases/stable">https://electronjs.org/releases/stable</a>中查看，而 NodeJS 及其 ABI 的版本可以在<a href="https://nodejs.org/en/download/releases/">https://nodejs.org/en/download/releases/</a>中查看。</p>
<h1 id="一些资源"><a href="#一些资源" class="headerlink" title="一些资源"></a>一些资源</h1><p>最后，在这里放上最近踩坑时候经常使用到的一些资源吧：</p>
<ul>
<li>ref 文档：<a href="http://tootallnate.github.io/ref/">http://tootallnate.github.io/ref/</a></li>
<li>ffi 文档：<a href="https://github.com/node-ffi/node-ffi/wiki/Node-FFI-Tutorial">https://github.com/node-ffi/node-ffi/wiki/Node-FFI-Tutorial</a></li>
<li>基于 ffi 的 win32 api：<a href="https://github.com/waitingsong/node-win32-api">https://github.com/waitingsong/node-win32-api</a></li>
<li>v2ex 中的 node-ffi 食用指南（难吃）：<a href="https://www.v2ex.com/amp/t/474611">https://www.v2ex.com/amp/t/474611</a></li>
</ul>
]]></content>
      <categories>
        <category>技术</category>
        <category>NodeJS</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>NodeJS</tag>
      </tags>
  </entry>
  <entry>
    <title>追寻良质——禅与摩托车维修艺术</title>
    <url>/notes_on_zen_and_the_art_of_motorcycle_maintenance/</url>
    <content><![CDATA[<p>在挺久之前，可能是刚读大学的时候，就隐约听说这本《禅与摩托车维修艺术》的大名，也得到了几位朋友推荐，但在当时，翻过几页后发现根本看不下去，就束之高阁了。这次终于在好奇心的不断怂恿之下花费了一些意志力重新拾起，终于随着情节的展开，同作者一起踏上了骑着摩托车横穿整个美国的长途旅行。</p>
<p>在最开始的认知中，我认为这场摩托车旅行一定是一个非常酷的故事，但后面发现虽然故事的确很酷，却非第一印象中的那种酷。</p>
<p>在这场旅行中，我在了解美国地理的同时，也被作者和“斐德洛”的暗中较量所吸引，对父亲与克里斯的矛盾所疑惑，更为寻找“良质”同作者（或者说是“斐德洛”）一起陷入了对当下的反思。</p>
<span id="more"></span>

<h1 id="故事"><a href="#故事" class="headerlink" title="故事"></a>故事</h1><p>先大概说说这个故事吧。本书讲述了作者与儿子（还有友人）骑着摩托车进行了横穿美国的长途旅行，在旅途中，他骑着摩托车通过多次“肖陶扩”(Chautauqua，看起来是一种露营+讲学的结合体，在上个世纪的美国比较流行)对过去的自己的思想与经历进行了回忆和反思，最终也与过去的自己及儿子和解的故事。</p>
<p>随着故事的深入，读者会发现作者的大脑中存在着两个人，一个是当下的他，即波西格，另一个是过去的他，即斐德洛。这都是由于斐德洛由于对“良质（Quality）”的狂热探求，导致他的精神出现问题，而后他接受了电击治疗，导致他的思维、记忆和性格产生了变化，变化后的人就是现在的他。</p>
<p>这是作者在故事结构上非常巧妙的安排之一，一开始读者读起来总觉得作者说的某些话语很奇怪，隐隐觉得哪里不对劲，有时候甚至会感到后背发凉。直到后面才知道那些话其实是“斐德洛”借作者之口说出来的，这才恍然大悟，并在不知不觉中接受了这个设定，为后面对斐德洛思想的探寻做足了铺垫。</p>
<p>另一个比较有意思的地方是“虚实结合”（不确定这个词用在这里是否准确）。在书中，作者对“禅”的思考和摩托车旅行是相互交织展开的。在对骑行的描写中可能随时会开始“肖陶扩”，转向对思想的讨论，而在讨论进行的过程中也可能会切换回对旅行的而描述。这样的切换在写作的时如果把握不好就会显得十分生硬，但是作者的处理还是相当到位的——旅行中的种种波折与斐德洛在思想上的进步与挫折以及作者和儿子的关系都在相互映照，它们的节奏也都完美契合。</p>
<p>不过，也不是所有的情节都是完全契合，而是在契合中又有升华。比如在第三部分的作者选择了和当年不同的路，致使他没有再次“发疯”。故事大概是作者从“斐德洛”的老朋友狄威斯家中出来以后，准备攀爬一座雪山，这座山不是一座普通的沿途小山，而是一座需要数天才能攀爬上去的山，而且还是斐德洛当年在思考良质的过程中会经常去爬的山。因此，这座山其实也不仅是现实中的一座山，其更是一个隐喻，隐含着斐德洛对良质的艰苦探索的过程。</p>
<p>而这次，他和儿子在进行持续几天的艰苦跋涉逐渐接近山顶的时候，因为他担心在山顶会产生”雪崩“，就选择不再登顶了。可以看出，雪崩在这里其实也是一个隐喻，这象征着一旦到了山的顶点，即找到所谓”良质“后，就会遇到雪崩，即作者思想上的崩溃。而这次作者选择不完全爬上山顶，就避免了再次雪崩的情况，只是在崩溃的边缘而没有完全失控。而最后，儿子或者说亲情“解救”了他（或者说是斐德洛），让他的神智重新回归了正常。</p>
<h1 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h1><p>作者的思考由旅行同伴约翰夫妇对学习摩托车维修的抗拒开始。他认为约翰夫妇由于从事的是艺术工作，所以害怕（或是说不喜欢）现代科技所使用的分析方法，因此主动屏蔽对机械运行原理的学习与思考，而只是将它们当作一个整体来考虑。</p>
<p>作者从这里引出了“古典的”和“浪漫的”这一对立认知形式。他认为古典的认知就是像现代科学这样，凭借理性对某一事物不断细分，以求认识其中的规律；而浪漫的则是凭借直觉与灵感，对事物进行把握。而当代这两种认知方式之间的分歧越来越严重，达到了难以对话的程度。正如他与约翰夫妇之间的分歧那样。</p>
<p>可以看出，作者很难找到一个合适的形容词对这两种思想进行表达，所以使用两个在我们语境里看起来不那么准确的词语进行描述。我认为古典的意思就是现代的理性主义，强调将事物划分为理性中不同的领域和范畴，并对范畴进行不断地细分，以求掌握事物运行规律的认知形式。而浪漫的则指一种综合地认知事物地方式，强调事物间的共性与联系，但往往由于世界的复杂性，无法用科学原理进行证明或证伪，所以有可能被认为是某种超越科学的“神秘主义”。而我之所以认为在我们语境里这两个描述不够准确，是因为“古典的”在西方世界里就是理性的化身，而我们则恰恰相反。</p>
<p>接着，作者对科学进行了反思，他认为科学也是某种潜藏在我们大脑中的“鬼魂”，相信科学的我们并不比相信宗教的古人更加智慧。这之后的作者便踏上了对“斐德洛”思想的回顾历程，因此后文的“他”一般均指斐德洛。</p>
<p>他在进行科学研究的过程中发现科学家（他自己当时就是在做化学相关的研究）总是在大胆假设和小心求证中不断前行，但是“大胆假设”环节看起来不太符合理性的逻辑，因为假设会随着科学范畴的增多爆炸式增长，这样就会导致我们会越来越无法从众多假设中找到符合逻辑的结论。</p>
<p>这其实正是现代科学所需要面对的一个很大的问题，更底层地看，这需要我们对自己的认知世界的方式，也就是经验主义进行反思。而作者的反思是通过休谟与康德的对话进行的。休谟曾经对人类的认知模式提出了三个问题：因果问题、归纳问题、应然与实然的问题，这三个问题直指经验主义，如果无法解答它们，那么我们建立在经验上的科学将没有任何价值。康德拯救了经验主义（并向我们抛出了三大批判），他通过引入“先验”这一概念，确认了只有经验是不够的，还需要我们认知世界的思考范式。虽然康德的思想惊艳到了斐德洛，但是斐德洛认为康德的《判断力批判》中对美学的理性解释却非常丑陋。</p>
<p>可以看到，作者在这里对科学的理性和感性对立的认知已经从当初的经验阶段（科学的危机）走向了理论阶段（认识论），他已经开始摆脱实践，转而走向了纯粹形而上的追寻。事实上，他也从最开始就读的大学退学，转而去韩国当兵，而后去印度修习“东方哲学”。</p>
<p>而后，他开始在蒙大拿州立大学教授修辞学。他希望他所在的大学是实质上的大学，而非形式上的大学，即空有大学的建筑，而没有大学的思想，他的脑中逐渐构建了一个理想中的“理性教堂”。他在那时，又开始了在课堂中的实践，但是发现了理性在修辞学上的矛盾之处——无法使用理性对修辞学进行归纳和总结，最后形成规律，因为作者在写出伟大作品的时候，并不会在脑中实现想好自己要用什么修辞，好的作品都是靠着灵感这种非理性的东西所完成的，那么他教授学生通过理性归纳得到的这些规律又有什么意义呢？所得到的都只是一堆拙劣的模仿。</p>
<p>而这其中，为了完成一部好的作品中，究竟是什么在起作用呢？就是“良质（Quality）”。他知道良质这个东西是真实存在的，写出好的作品、辨认好的作品都需要依靠良质，但良质却又不依靠理性存在。从这里开始，他踏上了找寻良质的一条“不归路”，从这里起，现在的作者和儿子也开始攀登雪山，全书逐渐迈向高潮。</p>
<p>一开始，他的一个重大发现是良质根本无法被定义，因为一旦被定义，或者说是被范畴所规定，良质就不再是良质了。所以他在读到《道德经》中“道可道，非常道”这句话时，才觉得遇见了知音，良质和“道”居然是一个东西。不仅如此，他认为良质和美学、佛学以及神学其实都是一个东西。宗教的、东方的与艺术的，这些无法被理性哲学所把握的（或者是被作者所鄙视的”范畴学家“所毁坏的）事物，在良质这里得到了统一。</p>
<p>可以看到，作者终于从西方的理性思维和二元论中跳脱出来开始意识到许多无法被理性所把握的事物的存在，但是很快我们将看到由于他所在的社会环境以及他的历史局限性，他还是无法摆脱被二元论分割以及被范畴所规定的命运。同时也可以看到作者希望对思想世界进行统一的野心。</p>
<p>现在的作者不仅阅读了斐德洛的手稿，还更广泛地阅读了其他人的作品，发现了许多类似的思潮，他们都希望能从不同的侧面爬上这座山峰（但殊不知老子已经在数千年前在山顶俯视他们了）。比如著名数学家和哲学家庞加莱，他意识到科学，包括数学只是一种解释世界的工具。我们能通过理性推到出无数可能的世界，但是无论它们在理性上有多么完美，但是最终被应用的一定是能更好解释现实世界的现象的学说。那如何从成千上万的理论中挑选出合适的理论呢？庞加莱认为这个是灵感，或者说是潜意识，但由于纠结于主体与客体分离的二元论中，他没有得到具体的答案，而作者认为答案就是”良质“。</p>
<p>接下来，作者探讨了良质的应用，特别是在解决某些问题（如修理摩托车时）被卡住的时候，良质会帮你度过难关。他提出了一个很有意思的比喻，古典的认知方式是火车的引擎，可以让火车开动，但是浪漫的认知方式（即良质）却像铁轨那样指引了火车前行的方向。</p>
<p>后面，他又对康德发起了挑战，认为人在意识到事物之前的那一刹那，产生作用的其实就是良质，这时候良质是一个一元论的概念，主客体是一体的。为什么他认为科技是丑陋的？因为科技是被严重二元化的，是被分析的，没有良质的存在。同时他也总结了能将良质应用于工作中的方法，即让内心进入真正的平静，从而获取进取心。</p>
<p>读到这里，看起来作者已经找到了良质的关键之所在，已经即将登顶那座雪山，但是情况却急转直下。因为他希望继续对良质进行深入研究，于是他希望去芝加哥大学的一个叫“观念分析与方法研究”的交叉学科就读博士学位，继续对良质进行探究。然而他去了之后，遇到的阻力不再是近代的休谟康德黑格尔，而是西方理性思维的源头——苏格拉底、柏拉图和亚里士多德。他与委员会，即这几位思想家在现代的化身，特别是亚里士多德的交锋才刚刚开始。他为了保护他的发现——良质，开始变得狼性，时刻准备与委员会进行战斗。但最后他的心智失去了平衡，走向了疯狂。</p>
<p>（为什么我这里没有介绍他们之间你来我往的交战过程呢？是因为我学艺不精，对古希腊哲学知之甚少，无法支撑我进行有效的总结。希望之后有机会补充吧。）</p>
<p>最后，现在的作者在儿子的牵引下，没有重蹈之前的覆辙，走向了一个完全不同的结局。</p>
<h1 id="什么是良质"><a href="#什么是良质" class="headerlink" title="什么是良质"></a>什么是良质</h1><p>我相信所有读完这本书的人（包括我自己），在合上书之后，还是会不断思考这个问题：“良质”究竟是什么。</p>
<p>接下来是我个人的理解：</p>
<p>但凡问出这个问题，就意味着已经自己的思想已经被理性主义的幽灵所掌控，因为理性主义总是希望将事物归为一个范畴，然后进行分析总结，最终把握这个事物。</p>
<p>但是理性走到这里，却只能碰壁了，因为“良质”无法被范畴所规定。这里再次化用《道德经》开头的这段话：“道可道，非常道；名可名，非常名。无名天地之始，有名万物之母。”大概意思是，道只要被名说出来，那就不是原来的道了。那道德经怎么来解释这个道呢？就只能通篇说道不是什么，通过不是来表现出其是什么。所以我们也只能说出“良质”不是什么，而无法说出其是什么。</p>
<p>那么良质不是什么呢？这里的答案就很明确了，那就是能被范畴所规定的各类事物，也就是理性。</p>
<p>我觉得还需要对范畴还想多说两句，它只是我们大脑中对事物强加的一种观念，便于对这个事物进行把握。但是，这只是大脑的思维模式，并不是真实的物质世界，物质世界给我们大脑所传递的，只有一堆混沌的信号罢了，我们是通过某种观念（可能是先天的，也可能是经验）对信号进行处理，从而形成认知。而至于为什么会是现在这样，那就是另一个话题了，需要从语言与存在中找寻答案。</p>
<p>说完上面这些，可能还是不能完全让人明白什么是”良质“。但是如果此时还没有明白，我也没办法，只能寄希望于某一刻产生的思想火花了。其实并不只有我，古代的先贤们也没办法。因此，他们管这件事情叫“悟道”或者叫“开悟”，而佛学还有一个专门形容一个人开悟难度和可以开悟程度的词，就是“慧根”。</p>
<h1 id="几点思考"><a href="#几点思考" class="headerlink" title="几点思考"></a>几点思考</h1><p>首先，我想试着简单分析一下我所认为的作者精神崩溃的原因。</p>
<p>从书中的描写可以了解到，作者在最开始是一个纯正的理性信徒，但通过发现的数个矛盾，悟到了”良质“，发现了一个更广阔的非理性（也可以称之为感性）世界的存在。而后，他开始向理性世界的中心，即古希腊三杰在现代社会的代理人主动发出挑战，并在挑战的过程中精神崩溃。</p>
<p>可以看出，他前期的艰苦探索都是非常积极的，甚至在打破二元世界，接受一元论与感性世界的时候，都没有表现出太多的痛苦。但是在挑战理性权威的过程中，他开始变得好斗，并且把学术上的争论上升到了个人的层面，甚至有了一些被迫害妄想症的味道，这导致他最后吞下了苦果。</p>
<p>但是，他真的完全接受一元论，或者说是活在一元论中了么？我看未必。委员会最开始见到斐德洛的时候，希望使用范畴把他的研究，即良质进行规范。如果是我，我会认为已经跟你说了这么多，你这个人却还没有开悟，没法交流，直接扬长而去便可。但是他却留下来，在逻辑与范畴中开始斗争。这是一个非常不明智的决定，也是注定不会成功的斗争。这可能是由于他希望统一思想世界的野心，也可能是因为他作为一个出生开始就接受二元论教育的人，对一元论还无法向我们这样融汇贯通。</p>
<p>以上是他个人的局限性，当然还有历史的局限性。作者接受教育的时候，存在主义应该在美国还没有大面积流行起来，而共产主义在美国更是一种禁忌，这导致存在主义的两大先驱任务——马克思和海德格尔的思想和著作，完全没有进入作者的视野，如果他早些读到这些著作，可能会对良质拥有更加深刻地认识了。同样地，他也不会发起那场同古希腊先贤们地那场毫无意义地争斗，因为已经有人帮他做过了。他要做的，可能会是把这套理论进行实践，无论是在他擅长的修辞学上，还是在艺术上，甚至是像马克思那样在社会革命上。</p>
<p>另外，在读完以后，还看了知乎上对本书的一些讨论，和此书高达8.6的豆瓣评分和创记录的销量完全不同，几乎都是负面的评论，这让我很意外。看下来许多人几乎都觉得这本书完全不值得读，觉得是“机场文学”，里面讨论的哲学都是所谓“民科”级别的，如是云云。</p>
<p>我承认知乎上可能会有许多通晓哲学思想的大师，但是这本书对于一般读者而言，其难度其实并不低，甚至可能会有很多人会像当年的我那样，因为完全没有基础知识导致根本看不下去。读书也是“小马过河”，不能用自己的标准衡量别人。</p>
<p>哲学这门学科在希腊语中的本来的翻译是“爱智慧”，它不像科学那样有固定的范畴与研究方式。就像作者对“良质”的探索那样，虽然早有人从一条路抵达了山顶，但还是需要有更多的人从更多的路探索更多的山顶，虽然他们大部分人都停留在了山底或者是半山腰，但是这些探索不论是对个人还是对社会来说都是有意义的。绝不能当作者在芝加哥遇到的“委员会”中的那类人。</p>
<p>最后，回到本书最开始作者对科技的思考。作者认为他那个时代的科技产品都遵循“古典式”的思考方式，没有“浪漫式”的思考，这导致很多人不喜欢科技产品，更不愿意了解其原理。而在现在这个时代，我认为事情已经悄然发生了很大的转变。首先，我想到的就是乔布斯对科技与人文十字路口的论断，他用苹果的产品证明了科技与人文是可以相互融合的。另外，我也也看见身边越来越多的人成为了”全栈开发人员“，他们不仅对技术了如指掌，更对用户交互设计了然于心。最后，昨天夜间还看见了何同学的毕业视频，这不也正是这种精神的完美阐释么？不知波西格在成书多年以后，看见如此这般的当下，会有何感想。</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>读书笔记</tag>
        <tag>禅与摩托车维修艺术</tag>
      </tags>
  </entry>
  <entry>
    <title>《科技创新与创业》课程总结</title>
    <url>/technology_innovation_enterpreneurship_course_comment/</url>
    <content><![CDATA[<h1 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h1><p>上学期同<a href="http://www.cyprestar.com/">Thesharing</a>以及 Stone 去北大旁听了将近一学期的《科技创新与创业》（课程网站：<a href="http://net.pku.edu.cn/dlib/pkuxstart/">http://net.pku.edu.cn/dlib/pkuxstart/</a>）。 这个课程由百度七剑客之一的雷鸣主持，邀请了很多行业内有名的企业家来讲课，几乎都是北大校友（感慨一下北大校友文化真的很棒）。 我想在这篇文章中总结一下他们所讲的一些能引起我思考的观点和内容，以及经过我提炼加工所得到的结论。</p>
<h1 id="三角关系"><a href="#三角关系" class="headerlink" title="三角关系"></a>三角关系</h1><p>这里的三角关系并不是指恋爱中的那种复杂关系，而是指一个行业中相互制约的几个要素之间的复杂关系。其中一种要素发生大的变化（一般是非连续性的），这个产业整体以及几个要素之间的相互关系也会随之发生变化，这往往预示着新机会的到来。</p>
<p>微博 CEO 来去之间举了一个例子——移动互联网中存在的三角关系：运营商、手机制造商和互联网公司。 这个三角关系中某个要素发生变革就会导致移动互联网行业的巨变，会有一波新的公司起来。比如运营商 4G 网络的普及，使得网速变得越来越快，流量变得越来越便宜，这就催生了短视频行业的兴起，这也催生了一系列的公司和产品，比如快手和抖音。</p>
<span id="more"></span>

<p>明略数据的吴明辉提出在大数据这个产业中也存在一个三角关系——人、数据源和场景。 数据源在未来物联网时代会发生很大的变化，数据世界中的主导位置可能会从原来的因特网中的数据变为物联网传感器中的数据，这对于很多公司来说是一个全新的机会。</p>
<p>我认为，这些三角关系代表了一个场景之下的几个利益方，某一个方面出现技术或者认知方面的突破，都会造成行业的重新洗牌。比如在虚拟现实产业链中，不仅仅有设备制造商和内容生产商，还会有运营商的机会，因为 VR 数据的传输需要大量的带宽。所以，5G 时代到来以后，VR 会不会又重新火起来呢？</p>
<h1 id="产品方法论"><a href="#产品方法论" class="headerlink" title="产品方法论"></a>产品方法论</h1><p>很多嘉宾都不约而同地说到了俞军老师有关用户收益的产品方法论：</p>
<blockquote>
<p>产品的价值（用户的收益）= 新体验 - 旧体验 - 迁移成本。</p>
</blockquote>
<p>这条方法论十分重要，是衡量你做出的一个新产品是否可以干掉旧产品的一个关键因素（这条方法论也经常被<a href="https://www.jianshu.com/u/55ec7c6b7e42">SGanker</a>提到）。</p>
<p>我认为这条方法论的基础是一个共识——真正的需求不是被创造出来的，而是来自人类的本性。你所创造的产品是使用了一个新的形式或者新的技术来包装这个古老的需求。所以，一定要想清楚，你在做这个产品的时候到底替代了谁，新的产品解决了什么旧的问题。</p>
<p>另外一个问题是如何区分真的需求和伪需求。这里 OFO 的戴威提供了一个方法——将这种需求通过英语 Need/Want 归类，如果是 Need，那么这个需求就是真的需求，如果是 Want，那么这个需求就是伪需求。</p>
<p>不仅仅要检查这个需求是真需求还是伪需求，更要思考这个需求是不是只有自己需要，还是你的朋友也需要，更或许是人人都需要。</p>
<p>这里也有一个技巧，就是把自己的产品和别人去讲解，看他们是否感兴趣。不过身边的人可能会担心得罪你，不愿意说你产品的坏话，所以可以要找陌生人后者敢于说真话的人来介绍你的产品，来了解这个需求到底是不是真需求。</p>
<h1 id="顺势而为"><a href="#顺势而为" class="headerlink" title="顺势而为"></a>顺势而为</h1><p>说到顺势而为，我第一个想到的是雷军和他的顺为资本，以及他“风口上的猪”的理论。我想，他也是因为带着金山硬挺了这么多年才悟出的这个道理吧。我想，现在的小米就是他顺势而为的结果。 关于顺势而为，还有一句话我很喜欢，也想放在这里——“一个人的命运，不仅要看个人的奋斗，还要看历史的进程。”这句话从辩证唯物的立场讨论了为什么要顺势而为。</p>
<p>下面就来讨论一下如何顺势而为。</p>
<h2 id="从更高的高度来看问题"><a href="#从更高的高度来看问题" class="headerlink" title="从更高的高度来看问题"></a>从更高的高度来看问题</h2><p>微博 CEO 王高飞从很高的层次来分析了微博发展的时候遇到的许多问题以及解决方法。他和他的团队的思考更多的不是现在用户的需求，而是未来五年左右中国经济社会的发展可能会让某些用户的需求变得旺盛，微博就会在这里提前布局。而对于许多目前无法超越的竞争对手，微博选择了从大局考虑，不去正面竞争而更换别的赛道（关于赛道，下面还会提到）。</p>
<p>比如微博在 2012 年就判断了中国经济未来五年的趋势：比如移动互联网的增量更多来自于二三线城市。而微博当时发力的主要方向就是去做二三线城市的消费升级，上线了一系列针对这部分用户的产品。</p>
<p>但是这样的分析可能也会有所遗漏，比如微博没有想到五六线城市的下沉也会是一个机会，而这个机会造就了快手的极速增长。</p>
<p>从这些嘉宾的口中，我也大致总结了大家都认为未来可能会蓬勃发展的行业：</p>
<ul>
<li>首先还是互联网和 AI。互联网会和传统行业更深地结合（也就是互联网+），而 AI 也会改造更多的行业。</li>
<li>另外一个风口是生物医药（我之前的确从未关注过）。由于生物医疗行业中基因组学和蛋白质学这些基础技术的突破，导致未来这个行业很可能会非常蓬勃地发展。现在，投资机构对于生物医药行业的投资已经是仅次于互联网行业的存在了。</li>
<li>随着中国人口红利的消失，很多产品野蛮生长的机会已经不是很大了。而大家对于消费升级的追求导致会有更多的创新品牌诞生。</li>
<li>人口红利消失也会导致 2B 的服务会越来越多。</li>
</ul>
<p>所以如果要创业，那么一定要选择具有先发优势的行业，即判断未来几年的主力消费人群和用户增量会在什么地方。</p>
<p>最后需要提到的是，现在全面创业的热潮已经过去，很多创业公司纷纷死去，只有很少具有竞争优势的公司存活了下来。</p>
<h2 id="赛道的选择十分重要"><a href="#赛道的选择十分重要" class="headerlink" title="赛道的选择十分重要"></a>赛道的选择十分重要</h2><p>赛道理论是投资界的一个理论。他们将某一个细分的行业或领域称之为一个赛道。而这个赛道上会有许多类似的公司在竞争（很像在一起赛跑）。既然是比赛，那么肯定会有前几名，而投资机构就会投资头部的那些具有竞争优势的企。等这个赛道成熟以后，可怕的幂律就会发生作用，前几家公司会吃掉这个赛道中九成以上的市场，后面的公司几乎没有任何机会。</p>
<p>所以，选择一个自己可以具有竞争优势的赛道就显得十分重要了。关于不同赛道上的公司的信息，可以在一些咨询公司的网站上面看见（比如艾瑞咨询：<a href="http://www.iresearch.com.cn/">http://www.iresearch.com.cn/</a>）。</p>
<p>另外，你所选择的赛道要具有空间和时间上很强的成长性。有空间的成长性，行业的天花板高，大家有充足的空间赚到很多，才会有人愿意投入资本和时间将这个市场做大。有时间的成长性，说明你做的方向是正确的，等五年到十年以后，时间还是你的朋友。</p>
<h2 id="市场、产品和技术之间的关系"><a href="#市场、产品和技术之间的关系" class="headerlink" title="市场、产品和技术之间的关系"></a>市场、产品和技术之间的关系</h2><p>因为身边同学多是技术出身，所以我接触到的很多人可能都认为技术对于一个公司而言最重要的。但事实可能并非如此——许多产品是由市场拉动而非技术推动的，一般情况下开发一个市场所花费的成本要远远大于技术。所以开发产品时应当从市场的痛点来着手，而非技术高低。</p>
<p>不仅市场比技术更重要，产品也比技术更重要。在设计产品的时候需要有用户视角，使用同理心去思考用户的感受，并培养用户使用产品时的参与感。这里好像又说到了产品方法论，既然说到了，不如再举一个例子：腾讯的 10/100/1000 法则。这个法则要求腾讯的产品经理每个月必须做 10 个用户调查，关注 100 个用户博客，收集并反馈 1000 个用户体验。</p>
<h2 id="商业模式"><a href="#商业模式" class="headerlink" title="商业模式"></a>商业模式</h2><p>一个好的受资本市场欢迎的商业模式需要四个要素：能赚钱（有人买单）、规模性（可复制）、有壁垒（不会被腾讯抄袭）和可持续（未来成长空间很大）。</p>
<p>更好的商业模式不仅考虑了自身的发展，还要考虑到产业链中整个链条的利益分配问题。</p>
<h2 id="非连续性机会"><a href="#非连续性机会" class="headerlink" title="非连续性机会"></a>非连续性机会</h2><p>驱动社会经济发展的核心要素是非连续性机会，只有抓住非连续性机会的公司才可能获得爆发式的发展，并且有机会获得垄断地位。</p>
<h1 id="好公司"><a href="#好公司" class="headerlink" title="好公司"></a>好公司</h1><h2 id="护城河理论"><a href="#护城河理论" class="headerlink" title="护城河理论"></a>护城河理论</h2><p>“护城河”理论是巴菲特提出的。他认为好的公司需要有一条护城河来避免来自外部的竞争。有以下几种创造护城河的方法：</p>
<ul>
<li>一种护城河是单一产品规模，公司拥有一个使用规模非常大的产品，以形成规模效应。互联网公司，如腾讯，ebay，沃尔玛等公司都属于这一类。</li>
<li>另一种是知识产权，比如商标或者一些关键的技术专利。迪士尼、耐克等公司就属于这一类。</li>
<li>最后一种是客户转用其他产品需要很高的成本。比如 Oracle 和微软。</li>
</ul>
<p>几乎所有的好公司都在致力于建立护城河以获取垄断地位，最终占领用户的心智。</p>
<h2 id="如何与大公司竞争"><a href="#如何与大公司竞争" class="headerlink" title="如何与大公司竞争"></a>如何与大公司竞争</h2><p>我一度认为类似“如果腾讯也开始做你们的产品怎么办？”这种问题是无解的。不过听完课以后，我的思路产生了变化。原因有三：</p>
<ul>
<li>首先，你做的业务有可能是巨头们看不上的不怎么赚钱的小业务，除非这个业务以后会成长成为一个巨无霸，那么巨头一般是没有精力或者成本来同你竞争的。但就是这种巨头看不上的业务可能能让你赚的盆满钵满，在未来的某个时间，有娱非连续性机会，这个业务也或许就会成为商业的主战场。</li>
<li>其次，巨头往往都是上市公司，上市公司往往背负着到很多方面的利益。如果他们需要从赚钱的业务上将资源倾斜到其他需要和创业公司竞争的地方，那么他们的股东和员工都可能会不乐意，甚至股价也会下跌很多。所以，他们很多时候可能会选择投资或者收购而非直接竞争。</li>
<li>最后，市场中一直都有许多资本，为了不贬值，它们必须被投资到有很大增值潜力的地方，大公司往往增长不会太大，而增长潜力很高的小公司却可以做到。所以资本市场会愿意把钱交给具有很大增值空间的小公司，和大公司去打的。所以，为了可以和大公司竞争，创业公司需要<strong>业务+资本的双轮驱动</strong>。不仅要做好自己的业务，也要积极向外寻求资本，这样才能有一息存活的机会。</li>
</ul>
<h2 id="垄断才能创造利润"><a href="#垄断才能创造利润" class="headerlink" title="垄断才能创造利润"></a>垄断才能创造利润</h2><p>能够创造价值的公司并不一定可以创造很好的价格。因为在尚未形成垄断的时候，市场上存在着很多竞争对手，博弈论一定会在这里发挥作用，导致你无法让产品或公司有一个很好的价格。</p>
<p>这里说的垄断不一定是产品的垄断，还可以是应用场景的垄断。场景垄断垄断的是消费者的心智。比如苹果公司的产品，虽然从来没有在市场上形成单一品类的垄断，但是它们加起来形成了一个生态系统，它们垄断了消费者的心智。苹果公司靠它获得了非常高的利润率。同样垄断也表现在股价上——苹果公司在前几天终于成为了地球上第一家市值突破万亿美元大关的公司。</p>
<p>这里我还可以用小米公司来举一个例子。小米公司的互联网手机模式在刚出来的时候，受到了众多用户的欢迎，增长非常迅速，表现在资本层面就是估值越来越高。但是随后随着荣耀、OV 等公司加入这个赛道，同小米形成了强力的竞争，小米模式出现了很多问题。小米公司的价值无疑是很高的，但是没有垄断。这种问题表现在股价上就是上市以后几乎两次破发，小米公司并没有得到和价值匹配的好的价格。但是它的生态链以及和用户建立信任关系的商业手段都是在为建立（不同于苹果模式的）新的垄断去做尝试。小米公司的模式究竟能走到何时何地，我们可以拭目以待。</p>
<h1 id="创始人"><a href="#创始人" class="headerlink" title="创始人"></a>创始人</h1><p>先说一个结论，创始人的高度很大程度上决定了企业的高度。因为企业的文化、商业模式以及关键决策几乎都来自于创始人。不过创始人的高度也不是一成不变的，他们会随着公司的成长不断的学习和成长。</p>
<h2 id="领导力"><a href="#领导力" class="headerlink" title="领导力"></a>领导力</h2><p>一家公司的创始人往往就是领导者。领导者和管理者有很大的区别。管理者只需要管理员工，按时按量完成任务即可。但是领导人需要通过他的很强的人格魅力来带领大家一起向前。所以领导人不仅需要做事，还需要做人，不仅要做事做人，更需要有很长远的目光。</p>
<p>做为领导者往往都是很孤独的。麦肯锡健康的樊琴还说，创业不仅孤独，而且几乎没有成就感。因为一切都是从零开始，而且一旦开始就永远没有尽头。</p>
<p>刚刚说过，创始人的高度很大程度上决定了企业的高度，所以创始人需要很强的学习能力，需要在企业成长的同时也不断学习，要和企业一同成长，甚至要比企业的成长还要迅速。但是，创始人不仅仅需要学习，还需要将他的决策力、执行力、组织力和感召力都输出给其他人，营造气氛，让大家一起干起来，也就是“使众人行”。</p>
<h2 id="创始人的选择"><a href="#创始人的选择" class="headerlink" title="创始人的选择"></a>创始人的选择</h2><p>OFO 的戴威给出了他选择创始人的思路。首先，公司只能有一个创始人。其次，创始人和联合创始人之间必须要比较知根知底（比如哥们），同时也最好可以兼具能力上的互补。</p>
<p>另外，价值观的统一也非常重要，创始人之间需要有强烈的相互认可，不然现在的兄弟可能会变成之后的友商。</p>
<p>最不易稳固的结构是只根据需要能力来选择一些不太熟悉的人，雷鸣认为这样的创始团队算是“草台班子”，而草台班子是迟早要散的。</p>
<h2 id="投资人的选择"><a href="#投资人的选择" class="headerlink" title="投资人的选择"></a>投资人的选择</h2><p>将好几位老师的话总结一下，就是：投资人不仅要选有钱的，还要选择除了钱以外可以给企业提供更多帮助的人。另外在敲定投资的时候，一些法律问题一定要了解清楚，不然可能会因为协议中的一些条款就让自己倾家荡产。</p>
<h2 id="商业和社会成熟度"><a href="#商业和社会成熟度" class="headerlink" title="商业和社会成熟度"></a>商业和社会成熟度</h2><p>商业不是过家家，创始人需要很强的商业成熟度和社会成熟度。</p>
<p>商业成熟度主要反映在对商业本质的认识：比如有客户来源、商业模式、对竞争对手的认识和投资策略等等。创始人没有很好的商业成熟度，公司一定是无法存活的。</p>
<p>社会成熟度来源于步入社会以后对社会的认识，比如经验、能力、人脉和<strong>价值观</strong>。董小玲认为，这些成熟度在高校中是很难锻炼出来的，而在大学生走上社会的半年左右的时间里，会逐渐积聚。这个时候创业者既对社会有了清醒的认识，还没有忘记自己的理想，是创业的最佳时机。</p>
<h2 id="家庭关系"><a href="#家庭关系" class="headerlink" title="家庭关系"></a>家庭关系</h2><p>令我诧异的是有很多创业者创业中断的原因不是融资失败、竞争对手或者政策问题等等来自外部的因素，而是因为家庭成员之间意见不一致的问题。这里的家庭成员多是另一半、自己的父母或者是另一半的父母。</p>
<p>因为创业面临了很大的不确定性，所以如果其他家庭成员（特别是另一半的家长）接受不了这种不稳定性而不同意你去创业，这无异于后院起火，创业很可能就会失败了。</p>
<p>这里董小玲提到了一个规律，就是如果父母对创业特别懂或者一点都不懂，这都好办，但是如果父母半懂不懂那可能麻烦就会大一些了。</p>
<p>所以如何平衡创业与家庭之间的关系，是往往被创业者忽略的一个很大的问题。</p>
<h1 id="一些其他的话题"><a href="#一些其他的话题" class="headerlink" title="一些其他的话题"></a>一些其他的话题</h1><p>以下是嘉宾们对于一些热门话题的比较有趣的观点。</p>
<h2 id="区块链"><a href="#区块链" class="headerlink" title="区块链"></a>区块链</h2><p>邓锋认为，对于区块链应该区分链圈和币圈。区块链解决了信任问题，也解决了价值重新分配的问题，而币圈都是骗子。</p>
<p>一个技术（比如区块链）的出现并不能颠覆一个行业，只能作为增量而存在。</p>
<h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p>吴明辉认为数据是对世界的观察，帮助没有观察的人解决信息不对等的问题。它可以创造信任，降低决策成本，帮助决策者进行快速的决策。但另一个角度来看，数据不一定是真实的，因为它是主观的，它本身也没有任何价值。但是只要它存在，就可以创造信任，而通过信任就会产生很多的价值。</p>
<p>另外，历史的发展多是不连续的，而数据代表过去，所以过去的数据很难预测长期的未来，但是它可以预测短期的未来。</p>
<p>商业的本质也是在利用信息不对等来解决问题创造价值，如果利用数据来做生意，使得信息对等了，那么商业就不存在了。所以用数据做生意是商业中的一个悖论。</p>
<h2 id="商业计划书"><a href="#商业计划书" class="headerlink" title="商业计划书"></a>商业计划书</h2><p>弘道资本的李晓光认为商业计划书的目的是为了获得投资，核心内容是你投资我可以赚大钱。商业计划书的质量决定了 VC 是否会找你进行面对面沟通。</p>
<p>商业计划书需要准备几种：五分钟版本、演示 PPT、完整计划书、未来财务预测（需要专业的财务模型）。</p>
<h1 id="推荐书"><a href="#推荐书" class="headerlink" title="推荐书"></a>推荐书</h1><p>课堂上有许多老师给出了推荐阅读的书目，我也在这里略作总结：</p>
<p>最后，使用戴威的一句话作为文章的结尾吧：</p>
<blockquote>
<p>不要迷信于别人的经验和方法论，创业者应该在创业中不断尝试，找到属于自己的方法论。</p>
</blockquote>
]]></content>
      <categories>
        <category>课程</category>
      </categories>
      <tags>
        <tag>课程</tag>
      </tags>
  </entry>
  <entry>
    <title>我眼中的“通信”</title>
    <url>/telecommunications_in_my_mind/</url>
    <content><![CDATA[<p>想来已学通信三载之久，却也未习得多少皮毛。在此，我想将自己这几年来对通信的浅见写下一二。文中可能会有一些观点但我可能因为能力精力有限无力举出太多示例论述之，之后有能力和时间我会在 blog 中给予补充说明。如果文中有不对地方，希望可以给予批评指正，我不胜荣幸。</p>
<h1 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h1><p>小时候，爷爷有一台自制的电子管收音机，虽然已经年久失修无法使用，但是我还是以此为乐，经常想看看摸摸，问爷爷里面的构造。有时候还会从外面捡回家别人废弃的电路板，把零件拆下来看，爷爷用我拆下来的这些零件修好了很多家电。</p>
<p>家里第一次上网，刚可以访问 google 的时候，我非常兴奋，就拿起 modem 的线，想看看拨号连接的时候会有什么变化发生。可是没有发现任何变化，只知道了电话线里面有电，来电话的时候摸的话会被打得很痛。回想起来，那应该是我第一次对通信提起兴趣。</p>
<p>到了高中，一次偶然机会，我接触到了《无线电》杂志。看着里面的各种稀奇古怪的电路原理图，虽然很晕，但好奇心还是强迫我去了解这到底是什么原理。从志鹏那里得到了一本《小功率的力量》，还从他那里学习到了基尔霍夫定律和一些交流电的相量算法，但是那时候不怎么看懂微积分，所以只照猫画虎马马虎虎做过一个简单的无线电收发器，拿去跟朋友玩，发现只能听见模模糊糊的声音，根本不知道对方是谁更不知道说的是什么。</p>
<p>之后，我又自学了 C 语言，碰巧又在《无线电》中看到了有关 51 单片机和 Arduino 的介绍，发现了使用软件编程方式来实现硬件逻辑会如此简单，也明白了原来通信还有遵循章法——通信协议（比如串口通信和 IIC 协议）。</p>
<p>中学生活愉快地结束之后，志愿不怎么犹豫就填写了北京邮电大学的通信工程专业。</p>
<p>那时候，想法很天真，认为通信就是可以愉快地学习电路原理，做个芯片啥的，知道怎么把信息传给别人，还可以写出来像 QQ 一样厉害的软件。</p>
<p>回忆赘述地有些多，不过亦可以作为一个对比，看看这几年我到底有何长进。</p>
<p>下文我想就我见到的几个方面来说说现在我眼中看见的通信。</p>
<span id="more"></span>

<h1 id="“考古”信息和通信"><a href="#“考古”信息和通信" class="headerlink" title="“考古”信息和通信"></a>“考古”信息和通信</h1><p>许多时候提起通信，大家会认为这是一个近代社会，特别是电报发明之后才有的事情。如果说可以想得更远一些，那么很可能会想到古时候还有书信、飞鸽传书甚至还有烽火戏诸侯。</p>
<p>可是追溯到这里就应该停止了么？我先说说我理解的通信，再继续沿着历史的脉络去溯源。</p>
<p>我看来，通信就是通过某种媒质（信道）将某种信息从信源传到信宿的一个过程。</p>
<p>现在来思考更早之前的古人都做了些什么。</p>
<h2 id="八卦"><a href="#八卦" class="headerlink" title="八卦"></a>八卦</h2><p>八卦相传起源于伏羲，他通过八卦代表的”阴阳五行”的推演关系来解释这个世界。如果熟悉二进制的话，由八卦中的”8”可以很快联想到。观察八个卦象，果不其然，卦象都是由三位二进制的符号表示而来，这不就是一个原始的三八译码器？而卦象的推演，和 lambda 演算有些相似，所以这不也就可以将八卦理解为一个原始的图灵机么？所以八卦的本质是计算，作为卦象，也就是作为二进制信号，是当时人们发明的一种信息记录的手段。</p>
<h2 id="结绳记事"><a href="#结绳记事" class="headerlink" title="结绳记事"></a>结绳记事</h2><p>在文字发明之前，古人已经想到了用结绳记事的形式来表示信息，他们用不同的绳结表示不同的含义，已经可以将现实中的事物转化为抽象的符号表示。</p>
<p>那怎么完成通信呢？很简单，信道就是视距的光线传播。大家都看一眼那根绳子，就知道之前发生了什么事情，比如打到了几头野兽，部落里现在还有多少人。这不也是一种更加古老的通信方式？</p>
<p>在这里，我必须要感谢纪阳老师的一节课上他在时空的维度上对我对通信的认识进行的启发。</p>
<h2 id="更多的发现——社会的发展与通信的关系"><a href="#更多的发现——社会的发展与通信的关系" class="headerlink" title="更多的发现——社会的发展与通信的关系"></a>更多的发现——社会的发展与通信的关系</h2><p>每次人类的发展无不伴随着通信的进展，说得更深入一些，是通信所带来的连接的进展，这是一个有趣现象。</p>
<p>可以观察到，先秦诸子百家争鸣的时候，人们的连接水平（也可以说是通信方式）较之以前，已经有了一些进展，人们可以乘坐交通工具（比如马车）进行大范围迁徙（全国范围），借此，有许多文人可以四处游学传播思想，思想之间的到碰撞，产生了许多哲学观点，构建了中华文明世界观和价值观的基础。</p>
<p>再来看看近一些的事情，大航海时代，西班牙人跨过大洋，走向了世界各地，将信息传播的范围扩展到了全球，人们知道了国家以外还有许多文明的存在，于是刺激了商业贸易，和殖民主义，客观上加强了文化的传播与交流，创造了长达将近两百年的繁荣的时代。现在，信息的传播已经从大陆内部迁移到了更广阔的大陆之间。将更多的人拉入了一个协作之网。</p>
<p>之后的第一次工业革命，机器印刷品让信息的保存传播范围更广，失真更小；第二次工业革命发明的电报电话更是将整个世界联系成为了一个紧密的协作共同体，使得跨国公司成为了可能，这促使了人类工业文明的极大进步。</p>
<p>到了现在，全球的互联网用户已经超过了 33 亿，大约占全球人口的一半，这个是多么恐怖的一个数字！将如此多的人拉入了一个全球协作的大网之中，人与人之间的交流共同变得极为便捷，生产力得到前所未有的解放和发展。</p>
<p>通信与发展孰因孰果我不确定，但我更愿意相信是通信技术和距离的不断发展，引领了人类社会的发展，创造了如此多的价值和财富。</p>
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><p>提到现代通信，不得不说的事情就是网络。我想这是我们现代通信人为全世界各行各业做出的一个不可磨灭的贡献。在我看来，互联网如今的发展，并不是一般认为的我们通信行业遭受了前所未有的打击，而是一次绝好的发展机遇。</p>
<h2 id="连接红利与传统通信行业"><a href="#连接红利与传统通信行业" class="headerlink" title="连接红利与传统通信行业"></a>连接红利与传统通信行业</h2><p>前文所述，随着人类连接水平的不断发展，人们的各行各业都在享受着连接所带来的巨大红利，互联网第一次把几乎整个人类社会拉入了一个全球共同协作的大网中，我们的通信行业更是如此，在发展的前几年，获取了巨大红利。中国移动已经跻身世界五百强第 55 名，中国电信位于第 154 名，AT&amp;T 位于第 34 名，沃达丰位于 141 名（2015 年 7 月数据），所以，在商业世界中，传统通信企业有自己一片不小的领地。</p>
<p>但是，传统通信运营商的排名为何不在最前呢？排名最前的依旧是能源和金融企业。我看来，是因为通信行业提供的基础网络支持是连接的一个基础设施，当基础设施建设基本成型之后，其产生的巨大价值会被各行各业加以利用，因为稍加利用得到非常大的链接红利（从硅谷和中关村互联网创业浪潮中可见一斑）。但是基础设施建设的企业因为并未完全利用其自己搭建的基础设施，所以并不能从中得到很高的利润。比如说，在第二次工业革命中，美国铁路的建设带来了巨大的链接红利，但是最终铁路公司并没有获取最大的利润，而是依旧让能源与金融巨头夺得风头。而现在微信的快速发展以及前几年和运营商之间因利益分成不均导致的冲突也是一个很好的例证。</p>
<p>所以对于所谓的传统运营商，我想可能有两种办法来解决现在存在的问题。</p>
<p>第一，缩小业务范围，放弃一些获利较少的业务（比如语音通信和短消息），将这些顶层业务交给虚拟运营商，将自己变成一个提供专业通信连接解决方案的寡头，利用资金和成本优势，建立大型的数据和交换中心，依靠其他企业在自己平台上的发展，以获取利润；另外，可以加速自己的转型，利用广大的用户基数，形成一种具有”无处不在”优势的面向企业的内容分发平台，并提供数据支持和分析业务。</p>
<p>在我看来，第一种思路虽然有些保守，但在一个自己拿手的细分领域完成这次转变会更容易成功。</p>
<h2 id="网络性质与跨学科应用"><a href="#网络性质与跨学科应用" class="headerlink" title="网络性质与跨学科应用"></a>网络性质与跨学科应用</h2><p>互联网给世界的另一大贡献就是将一个人为可控而且鲁棒性好的网络摆在了科学家们面前。</p>
<p>以前许多无法研究的网络问题，现在可以通过计算机模拟的方法研究；甚至互联网不仅仅本身是一个大的物理网络，它更是由许许多多大大小小的逻辑网络组成，这些逻辑网络虽然性质各异，但都符合网络的基本规律。</p>
<p>一些社会学、经济学、表面物理学、分子生物学的问题，归结起来都是网络问题。但是因为之前没有很好的工具去跟踪定量地研究，所以只能不断去研究分解论，对于还原论的研究没有很好的工具和理论支持。但现如今，有了这个非常方便科学研究的庞大的互联网络，让许多网络的客观规律呈现在科学家面前，层出不穷的网络模型和分析方法就是很好的证明。对这些模型和规律加以推广和外延，就可以在交叉学科得到应用，这是多么美妙的一件事情。</p>
<h3 id="幂律"><a href="#幂律" class="headerlink" title="幂律"></a>幂律</h3><p>我认为幂律是网络研究中一个无法回避的问题。</p>
<p>人们从无尺度网络模型中意识到了幂律在网络中的存在。不论是每个网络站点的连接数或者是某条新闻的访问量以及社交网络的关注人数，都符合此规律。更广泛地，在任何一个无标度的网络之中，都会出现幂律现象。比如在商业竞争中，公司的市场占有份额中，幂律（亦称 80/20 法则）有着非常明显地体现；而地震规模大小的分布（古登堡-里希特定律）居然也符合此规律。</p>
<p>表面看起来两个活动（一个是人为的经济活动，一个自然的地质活动）几乎没有关联，但仔细思考，这两种活动皆是许许多多的因素（节点）一同构建成为一个复杂网络进行协作的结果，不论是否有人参与，规律都摆在那里，不为所动。</p>
<h3 id="相关性"><a href="#相关性" class="headerlink" title="相关性"></a>相关性</h3><p>互联网带给科学研究视角的另一个转变就是从追求因果到追求相关性。</p>
<p>在很长一段时间，人们都相信世界中万物都是强因果关系（大概可能是从鬼神的传说开始到宗教时代再到以近代科学为支撑的社会都是如此）。不论是那种现象，都需要有一个因果解释。</p>
<p>但是网络因为其复杂程度，很难分析出（也可能根本没有）许多事件发生因果关系，但是可以找到许多事件都有非常大的相关性（一般指的是线性相关）。越来越多的相关性信息摆在人们面前，人们对世界的看法很可能也在一点点地发生转变。</p>
<p>没错，买雪糕的小女孩的收入和游泳馆人数是正相关的关系，可能有许多版本的因果解释，我们无法真正确定究竟哪种版本是对的，但相关的事实就摆在那里。所以现代借助统计学的方法进行的大数据分析多是在相关关系的基础上进行的，我们靠着这一思维的转变，得到了不少有用的结论。</p>
<p>就实用性而言，相关关系的确似乎更加实用（这里用似乎也是因为只是具有相关性而非因果性），就人们的思维观念而言，转变可能就在不知不觉中悄然发生。</p>
<h1 id="信息理论"><a href="#信息理论" class="headerlink" title="信息理论"></a>信息理论</h1><h2 id="我眼中的《信息论》和《信号与系统》"><a href="#我眼中的《信息论》和《信号与系统》" class="headerlink" title="我眼中的《信息论》和《信号与系统》"></a>我眼中的《信息论》和《信号与系统》</h2><p>在这几年的课程中，对我世界观和思维方式影响最大的两门课程莫过于《信息论》和《信号与系统》。</p>
<p>我对《信息论》的认识自认非常浅显。在我的理解中，信息是一种概率存在（它是客观存在，而不是主观定义的），可以进行量化。并且根据香农公式，我们的信息最大传输速率和信道容量与信噪比存在数学和物理上的约束关系，不能无限提升。我们能做的事情，就是找出信息这种概率存在的存在形式的规律和不断逼近香农的信道容量曲线。</p>
<p>我对《信号与系统》的理解也只是在:只要信号和经过的系统可以近似等效为线性，那么我们就可以在时域或者变换域（信号和系统的存在不仅仅是时间，还在频率）求解信号和系统在不同域值时的不同性质。并且信号和它所经历所有的转换都可以看作是种一组线性方程在一个线性系统构成的线性空间内进行的一系列线性转换。它也打开了物理世界和数学世界之间相通的大门。</p>
<p>我的认识虽然还非常浅显，但我已然被前人的智慧深深地震撼。我想，随着我长年累月的思考，我的理解可能会越来越深刻。</p>
<h2 id="信息场"><a href="#信息场" class="headerlink" title="信息场"></a>信息场</h2><p>根据我少得可怜的物理知识看来，将信息类比成熵，是说明了两点：信息具有传播方向，信息传播不可逆。如此看来，将信息比作一个”场”会不会也可以解释些什么？</p>
<p>“场”从定义上看来，场是用来描述物理量在空间上的分布而被定义的。从分布上来说，场都有一个场源，而场中其他的物质和它的相互作用的规律就是它所产生的场的规律。</p>
<p>那么假设信源作为一个场源，而所有信道之和就是场所表示的空间，最后信宿就是场中的可以与信源相互作用的物质。</p>
<p>那么按照这样的推理，会有什么样的结果呢？</p>
<p>首先，信息场是可以测量的，而且它有物质属性。我们可以知道信源的信息量，再测量信宿所得到的信息量，相减之后，就可以得到信道中损失的信息量，那么如果这个信道的性质不变，信息量的衰减规律也不会改变。</p>
<p>然后，由上面推测，可以得出信息场具有衰减性。信息场的衰减系数可能与信道和信源的性质有关。</p>
<p>通过上面两条推理，可以发现信息场可以类比引力场作为一个有散无旋场。</p>
<p>那么，信息场可能会像重力场一样具有势能场强。我猜想信息势能可能符合平方反比规律。</p>
<p>但是限于数学知识的匮乏，以上的推理我都无法建立一个可用的数学模型进行印证并且进行演算证明。</p>
<p>如果以上的推理成立，那么也就印证了信息的物质属性，那么它是否可以同质量和能量去转换，形成一个更大的统一场，我已经无法继续思考下去。</p>
<p>我不知这样的思考是否有理可依。放在这里，当是呓语罢了。</p>
<h1 id="发展"><a href="#发展" class="headerlink" title="发展"></a>发展</h1><p>最后，我还想再大胆猜猜以后通信会如何去发展。</p>
<p>先说出一个自己的观点:通信的发展是人类社会不断发展中，社会分工不断细化而不得不出现的一个代偿性的结果。</p>
<p>我来解释一下：因为事物的发展是按照一定方向的，按照一个系统演进的规律可归纳总结出人类社会的发展方向是朝着从集体主义但每个人的存在都很独立，向个人主义但每个人的存在都需要依存于大量的社会关系而发展的。每个人的价值越来越得到重视，但是每个人的社会分工也越来越被细化，人与人之间的知识分割和思维分割越来越大，为了维系人类社会连接这张大网的存在，就必须要有通信不断地快速发展，使得人与人之间可以通过一种途径在各种感官层面直连起来，而代偿原来的社会那样人与人之间没有什么联系就可以拥有人类共通的基础认识的情况。所以，通信一定会发展得越来越快，在社会中的地位也会越来越重要。但是不论通信如何发展，社会可能再也无法像原来那样因为人类的知识量很小而不用怎么连接就可以拥有相似的共通知识作为共通的认知而维系住这张人类社会关系的网络。最后很可能会因为网络失衡导致很多的社会问题。</p>
<p>当然这些猜想可能都是很久以后的事情了。</p>
<p>就最近而看，因为我没有深入一线通信产业，所以可能无法看个究竟，只是认为一点：硬件的软件化可能是现在的通信运营商的一个演进方向。</p>
<p>让网络硬件设备可以编程控制。这一努力可能会让许多本来属性与作用不同的网络被重新组合在一起，形成一套通用的运行环境。划分网络和网络管理的形式将由以前的必须通过通信设备的更迭来解决的问题变为只需通过通用的软件配置就可以解决的问题。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>通信</tag>
      </tags>
  </entry>
  <entry>
    <title>2018 年终总结</title>
    <url>/year_summary_2018/</url>
    <content><![CDATA[<h1 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h1><p>倏忽之间，又过去了一年。是时候向 2018 说一声再见了。</p>
<p>今年，我只在写 <a href="/feelings_around_new_year">年关随笔</a> 时立了一个 Flag，要练习深度写作，至少每个月输出一篇文章。可惜因为暑假时候偷懒，这个 Flag 也并没有达成。不过，我还是要在 2019 重新立起这样一个 Flag —— 2019 年每个月至少输出一篇文章，可以是技术，可以是随笔，也可以是观点。希望明年这个时候再回来看，不要像今年一样打脸。</p>
<p>再说回 2018。这一年相比前些年，在我的努力下，节奏逐渐慢了下来，让我有了许多时间静下心来思考、做事，也有时间和爱人相处、与朋友侃大山（至少在十一月之前是这样的）。同时，这一年又并不像以往那么顺遂，让我明白了人力有限，世间有太多力所不能及之事。</p>
<h1 id="时光·记忆"><a href="#时光·记忆" class="headerlink" title="时光·记忆"></a>时光·记忆</h1><p>在大自然面前，没有什么是能够永恒的。人不能够，事不能够，城也不能够，甚至文明也不能够。</p>
<span id="more"></span>

<p>在奶奶走后，我每每做梦都会回到小时候，梦见亲人们都在，他们都能和谐相处；梦见家乡没有衰败，还有很多人居住；梦见我很强，能够办到一切事情。</p>
<p>可惜梦中和现实却每每都是相反的。我无力改变太多，但至少可以做些什么。眼下能做的事情，就是把家乡的景，家乡的事儿多记录一些，等多年后，这里变成一片荒山野岭，无人问津的时候，人们还是能从我只字片语的记录之中，知道有这样一个地方，曾经有这样一批人，为了祖国的建设，把最好的青春和无尽的才华都奉献在这西北的茫茫荒山之中。</p>
<p>我在这里贴上几张年初所拍的照片吧。</p>
<p>这两张是白银市老城区白天和晚上的景观，拍摄于白银市人民医院综合楼楼顶。白银市从今年开始增加了许多城市亮化的工程，在白天看来就是一个暮气沉沉的工业老城，但是在晚上看来尤其漂亮。</p>
<p><a href="/images/posts/year_summary_2018/photo-baiyin-884-3.jpg"><img data-src="/images/posts/year_summary_2018/photo-baiyin-884-3.jpg"></a></p>
<p><a href="/images/posts/year_summary_2018/photo-baiyin-884-4.jpg"><img data-src="/images/posts/year_summary_2018/photo-baiyin-884-4.jpg"></a></p>
<p>下面的照片均是在西北铜加工厂（884）社区拍摄。</p>
<p>这是 884 附近的一座山，山上有一块形状酷似像狮子的石头，所以小时候我们都管这个山叫做“狮子山”。不过可能由于石头连年风化，已经随时会滚落下来，才有人在山脚下立了块标识危险牌子。</p>
<p><a href="/images/posts/year_summary_2018/photo-baiyin-884-1.jpg"><img data-src="/images/posts/year_summary_2018/photo-baiyin-884-1.jpg"></a></p>
<p>这是一条通往旁边村子的路，货车多半可能是准备进入大山深处，去拉从山中开采的石灰石。水泥路已经被一辆辆超载的大货车压得几乎没有了。</p>
<p><a href="/images/posts/year_summary_2018/photo-baiyin-884-2.jpg"><img data-src="/images/posts/year_summary_2018/photo-baiyin-884-2.jpg"></a></p>
<p>这是西北铜加工厂的正门（有两个，这是其一），在当年国企兴旺之时，上下班的时候人们进进出出摩肩接踵，但是现在物是人非，已经看不到什么人进出厂区的大门了。</p>
<p><a href="/images/posts/year_summary_2018/photo-baiyin-884-5.jpg"><img data-src="/images/posts/year_summary_2018/photo-baiyin-884-5.jpg"></a></p>
<p>这是通向厂门的桥，当年为了让职工可以在发洪水的时候安全上下班，就修了两座连通厂区和家属区的桥。桥下还有一个足球场，在发洪水的时候用作泄洪（我们称为“沙沟”），这两座桥似乎一个名为“兴旺桥”，一个名为“振兴桥”，但是年久失修，现在已经是两座危桥了。</p>
<p><a href="/images/posts/year_summary_2018/photo-baiyin-884-10.jpg"><img data-src="/images/posts/year_summary_2018/photo-baiyin-884-10.jpg"></a></p>
<p>这是奶奶之前工作过的食堂，由于年久失修，们都已经被水泥封了起来。透过门缝，还能看见火红的标语，一刹那间仿佛又回到了当年。</p>
<p><a href="/images/posts/year_summary_2018/photo-baiyin-884-6.jpg"><img data-src="/images/posts/year_summary_2018/photo-baiyin-884-6.jpg"></a></p>
<p>这是西铜的职工浴池，我们都叫大澡堂。前几年浴池终于也关闭了，我只能透过蒙着厚厚灰尘的玻璃撇入浴室的一角，找到当年的回忆。</p>
<p><a href="/images/posts/year_summary_2018/photo-baiyin-884-7.jpg"><img data-src="/images/posts/year_summary_2018/photo-baiyin-884-7.jpg"></a></p>
<p>这是当年“达利居”饭庄（之后改名为西铜宾馆）的舞厅。据说西铜鼎盛的时期，会有许多年轻的男男女女穿梭在其中。不过我记事的时候已经没有什么人了。</p>
<p><a href="/images/posts/year_summary_2018/photo-baiyin-884-8.jpg"><img data-src="/images/posts/year_summary_2018/photo-baiyin-884-8.jpg"></a></p>
<p>这是一座无名小山上凉亭的一角。当时厂里希望把这座山修成一座公园，于是修整了山道，修建了几座凉亭。不过还没修好，就已经开始亏损，这座公园也就只剩下这两个凉亭了。</p>
<p><a href="/images/posts/year_summary_2018/photo-baiyin-884-9.jpg"><img data-src="/images/posts/year_summary_2018/photo-baiyin-884-9.jpg"></a></p>
<p>以上都是我在西铜或者说是白银记忆的一个小角落，还有大量我的、同学的、长辈们的记忆有待挖掘。现在的西铜，已经破败不堪。一眼望去，只有一座座废弃的建筑和一望无际的荒山。一路走去，已经很少能碰见朝气蓬勃的年轻人，只有沟壑纵横的长辈们。这座城因他们而生，也注定会随着他们离去而消失殆尽。所以，我能做的，就是尽量用图片和文字来保留着座终将消失的城，留住他们珍贵的记忆。</p>
<h1 id="出游"><a href="#出游" class="headerlink" title="出游"></a>出游</h1><p>相比前几年，今年出行的地方没有那么多，但是每个地方都很值得好好留念。正所谓——世界很大，不能只看去了哪里，还要看是和谁一起去的。</p>
<h2 id="苏州"><a href="#苏州" class="headerlink" title="苏州"></a>苏州</h2><p>2018 年出行的第一站是苏州，这也是我走过得祖国河山中最喜欢的地方之一。苏州不仅有数不尽的美丽景致，更有独特且很有内涵的地方文化，更有令人适宜的生活环境。更重要的呐，这还是和卤蛋同学第一次一起出远门旅行。刚好还欠卤蛋同学一个游记，就先在这里简要地写一下好了。</p>
<p>苏州城区不大，只靠地铁和公交在一个小时之内都可以到达。但是在城内逛游的时候真的可以感受到就像它的园林一般的一步一景。走着走着，就会出现一座很漂亮的古桥，又向前走两步，就到了一个小有名气的私家园林，再向前一看，发现这不是一家百年老字号嘛（快快快去吃好吃的别看了）。</p>
<p>另外，苏州话也非常有特色。虽然我听不懂，但是可以感到说话的人都还挺温柔的（就算骂人都骂的很柔），在苏州评弹里就更能体现了，每一个曲调都很柔美，让它所表达的故事格外的柔美。当地人也都十分热心，问路时候可以感受到他们十分有耐心，说话比较慢，令人舒适感倍增。当然，这也从侧面体现了他们生活比较安逸，节奏比较慢。</p>
<p>下面，我贴几张比较有意思的照片好了。</p>
<p>这是刚到苏州时候，沿着一条街向虎丘走，卤蛋同学在街边特别激动，左拍拍右拍拍。我刚好留意到他们街头布置得很细心，很能为街道环境和有宠物的人着想，在墙边设立了宠物便纸箱。</p>
<p><a href="/images/posts/year_summary_2018/photo-suzhou-1.jpg"><img data-src="/images/posts/year_summary_2018/photo-suzhou-1.jpg"></a></p>
<p>街角一转，居然到了到了河边。河边灰白色的天空衬着灰白色的墙，倒映在水里，十分宁静。这时，船夫划着一艘游船从远处徐徐开来，扰乱了湖水，也令人在心中荡起了浅浅的涟漪。</p>
<p><a href="/images/posts/year_summary_2018/photo-suzhou-2.jpg"><img data-src="/images/posts/year_summary_2018/photo-suzhou-2.jpg"></a></p>
<p>虎丘山中的一个沟壑。虽然小，但也有了一种悬崖峭壁的感觉，沟底的水中映出来天上的雨滴，植物颜色十分撞眼，犹如通往世外桃源的一条幽径。</p>
<p><a href="/images/posts/year_summary_2018/photo-suzhou-3.jpg"><img data-src="/images/posts/year_summary_2018/photo-suzhou-3.jpg"></a></p>
<p>市内的一座不知名公园。远望时感觉画面十分饱满，而近观又感到场景十分开阔，眼睛都舍不得多眨一下，生怕错过哪一处的美景。</p>
<p><a href="/images/posts/year_summary_2018/photo-suzhou-4.jpg"><img data-src="/images/posts/year_summary_2018/photo-suzhou-4.jpg"></a></p>
<p>苏州评弹剧场内部。老师底蕴深厚，唱腔优美。很多字发的都是古音，所以需要有一块屏幕向观众展示唱词。每唱一曲都会一下子把我带入古代天堂般繁华的苏州，置身闹市之中，但又让我进入心流。</p>
<p><a href="/images/posts/year_summary_2018/photo-suzhou-5.jpg"><img data-src="/images/posts/year_summary_2018/photo-suzhou-5.jpg"></a></p>
<p>黄天源的苏州小吃。如果苏州糕点说自己第二好吃，怕是没有什么地方敢说自己是第一了。不过最让我惊喜的是苏面，这是我除了牛肉面以外第二个感到能百吃不厌的面了。</p>
<p><a href="/images/posts/year_summary_2018/photo-suzhou-6.jpg"><img data-src="/images/posts/year_summary_2018/photo-suzhou-6.jpg"></a></p>
<p>除了这些，在苏州还有许多有趣的见闻，而且都还有许多没有去到的地方。以后可以有缘再见咯。</p>
<h2 id="天津"><a href="#天津" class="headerlink" title="天津"></a>天津</h2><p>在暑假的时候去了一趟天津。我在这次旅行中得到了一个惊人结论——天津和北京一样热。所以以后夏天还是老老实实待在实验室吹空调好了。</p>
<p>即使这么热，天津之眼还是要排很久的队，所以就随手拍了张照。</p>
<p><a href="/images/posts/year_summary_2018/photo-tianjin-1.jpg"><img data-src="/images/posts/year_summary_2018/photo-tianjin-1.jpg"></a></p>
<p>天津之行的时候还是我和卤蛋同学在一起一周年的纪念日，于是——再回来以后我受宠若惊呆若木鸡地收到了卤蛋同学送的花（hmmm 这应该也是人生中的第一束花），拿到花以后我甚至不知道该把它放在哪里，是不是应该把它插到水桶里养起来。</p>
<p><a href="/images/posts/year_summary_2018/photo-tianjin-2.jpg"><img data-src="/images/posts/year_summary_2018/photo-tianjin-2.jpg"></a></p>
<h2 id="灵山"><a href="#灵山" class="headerlink" title="灵山"></a>灵山</h2><p>高中地理曾经学过——海拔每升高 100 米，气温下降 0.6 摄氏度。这大概是我在灵山之行中最直观的感受了。灵山是北京第一高峰，在门头沟区，几乎已经到了北京同河北的交界处，需要驱车三个小时才能赶到。</p>
<p>灵山是同潘老师、林博以及卤蛋同学我们一行四人去的。去爬山的时候天还是挺热的，所以我带了一件坛服去御寒。刚开始爬的时候我还很跳腾，但是到了一半左右，山势变陡，狂风大作，气温骤降。已经冷到了骨子里，无奈只好作罢。</p>
<p>灵山上的风景与山下迥异，像极了西北高原，居然出现了驴子和牦牛。下面是在灵山拍摄的一些照片。</p>
<p><a href="/images/posts/year_summary_2018/photo-lingshan-1.jpg"><img data-src="/images/posts/year_summary_2018/photo-lingshan-1.jpg"></a></p>
<p><a href="/images/posts/year_summary_2018/photo-lingshan-2.jpg"><img data-src="/images/posts/year_summary_2018/photo-lingshan-2.jpg"></a></p>
<p><a href="/images/posts/year_summary_2018/photo-lingshan-3.jpg"><img data-src="/images/posts/year_summary_2018/photo-lingshan-3.jpg"></a></p>
<h1 id="活动"><a href="#活动" class="headerlink" title="活动"></a>活动</h1><p>今年我也刻意减少了很多不必要的活动。在这说说几个比较有意思的吧。</p>
<h2 id="Hack-for-Good"><a href="#Hack-for-Good" class="headerlink" title="Hack for Good"></a>Hack for Good</h2><p>我最开心的不是又参与了一次 Hachathon，而是 Hackathon 成为了俱乐部每年的例行活动（而且这一场还是卤蛋同学参与办的）。</p>
<p>这次 Hachaton 弹幕派作为合作方参与到了其中，并且我也带团队来和大家一起 Hack 了两天，成果显著，做好了小程序和控制面板上线前的最后准备。</p>
<p><a href="/images/posts/year_summary_2018/photo-hackforgood-1.jpg"><img data-src="/images/posts/year_summary_2018/photo-hackforgood-1.jpg"></a></p>
<p><a href="/images/posts/year_summary_2018/photo-hackforgood-2.jpg"><img data-src="/images/posts/year_summary_2018/photo-hackforgood-2.jpg"></a></p>
<p><a href="/images/posts/year_summary_2018/photo-hackforgood-3.jpg"><img data-src="/images/posts/year_summary_2018/photo-hackforgood-3.jpg"></a></p>
<h2 id="SDN-大赛"><a href="#SDN-大赛" class="headerlink" title="SDN 大赛"></a>SDN 大赛</h2><p>还有一件值得一提的事情是搞了两年的 SDN 大赛终于以二等奖为结果圆满收官。比赛中强哥、天骄、高钱、格格这些队友都十分给力，另外加上小雨姐和潘老师的助攻，让我们成功杀入了决赛圈。</p>
<p><a href="/images/posts/year_summary_2018/photo-sdn-competition.jpg"><img data-src="/images/posts/year_summary_2018/photo-sdn-competition.jpg"></a></p>
<p>现在看来，我做了一年的 P4 实验系统也随着这个比赛到了的尾声。一年以来，我总是在不断地在这个系统的 Bug 和 Debug 中度过，每天总是担心训练效果不是很理想（事实证明效果的确也不理想）。前些日子，基于这个系统的 INT 遍历算法中了一篇 Infocom，也算是这套系统的最大成就吧。</p>
<h1 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h1><p>今年最令我担心的就是我的技术了。因为离工作的日子越发的近，我却还是没有一门能拿得出手的技术。这些年来，我做了挺多多，了解了挺多，都是项目要用到什么就去学习什么，一直没有给自己找到一个能够系统深入的方向，说起来也很是惭愧。</p>
<p>不过下半年也算是有一个好的开始吧。我开始去刷 Leetcode（刷过的题目都可以在博客中的<a href="/leetcode">leetcode 板块</a>看到），去看一些框架的源码，开始做 Go 语言的项目，去了解容器和一些 Linux 协议栈相关的知识。现在看来，能做的就只能是再接再厉，不要再掉链子了。</p>
<h1 id="弹幕派"><a href="#弹幕派" class="headerlink" title="弹幕派"></a>弹幕派</h1><p>在这里我也给弹幕派做一个年终总结吧。</p>
<p>去年一年，弹幕派的增长效果还不错。在推广营销投入几乎为 0 ，且前有夹击后有追兵的情况下，靠着之前的老本，在用户量和营收上都得到了明显的增长。</p>
<p>在今年一年，一共有数万个用户注册了弹幕派账号，成功举办了几千场大大小小的活动。一共有数十万人参与到了活动现场的弹幕互动中，产生了数百万条弹幕，并产生了数万个付费订单。另外，弹幕派网站创造了数百万的 PV 和几十万的 UV。这在互联网公司看来可能都不算什么，但是对于我们团队来说，是一个不小的进步。</p>
<p>我们也投入了大量的精力在研发上面。我们在去年年初就将系统迁移到了 Swarm 集群中，并配置了半自动的编码、发布、测试、预览、上线的环境，经过一年的实践，系统运行良好。而在前端层面，我们将原有的多种技术栈进行了整合，都迁移到了以 Vue 为基础的技术栈中，这样团队成员在不同项目之间切换就变得游刃有余。而后端我们继续沿用了 Laravel+Workerman 的架构，并感到目前还远远没有到达天花板。</p>
<p>今年的状况就是这样，期待明年可以有更强劲的增长吧。</p>
<h1 id="一些小事儿"><a href="#一些小事儿" class="headerlink" title="一些小事儿"></a>一些小事儿</h1><p>今年有两次去同学家里做客的经历。一次是同卤蛋同学一起去胃寒家，一起做了一大桌菜（感谢心灵手巧的胃寒和蓉蓉）；另一次是自己去牧野家，一起吃了一顿史上最小的小火锅（感谢牧野和小团子的精心准备）。</p>
<p>吃腻了学校的食堂，有时候觉得能和爱人在自己家里做饭吃（特别是再和朋友一起煮一锅热气腾腾的火锅，一起聊聊天），的确是很开心的。所以我有时候也开始对未来在外面打拼的时光充满期待。谁知道呢，或许也是一座围城吧。</p>
<p>年中的时候我也拿到了驾照，不过今年唯一一次路驾还是和牧野，从中关村开到了学校。以后有机会还得多开车，向着老司机的行列迈进。</p>
<p>年末的时候玩了今年的唯一一款游戏《古剑奇谭 3》，虽然游戏只花了 99，但是我体验到了几倍于价格的诚意。游戏画面精美，优化十分到位，我在大一时候买的 Y400 在现在还能基本流畅地进行游戏，即时战斗也颇为精彩。而在游戏中，文明的光芒、历史的厚重与人类的传承在我的眼前徐徐展开，而主角之间那种的真情也让我倍感舒适。比起之前玩的仙侠类的 RPG，古剑三的进步不止一点点。最近有机会我想专门写一篇相关的文章。</p>
<h1 id="沉重的话题"><a href="#沉重的话题" class="headerlink" title="沉重的话题"></a>沉重的话题</h1><p>2018 年这一年，有很多人离开了我。包括我的亲人，以及许多敬重的人。</p>
<p>奶奶是 2 月份走的，现在每每想起心中依旧难以平静。而在这之后，这一年难过的事情就没有中断。</p>
<p>回忆了一下，逝去的科学巨匠有霍金和高锟。霍金的黑洞理论其价值非我所能评论，但是他的《时间简史》以及《果壳中的宇宙》陪伴了我整个少年时期。而高锟所发明的光纤正构成了我们现在有线通信的根基。他们的逝世是全人类的一大损失，随着他们的离开，科学世界的光芒也变得暗淡了许多。搜索后我才知道，仅 2018 年，就有 31 名两院院士离开了我们。这怕是绝无仅有的。他们共和国的栋梁，他们的贡献深刻地影响着我们的生活，我深切缅怀他们。</p>
<p>除他们外，还有许多社会知名人士也相继逝世，他们许多人对我们的社会有着深刻的影响。联合国秘书长安南是一个小时候经常听到的名字，他所在的时候，也是联合国知名度最高的时候，他纵横捭阖，致力于解决国际争端，给全人类一个美好的世界。著名主持人李咏的去世也勾起了我对童年的回忆，在印象中，他是一个每天都很欢乐，手持锤子打电话砸金蛋的主持人，但从没想过他会这么快就离开这个世界。而他和哈林的爱情故事，更令我十分动容。除此之外，对文化影响很深的还有金庸、李敖和曾仕强。金庸无需我多言，小时候看的很多武侠小说和电视剧都出自他手，他告诉了我什么是江湖，也给我带来了无数乐趣。李敖和曾仕强是台湾的两位思想家。其中，曾仕强《易经》可能是百家讲坛最受欢迎的节目之一了，他讲的内容大多记不得了，但是他那种睿智而又儒雅的风格令我印象深刻。</p>
<p>最后，还有田家炳先生。田家炳先生在国内可能没有邵逸夫那么有名，但是他也捐助了无数学校，让这些学校可以改建校舍，购置教具，相互交流，提升教学质量。我所读的高中就是一所田家炳中学在上高中的时候，我们体验到了新的教学楼，用上了很高级的电子白板。而在我们毕业后，学校也将土操场进行了翻新，还新建了装备齐全的科学楼。这其中有很大程度上都是由于他老人家。作为一名田家炳中学的学生，听到他逝去的消息，我的心情相当沉痛。</p>
<p>而我们国家也正在经历“百年未有之大变局”。这一年随着贸易战开打，经济局势开始变得紧张起来。随着数字货币、互联网借贷和共享单车的迅速衰落，互联网产业也迎来了变数很大的一个时期。独角兽们即使股票纷纷破发，也要流血上市，而下半年来更是处处风传裁员浪潮。这一年注定是一场场艰难的战役。</p>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h1><p>不论如何，时间是不会停下来等人的。现在，2018 年已经过去，2019 年已经到来。该面对的还是要面对，该承受的也要去承受。</p>
<p>上面所回忆的事情，不论好事坏事，不论是否开心，也只是生活中事情的一少部分，生活中更多的事情，是稀松平常，甚至结束以后就会忘记的。但是，这些事情其实才是生活的主旋律。倘若可以在这些事情之中发现美，生活也就会有更多的乐趣了。</p>
<p>2019 注定依旧是很有悬念的一年，不能守成，还需不断奋斗。加油吧！</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=865460483&auto=0&height=66"></iframe>
]]></content>
      <categories>
        <category>随笔</category>
        <category>年终总结</category>
      </categories>
      <tags>
        <tag>年终总结</tag>
      </tags>
  </entry>
  <entry>
    <title>2021 这一年</title>
    <url>/year_summary_2021/</url>
    <content><![CDATA[<h1 id="intro"><a href="#intro" class="headerlink" title="intro"></a>intro</h1><p>在抬笔之前，纠结许久，过去的这一年，真的有这么多要记录的东西么，有必要花几个小时的时间去写么？我不知道。但同时，我的鼠标已点开了之前的博客，开始翻看前些年写的文字。看着看着，我找到了许多自己已经不怎么记得，但想起却感到十分温暖的那些瞬间和回忆。虽说都不是什么大事儿，但是如果不记录，它们可能真的就会遗失在记忆的荒野里了。</p>
<p>所以，我还是要写些文字，来记录我这平凡，也小有起伏的一年时间。</p>
<span id="more"></span>

<h1 id="目标回顾"><a href="#目标回顾" class="headerlink" title="目标回顾"></a>目标回顾</h1><p>首先，回忆一下去年立的那些flag吧。</p>
<ul>
<li>分享至少 5 篇较为优质的内容<ul>
<li>目标完全没有达成，一是由于惰性，二是感觉自己积累不足</li>
</ul>
</li>
<li>对领域内技术的认知上有明显提升，具有一定的专业性和深度<ul>
<li>专业知识确有所增加，但离自己的期望还有差距，算是勉强达成</li>
</ul>
</li>
<li>维持学习状态，保持对世界的好奇心，对世界的认知上更进一步<ul>
<li>确有长进，但也不多，算是没有原地踏步吧</li>
</ul>
</li>
<li>阅读，至少 5 本较篇幅较长的著作，减少看视频的时间<ul>
<li>大篇幅的只有一本花了半年才读完的《红楼梦》；看视频时间有所减少，原因是从看变为了听</li>
</ul>
</li>
<li>锻炼身体，体重维持在 80kg 以下<ul>
<li>体重目标超额达成，但原因却不是锻炼身体</li>
</ul>
</li>
<li>多陪陪家人，每周和家人通话<ul>
<li>目标也算是基本做到</li>
</ul>
</li>
</ul>
<p>整体看来，六点Flag，勉强算下来，可以说是完成了一半吧，约等于不及格。</p>
<p>原因肯定是多方面的，不能单独归咎于时间不够。因为我知道就算是时间充裕，也很有可能无法完成上述任务。所以，今年我决定使用一个更加精确的目标系统——OKR对自己的目标进行量化确定/追踪，并且应当可以按照执行情况修改。希望通过新方法，可以让明年的自己及格吧。具体规划放在文末。</p>
<h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>这一年的生活给我最大的感悟就是“无常”。疫情无常，生活无常，生死也无常。</p>
<p>下面，就以几个生活中的小片段来简要概括这一年吧。</p>
<h2 id="其一"><a href="#其一" class="headerlink" title="其一"></a>其一</h2><p>年初的第一件大事是乐乐的婚礼。在他的婚礼上，我们这三个从小几乎天天在一起的铁哥们，终于能从天南地北百忙之中，在疫情笼罩下，时隔多年之，后再次聚到了一起。我呢，也终于第一次当了伴郎，第一次正经穿上了西装，也第一次从“台上人”视角见证了好朋友的婚礼。疫情之下，虽然没有大操大办，但几天的相处，让我深刻感受到了乐乐和嫂子的深厚感情。所以这里不说别的，祝福乐乐早得贵子，也祝福剑客早日结婚（相见不易，总得有个由头呀）。</p>
<div align=center>
刚布置好的婚房
</div>

<p><img data-src="/images/posts/year_summary_2021/2021-00.jpg"></p>
<p>此外，在见面后的聊天中，突然发现童年的好友都已成熟起来：聊天中少了许多幼年时对游戏和故事的痴迷、少年时对宇宙和未来的畅想，却添了对生活的感悟与吐槽，以及对肩上责任的担当。肩膀扛起的东西变重了，脚下也自然就会踏实起来，这或许才是人们仰望天空的底气之所在。</p>
<div align=center>
在家后山上看云
</div>

<p><img data-src="/images/posts/year_summary_2021/2021-01.jpg"></p>
<h2 id="其二"><a href="#其二" class="headerlink" title="其二"></a>其二</h2><p>虽说现代通讯非常方便，但我们几个也是各自有忙，所以自此一别，再次认真联系，大约是就年底了，原因是他们关心我的心理状况：在奶奶去世后的第三年，从小陪伴到大的另一位亲人——爷爷，也永远离我而去了。</p>
<p>坏事总是十分突然。当时兰州的疫情刚刚有所好转，各种交通刚刚解封，就得到了爷爷病情突然恶化的消息。也顾不得多想，做完核酸第二天的凌晨，就和姑父驱车从北京赶回家中。</p>
<div align=center>
一路上
</div>

<p><img data-src="/images/posts/year_summary_2021/2021-02.png"></p>
<p>幸运的是，我的决策是对的，在赶回家的那天晚上，见到了爷爷意识完好情况下的最后一面。他在这种情况下，还是像往日那样，一见面就担心我工作忙，穿的少，吃不好。在得知我一切都好后，他也逐渐安心下来。第二天，他的意识就再也没有清醒起来，生命也随之进入了倒计时。最终，在2021年11月23，他还是永远地离开了我们。那天凌晨六点医院门口的瑟瑟寒风，我一定毕生难忘。</p>
<p>爷爷一生很不容易。他生于解放前，小时虽然家里穷，但成绩优异，所以家里一路供他读到了初中毕业。后来，因为自然灾害无力负担，就征兵入伍，去了二炮，做了一个挂着空军名号的步兵。随着国家需要，他们一路辗转，从老家来到北京，又从北京到了茫茫戈壁。此后，他们部队在戈壁上克服了种种困难，为我们国家的国防做出了重要贡献。后来，他转业来到了当时为了“备战”和“备荒”而在西北大山深处筹备建立的884。他们再次发扬那个时代艰苦奋斗的精神，遇山开山，遇水架桥，硬是在只长荒草的群山深处，建起了一座现代的大型铜加工厂，为国家生产了许多战略物资。在他退休后，虽然终于不用为工作日夜操劳，却又开始为了我的成长费心费力，这一晃又是二十多年，直到现在。</p>
<p>而就在我刚力所能及可以养活自己，并且也有一些余力可以让他生活得好一些的时候，他却永远地离开了我。子欲养，却亲不待。</p>
<p>人这个物种大约就是这样，谁也无法脱开的生死的轮回，每个人都应当看开些。但生死事大，岂不痛哉！</p>
<div align=center>
爷爷的在党50年纪念章
</div>

<p><img data-src="/images/posts/year_summary_2021/2021-03.jpg"></p>
<p>今年也是建党100周年，在这里我要向爷爷这样为国家建设奉献了一生的老同志们，致以最崇高的敬意！虽然在你们身上没有那些波澜壮阔的功绩，也没有曲折动人的故事，但正是由于千千万万你们的付出，让共和国有底气走到今天，也是千千万万你们所坚持的初心，守住了和传承这个社会的正气。</p>
<h2 id="其三"><a href="#其三" class="headerlink" title="其三"></a>其三</h2><p>现在，让我把回忆的时间线再次拉回年初，去回忆另外一条主线。</p>
<p>从年初开始，我进入了频繁去杭州出差的状态。虽说每次的目的地都一样，但随着四季的变化，都有新的风景，好不惬意。比如仲春的龙井茶园、夏日的西子湖畔，还有秋日的大运河滨都让令人着迷。我也终于理解为何有如此多的文人墨客偏爱这里，留下了无数流传青史的千古墨宝。</p>
<div align=center>
2021飞行统计
</div>

<p><img data-src="/images/posts/year_summary_2021/2021-04.png"></p>
<p>这一年的多次往返让我对这座城市有了许多直观的感受，比如：</p>
<ul>
<li>自然和人文风光不必多说，不仅好地方多，而且风景在四时都有所不同；</li>
<li>但是基础设施相比于北京也还存在不小的差距，不过可以看出一直都在进步</li>
<li>城市处于扩张阶段，老市民集中在老城区，新市民都在新城区，在新城区能明显感到接纳包容的年轻的城市文化，但老城区却相反</li>
<li>地价房价上涨很快，后上车的人成本变高，且造就了一批房产富豪</li>
</ul>
<p>另外，更重要的是卤蛋也逐渐在这座城市安顿了下来，所以我之后还有大把时间在这里走走转转，期待能有更多更深入的了解。</p>
<div align=center>
烟雨龙井村
</div>

<p><img data-src="/images/posts/year_summary_2021/2021-05.jpg"></p>
<div align=center>
西湖落日
</div>

<p><img data-src="/images/posts/year_summary_2021/2021-06.png"></p>
<div align=center>
繁忙的大运河
</div>

<p><img data-src="/images/posts/year_summary_2021/2021-07.jpg"></p>
<h2 id="其四"><a href="#其四" class="headerlink" title="其四"></a>其四</h2><p>除此之外，在去年上半年我也经常进行体育锻炼，在周内最常去的地方是公司楼下的大望京公园，而在周末则非奥森公园莫属了。基本每周的跑步距离在15到20km左右，除此之外还会骑车上下班，一天大约能有十几公里。跑步的配速也逐渐从年初拉夸的七分钟，逐渐恢复到了年中的五分多钟。并且通过一起跑步，也和公司里的一些同事有了更多的交流，收获满满。</p>
<div align=center>
某次跑步记录
</div>

<p><img data-src="/images/posts/year_summary_2021/2021-08.jpg"></p>
<p>虽然我的运动量这么大，但是体重却几乎没什么变化。原因很简单——每天都得吃点好的。</p>
<div align=center>
跑完步当然要吃顿好的犒劳一下自己
</div>

<p><img data-src="/images/posts/year_summary_2021/2021-09.jpg"></p>
<p>肯定有很多人抱着和我一样的想法：已经这么努力运动了，在饮食上放松一下也没有问题。然而，事情没有这么简单。</p>
<p>在下半年里，我付出了沉重的代价：告别了火锅，告别了啤酒炸鸡，告别了我最爱的麦当劳，甚至告别了多数肉类。同时，我也告别了熬夜看视频，告别了久坐打游戏，也告别了我最爱的长跑。</p>
<p>现在看来，效果还行。体重从巅峰的接近85kg降低到了如今的不到75kg，身体也逐渐恢复正常。不过随着体重的减轻，肌肉们也在一同不断流失，但做什么，都总得付出些代价吧。</p>
<div align=center>
下半年的体重变化
</div>

<p><img data-src="/images/posts/year_summary_2021/2021-10.png"></p>
<p>钱花光了可以再赚，物品丢掉了可以再买，数据消失了都可以再造，但是健康失去了却很难重新恢复，关心之人去世了就更难弥补。正所谓“知易行难”，这些简单的大道理说起来容易，但若没有经历过，却很难真正理解。如今理解了，却也都付出了很重的代价。</p>
<p>最后，我发现猫咪真的是一个十分神奇的物种，不论什么时候，它们总能让人感到治愈，会让人多一些面对不确定性的勇气，所以就用一张球宝（室友的猫咪）的靓照作为本章的结尾吧。</p>
<div align=center>
球宝一瞥
</div>

<p><img data-src="/images/posts/year_summary_2021/2021-11.png"></p>
<h1 id="工作-amp-技术"><a href="#工作-amp-技术" class="headerlink" title="工作 &amp; 技术"></a>工作 &amp; 技术</h1><p>坦率地讲，自己在去年工作中的收获是不小的。不仅是技术上做到了真正的入门，还有在心理上具有了一定的主动性。</p>
<p>回过头来审视从刚入职到现在的这一年半的时间，能明显感到自己从一个刚进入公司时几乎什么都不懂，只会低头自己琢磨，不会跟人沟通，甚至因为担心自己水平差，而感到有些自卑的职场新人，成长为了一个较为自信，能直面问题，从更多角度思考，并跟他人配合，共同解决问题的人。</p>
<p>我认为入职即将满一年的时候对自己来说是一个很重要的节点，原因很简单，那会儿刚好在年末评定绩效，所以在这段时间里，我终于有机会也不得不好好梳理和思考去年一年在我身上发生的事情，以及我面对事情所采取的态度和行为，并且也能将这些思考和主管进行直接而充分的沟通。什么是好的，什么是不好的，什么之后应该努力避免，什么事情还能做的更好，都逐渐变得明晰。这种明确的反馈对于一个人的成长有很大的帮助。</p>
<div align=center>
部门校招同学培训时的一年香蛋糕
</div>

<p><img data-src="/images/posts/year_summary_2021/2021-12.jpg"></p>
<p>当然，作为一个工程师，除了上面这些比较“务虚”的成长，一定还得聊聊自己技术的进展。</p>
<p>祸福相依，虽说自己干自己的，不懂和别人交流不是什么好事，但是也是由于多数时间都在低头琢磨，自己写代码，所以从刚入职到一周年左右时，我大概零零散散为项目提交了大约一万多行不到两万行代码。因为我所编写模块代码和其它模块有很多耦合，所以编码的时候我也被迫几乎阅读了我们组所负责项目（一个Rust编写的VMM）的大部分代码，这让我很快对这个项目的设计与架构有了大致的了解，也让我更加熟练地掌握了Rust语言。同时，这些工作也让我意外地获得了整个BU的第一届代码贡献奖。</p>
<div align=center>
代码贡献奖现场
</div>

<p><img data-src="/images/posts/year_summary_2021/2021-13.jpg"></p>
<p>去年有关技术上的成长大概可以归纳为以下几个方面：</p>
<ul>
<li>入门虚拟化：从只会使用VmWare，到现在开始认真了解虚拟化的原理，阅读KVM源码，并实现了一些VMM的代码</li>
<li>开始学习Linux内核：阅读了一些和虚拟化以及业务相关子模块的部分源码，同时也编写了几个简单的内核模块。特别是在下半年，由于零零散散地参了一些创新项目，所以也开始对Linux运行所依赖的Arch，以及UML有了更多的理解与思考</li>
<li>了解容器生态：当前主要局限于单台节点中，比如runc/kata的实现原理，containerd的工作流程等等</li>
</ul>
<p>在公司里，技术和业务一直都是牢不可分的，所以，我也借着开发这些代码的由头，了解到了当前云原生的发展形势、当前遇到的问题，以及众多业务场景（比如函数计算和弹性容器）。随着这些背景知识的输入，让我对整个云计算行业，特别是云原生业务的发展前景，抱有较为乐观的预期。</p>
<p>此外，还有一个好消息是我们大团队将我们平时所研发的操作系统分支及其上下游组件开源为<a href="https://openanolis.cn/">“龙蜥社区”</a>，而我们小团队所做的项目也会通过<a href="https://github.com/openanolis/">龙蜥社区</a>和<a href="https://github.com/kata-containers/">KataContainers</a>这两个社区将源代码贡献出去。所以，后续应该就会有更多可聊的技术相关的东西了。</p>
<div align=center>
云栖大会中和“小龙人”的合影
</div>

<p><img data-src="/images/posts/year_summary_2021/2021-14.png"></p>
<h1 id="经验-amp-思考"><a href="#经验-amp-思考" class="headerlink" title="经验 &amp; 思考"></a>经验 &amp; 思考</h1><p>经过去年一年的经历，也获得了一些的简单的经验，在这里也将其中一些分享出来。还有一些思考不成体系，略显混乱，就不买弄了，等以后有机会仔细整理，再发出来。</p>
<h2 id="人的精力有限"><a href="#人的精力有限" class="headerlink" title="人的精力有限"></a>人的精力有限</h2><p>可能因为之前比较年轻，所以总觉得无论有多少事情，我总能想办法做完，大不了熬上几个通宵。</p>
<p>但是到了现在，发现自己的精力已经远不如本科时候了，如果晚上熬夜，第二天可能就完全无法正常工作，这样效率可能比晚上好好休息还要低。这才让我真的意识到自己的精力有限，很多看起来很有兴趣，动动手就能做完的事情，其实自己并没有精力去做。</p>
<p>这对于我这样的完美主义者是一个非常大的打击。无限把事情做到完美的代价要么是很多更重要的事情无法完成，要么是自己的健康受到损害，而且甚至牺牲了这两者还是无法把你最想做的事情做到最好。</p>
<p>在痛苦地挣扎了一段时间后，我还是向规律妥协了：把做事的目的逐渐由把事情做完美变成了把事情做成。我发现影响一件事情成败的关键点只有几个，剩下都是锦上添花，因此做事情不能贪多，需要将它们的优先级进行排序，先做优先级高的，再做优先级低的，虽然有些优先级低的事情做完会让整体更加完美，但是你如果没有精力顾及这么多，那也只能放弃。</p>
<p>另外，虽然个人的精力有限，但是人多力量大呀。如果能把多个人的力量集合起来，就能完成超出个人能力的更大的事情。不过如何利用别人的力量一起完成一件事情，我暂时还没有特别成功的经验可以分享。</p>
<h2 id="小事快速决策"><a href="#小事快速决策" class="headerlink" title="小事快速决策"></a>小事快速决策</h2><p>一定有很多人像我一样，是比较纠结的性格，做决策时总是考虑再三，一直无法得到一个明确的结论。这在一般时候不会表现出什么问题，但如果面临的决策非常多，那么做决策这件事儿将会是时间地狱和精力黑洞。</p>
<p>举一个在工作中常见的例子：在开发一个模块的时候，虽然架构设计已经确定了，但在真正编码的时候依旧经常会面临怎么写比较好这个问题，比如大到一个消息通知机制应该怎么设计，小到这个变量应该叫什么名字。不知道大家会怎么样，我经常会为了这些事情纠结很久，甚至把每种方案都写一遍，看看哪个更好。但最终往往只有两种情况：要么是它不重要，怎么写都可以，要么是只有其中一个设计比较好，但是需要写完后面的代码你才会知道，现在纠结并没有什么作用，甚至可能纠结很久，还是会选择一条错误的道路。</p>
<p>因此，在当前决策对未来事情发展影响比较小的情况下，快速决策快速做选择快速试错才是比较优的策略，如果一味纠结，不仅会浪费很多时间，而且往往也不会增大把事情做对的概率。所以，纠结症患者不如放下心中的纠结，闷着头随便选一个，省时还省力。</p>
<p>不过上面的方法并不适用于重要事情的决策。因为重要事情决策可能会对后面产生重大影响，哪怕成功率只提高一点，也会有很大的价值。而决策的关键的是收集和整理信息，如果只顾着快，而忽略了很多有用的信息或没挖掘到信息中比较重要的点，导致决策出现失误，这就得不偿失了。</p>
<h2 id="合理预估时间"><a href="#合理预估时间" class="headerlink" title="合理预估时间"></a>合理预估时间</h2><p>在多人协作时，每个人的工作可能多少都会依赖别人的工作，而为了便于将每个人的工作进行组合，管理者一般会采用排期的形式把控项目的进度。所以，在工作中，就总会有人问你：你觉得这个事情多久能够完成？</p>
<p>但从个人的角度来看，面对一个稍微复杂一些的事情：</p>
<ul>
<li>总是需要较长的时间完成</li>
<li>往往中间会因为吃饭/睡觉/开会/有其他更紧急事情等多种原因被分割成多段，保存/恢复工作状态需要消耗意志力和时间</li>
<li>事情完成的过程中几乎必然会出现许多意料之外的情况</li>
<li>因为事情紧急，为了督促自己尽快完成，可能会预估一个比较早的时间</li>
<li>人们的思考模式也决定了我们往往对一个事情的预估是偏乐观的</li>
</ul>
<p> 所以，这最终会导致个人对一件事情完成时间的预估是比较乐观的，在deadline之前一段时间往往会拼命去赶，就这样还不一定可以做完，导致延期，而且还可能会由于个人的延期导致项目节奏被打乱，从而导致项目的延期。</p>
<p> 虽说项目规划者有责任考虑到这些原因，但作为参与人，也有必要对项目完成的时间进行较为合理的评估。目前，就个人经验看来，一件事情完成的时间往往是自己脑中认为可以完成的时间再增加50%以上。因此，在需要精确项目时间的时候，我们可以通过将预估完成时间直接*2的方法来为自己保留合理的裕度。</p>
<h1 id="新年OKR"><a href="#新年OKR" class="headerlink" title="新年OKR"></a>新年OKR</h1><p>去年，直接用几条flag表达了对新的一年的期望，由于没有合理的checkpoint与拆分，导致很多都没有完成，今年我认为需要改变策略，用用新的OKR工具做做试验，看看是否能让自己真正动起来，将目标的完成率提高。</p>
<p>下面，就将今年的一些OKR列出来，不过使用博客跟踪OKR的效率肯定不高，所以后续会尝试配合一些跟踪目标的软件一起使用。</p>
<h2 id="Object1：生活健康自律"><a href="#Object1：生活健康自律" class="headerlink" title="Object1：生活健康自律"></a>Object1：生活健康自律</h2><p>健康的身体是一切的前提，所以我希望将身体健康，生活自律放在OKR的第一位</p>
<h3 id="KR1-早睡觉，不熬夜"><a href="#KR1-早睡觉，不熬夜" class="headerlink" title="KR1: 早睡觉，不熬夜"></a>KR1: 早睡觉，不熬夜</h3><p>睡眠质量对身体健康和工作效率都十分关键，因此早睡早起是必须要做到的目标。</p>
<p>由于之前都睡得比较晚，睡眠时间需要慢慢调整，所以将晚睡定义为在凌晨12:40之后上床睡觉</p>
<p>非特殊情况，每周最多有一天晚睡/熬夜</p>
<h3 id="KR2：坚持锻炼"><a href="#KR2：坚持锻炼" class="headerlink" title="KR2：坚持锻炼"></a>KR2：坚持锻炼</h3><p>由于每天的工作都是对着电脑久坐，因此必须要让自己有时间动起来</p>
<p>锻炼以一定强度的有氧运动为主，且不能过于剧烈，可选的方案：慢跑、球类运动、骑行、爬山、跳绳等，时长以30分钟以上为宜</p>
<p>在三月份气温回暖后，非特殊情况（如生病/出门在外等）每周至少进行三次锻炼活动，三月份之前，每周至少两次</p>
<h3 id="KR3：健康饮食、控制体重"><a href="#KR3：健康饮食、控制体重" class="headerlink" title="KR3：健康饮食、控制体重"></a>KR3：健康饮食、控制体重</h3><p>饮食对身体健康的影响也十分显著，体重亦是如此，因此需要进行合理的安排</p>
<p>饮食目前没找到太好的定量约束方案，就限定一下吃饭速度吧，如果有一同吃饭的人，不能吃的比所有人都快</p>
<p>体重比较方便定量，在3月份气温回暖后，逐渐将体重控制在70KG（±3KG）</p>
<h2 id="Object2：知识的输入和输出"><a href="#Object2：知识的输入和输出" class="headerlink" title="Object2：知识的输入和输出"></a>Object2：知识的输入和输出</h2><h3 id="KR1：阅读原版书籍"><a href="#KR1：阅读原版书籍" class="headerlink" title="KR1：阅读原版书籍"></a>KR1：阅读原版书籍</h3><p>只有阅读一手知识才能让自己真正理解知识，通过看视频/读别人的笔记获得知识的速度虽然快，但是可能会忽略掉其中的许多细节</p>
<p>能增长知识的书籍分为两种：技术书籍和人文社科书籍，它们的阅读方式和收获也是不同的，因此单独制定计划：</p>
<p>技术书籍两本：</p>
<ul>
<li>计算机体系结构——量化研究方法</li>
<li>暂定</li>
</ul>
<p>人文社科书籍五本：</p>
<ul>
<li>八次危机</li>
<li>暂定</li>
</ul>
<p>另外，暂定每周有五天时间每天阅读半小时</p>
<h3 id="KR2：学习优秀源码"><a href="#KR2：学习优秀源码" class="headerlink" title="KR2：学习优秀源码"></a>KR2：学习优秀源码</h3><p>精读优秀的源代码和原版书籍一样重要，需要仔细阅读，暂定两个虚拟化的项目，后面再做补充</p>
<ul>
<li>KVM</li>
<li>QEMU</li>
</ul>
<h1 id="KR3：输出内容"><a href="#KR3：输出内容" class="headerlink" title="KR3：输出内容"></a>KR3：输出内容</h1><p>在阅读完别人的内容或者自己进行一些实践活动之后，如果不及时总结，可能会导致没有彻底理解，而总结的最好方式就是输出一篇较长的文章，既锻炼逻辑思维，也提升写作能力，因此暂定一年输出五篇文章</p>
<h2 id="Object3：其他目标"><a href="#Object3：其他目标" class="headerlink" title="Object3：其他目标"></a>Object3：其他目标</h2><p>除了主要方向外，还有一些其他的目标，暂时只列陪伴家人，后续再做补充</p>
<h3 id="KR1：陪伴家人"><a href="#KR1：陪伴家人" class="headerlink" title="KR1：陪伴家人"></a>KR1：陪伴家人</h3><p>陪伴家人的目标去年执行得不错，今年要继续保持</p>
<ul>
<li>每周和家人电话</li>
<li>逢年过节没有疫情的情况下回家</li>
</ul>
<h1 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h1><p>最后，就以前几天自己做的一个梦作为博客的结尾吧：不知何年何月何日，乘坐一架很大的宽体客机回家，但是飞到大约三分之二的地方，飞机突然失控坠向地面，好在紧急迫降成功，降落在了一个不知名的地方。这里到处都是荒漠，还有一些居民，只有天边模模糊糊可以看见草原。手机导航没有坏，它告诉我没有别的交通方式，只有步行导航，而且需要走很久很久才能到家。我也找了一圈，也的确没有看见其他的交通工具。许多乘客都因要很久才能到目的地而选择在这个荒漠小城留下，看情况再决定是否出发，但是我在找附近的居民买了一些馕作为干粮后，马上就出发了。</p>
<p>能不能走出荒漠，我不知道，至于能不能走回家，就更不知道了。但是梦中的我做出了坚决的选择：不要在意这些，走下去，马上出发！</p>
]]></content>
      <categories>
        <category>随笔</category>
        <category>年终总结</category>
      </categories>
      <tags>
        <tag>年终总结</tag>
      </tags>
  </entry>
  <entry>
    <title>译文——P4虚拟化数据平面</title>
    <url>/translate_dataplane_virtualization_with_p4/</url>
    <content><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>现在SDN已经有了在数据平面的编程能力，这使得网络设备（包括硬件）可以被重新编程以解析自己定制的协议和执行定制的功能。 </p>
<p>但是，数据平面的编程能力还没有发挥最大的潜能，它依旧不完善，而且在不断增长的软硬件中提供可编程能力是有很大形成碎片的风险。如果使用虚拟化方案可以解决以上两个问题。 </p>
<p><img data-src="/wp-content/uploads/2017/04/200a1633ec0f73c741ff0c7d4f371565.jpg">  </p>
<p>OpenFlow已经为网络的控制平面提供了一个标准的可编程能力，并且在网络管理者寻找更加的自由和灵活的方案候起了重要的作用。 </p>
<p>但是，它并没有使的数据平面有良好的可编程能力，数据平面依旧只能使用在OpenFlow的协议规范中被定义好的协议。如果OpenFlow需要支持较新的方案，那么OpenFlow的规范就要一直被扩展。 </p>
<p>一个真正的数据平面按应该不被这些束缚，它应该允许管理员重新配置数据平面以完全适应自己定制的协议中的语法和语义。最近在可重配置的匹配表（reconfigurable match table，RMT）中的工作在体系结构上已经证明了可编程数据平面，即使在ASIC的硬件中也是可行的。 </p>
<p>这个结果使得像P4这样的领域专用语言使得这些可编程数据平面可简单地以一个统一的方式在多种交换机上部署（比如基于RMT的ASIC、FPGA为基础的交换机、像PISCES一样的软件交换机、behavior model和在边缘服务器上的网络数据平面）。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>一般来讲，每一个P4兼容设备提供的可编程数据平面表示一种网络环境。 </p>
<p>每一个P4的程序定义了：</p>
<ul>
<li>  在流量被解析时的协议头的集合和与之相符合状态机</li>
<li>  在流量被处理时的匹配-执行表</li>
</ul>
<p>为了支持不同的客户的类型和为复杂的包处理而灵活地组成虚拟方法，在多数情况下，操作者希望给定的网络设备可以有不止一个环境，即使只有一个物理的数据平面。 </p>
<span id="more"></span>

<p>一个解决方法就是虚拟化。虚拟化可以虚拟出多个数据平面并且使用时会比多个设备更加流畅和方便。比如，借助虚拟化，我么可以同时在备上通过不同的配置部署多个网络功能，它允许：</p>
<ul>
<li>  网络切片：隔离一些客户或者设备，这使得网络更加的现代和安全。每一个切面（也就是每一个网络环境）可以因为支持协议类型和功能的不同而完全不同。</li>
<li>  网络快照：当一个配置每次到达的时候，存储多个网络或者设备的配置，并且提供配置之间的快速切换。</li>
<li>设备内部的虚拟网络，提供了针对以下两者的解决方案：<ul>
<li>  包处理程序的复杂模块设计，支持模块化开发</li>
<li>  在交换机上支持多用户，并且使用可控的方法为他们提供服务</li>
</ul>
</li>
<li>  提供标准的高层功能，比如程序分析，流量监控和其他功能</li>
</ul>
<p>这些环境都需要隔离机来制止一个程序对另一个程序产生的威胁并保护设备避免其潜在危险的程序的威胁。 </p>
<p>使用虚拟化，可以使得物理上单一的数据平面支持逻辑上的多种网络环境。那么，是不是可以有一种使用纯P4语言实现的通用虚拟化框架呢？如何使用一个用户级别的程序来实现虚拟化？是否可以使用一个特殊设计的具有模拟其他P4程序的能力的P4程序？ </p>
<p>这样可以动态地支持虚拟化，而且可以在不中断现有的网络设备的情况下部署和重新配置，它具有很强的便携性。 </p>
<p>HyPer4使用软件的方式拓展了P4语言，使得支持P4语言的设备可以具有如下功能：</p>
<ul>
<li>  可以在逻辑上存储多个P4程序并且同时运行它们（作为网络切片）或者热切换的快照</li>
<li>  在每一个程序之间可以形成一个虚拟网络（支持程序不同部分和或者多租户服务交互）</li>
<li>  HyPer4可以在运行时修改程序集和改变他们的虚拟网络连接而不用中断现在正在运行的程序。</li>
<li>  可以兼容ASCI的硬件。</li>
</ul>
<h1 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h1><h2 id="P4语言运行环境简介"><a href="#P4语言运行环境简介" class="headerlink" title="P4语言运行环境简介"></a>P4语言运行环境简介</h2><p><a href="/wp-content/uploads/2017/04/4b417aa6e68d2cc0b536f67705ecd7ac.png"><img data-src="/wp-content/uploads/2017/04/4b417aa6e68d2cc0b536f67705ecd7ac.png"></a> </p>
<p>上图描述了典型P4程序的编译过程，它分为两步：</p>
<ol>
<li> 前端编译器将P4源代码编译为高级中间表示（high-level intermediate representation, HLIR）</li>
<li> 后端编译器将HLIR转换为特定目标设备的形式（比如JSON或者二进制代码）。 比如现在P4编译器后端提供了p4c-bmv2，它会将HLIR转化为Barefoot Network的bmv2软件交换机可以使用的JSON文件；SDNet可以将其编译至Xininx FPGA的代码；LLVM_P4和P4-to-EBPF可以将其转换为Linux网络平面使用的EBPF程序。</li>
</ol>
<p><a href="/wp-content/uploads/2017/04/a99988c3ff3d71a695285db1b013bc2a.png"><img data-src="/wp-content/uploads/2017/04/a99988c3ff3d71a695285db1b013bc2a.png"></a> </p>
<p>上图左边部分描述了P4设备开始配置的过程。首先，用户会编译P4的代码，然后将二进制代码（或者其等价形式）装载进P4兼容的设备中。 </p>
<p>上图右边部分描述了在二进制代码被装在进入P4设备后，设备就可以在运行时接受和代码兼容的控制器的指令。</p>
<h2 id="HyPer4运行环境"><a href="#HyPer4运行环境" class="headerlink" title="HyPer4运行环境"></a>HyPer4运行环境</h2><p><a href="/wp-content/uploads/2017/04/3cce2c00c7a205476c1a7b9571801833.png"><img data-src="/wp-content/uploads/2017/04/3cce2c00c7a205476c1a7b9571801833.png"></a> 上图分为三部分：</p>
<ol>
<li> 左边部分演示了使用HyPer4环境部署和载入foo.p4代码的过程，和原生P4环境一样，在P4设备中生成了一个HyPer4的运行时环境，但是这时的运行时环境只是具有执行的能力，并没有可执行的表。</li>
<li> 中间部分展示了如何将普通的P4程序通过HyPer4编译器编译为实体表然后载入运行时环境。</li>
<li> 右边部分展示了为了不修改现有的控制器，HyPer4使用了一个数据平面管理单元（Data Plane Mangagement Unit, DPMU）来作为控制器和交换机之间的代理。它可以将对于原有P4代码的虚拟表的操作转换为HyPer4表的操作。</li>
</ol>
<h1 id="几个例子"><a href="#几个例子" class="headerlink" title="几个例子"></a>几个例子</h1><p>已实现的代码片段</p>
<ul>
<li>  一个二层以太网交换机</li>
<li>  一个IPv4路由器</li>
<li>  一个代表交换机上的IPv4主机回复ARP请求的ARP代理</li>
<li>  一个可以过滤IPv4、TCP和UDP源和目的的防火墙</li>
</ul>
<p>使用这几个简单的P4代码片段，有以下三个例子来说明可编程数据平面</p>
<h2 id="快照和简单地模块化"><a href="#快照和简单地模块化" class="headerlink" title="快照和简单地模块化"></a>快照和简单地模块化</h2><p><a href="/wp-content/uploads/2017/04/4f5df35aa5b423d6c4103401a3199db5.png"><img data-src="/wp-content/uploads/2017/04/4f5df35aa5b423d6c4103401a3199db5.png"></a> </p>
<p>上图是一个网络快照和模块化的示例。这个网络包含三个已经连接的P4设备：s1、s2和s3，每一个设备上都在运行HyPer4程序。两个主机h1、h2和s1连接，另外两个主机h3、h4和s3连接。 </p>
<p>最开始，HyPer4的表项是空的，而且设备被分为不同的功能。我们接着将HyPer的表实体下发给每个设备，使得每个设备逻辑上存储了所有的程序，这三个程序可以通过网络配置进行切换。 </p>
<p>在开始的配置中，s1和s3分别运行arp代理，s2运行二层交换。在上图的s1和s3中，虚线框中的A代表arp代理功能，在s2中，虚线框中的A代表二层交换功能。 </p>
<p>在第二个配置中，s1和s3都运行二层交换，s2运行防火墙。这些功能都被标记为B。 </p>
<p>在第三个配置中，s1和s3都运行了和第二个配置一样的二层交换，s2运行了一个复合的程序，这些被标记为C。当流量第一次到达s2的时候，首先被arp代理处理，然后其他的流量会被传送到s2中的下一个虚拟功能——一个防火墙。并且任何可以通过防火墙的流量都会被一个路由应用处理。 </p>
<p>同时，每个虚拟功能的流表也会被下发给每一个运行HyPer4的设备：</p>
<ul>
<li>  二层交换机的MAC和目的端口对</li>
<li>  arp代理的IPv4和MAC对</li>
<li>  路由器的IPv4目的地址和下一跳IP和MAC地址对</li>
<li>  防火墙对于TCP特定端口的过滤规则</li>
</ul>
<p>每次在一台设备中只有一个配置被激活。切换配置的时候需要控制器发送一个流表项。</p>
<h2 id="网络切片和模块化"><a href="#网络切片和模块化" class="headerlink" title="网络切片和模块化"></a>网络切片和模块化</h2><p><a href="/wp-content/uploads/2017/04/532cbd33d406c7db338d63ad47096bae.png"><img data-src="/wp-content/uploads/2017/04/532cbd33d406c7db338d63ad47096bae.png"></a> </p>
<p>上图描述了一个运行HyPer4的P4设备s1和4个连接它主机h1、h2、h3、h4。 </p>
<p>s3、s4的IP地址和子网掩码已经被设置，所以他们在不同的逻辑网络内。 </p>
<p>使用HyPer4来将s1进行切片，使得连接h1和h2的端口1和2被分配到一个逻辑设备，连接h3和h4的端口3和4被分配到另一个逻辑设备。 </p>
<p>在一开始，s1中HyPer4的表项是空的，并且s1已经被分为许多功能。 </p>
<p>然后给HyPer4下流表，使得s1逻辑上存储三个程序：</p>
<ul>
<li>  在1和2端口上的流量被一个二层交换机处理</li>
<li>  在4和3端口上的流量首先被一个防火墙处理，然后通过防火墙的流量被一个路由器处理</li>
</ul>
<p>同时，也需要针对二层交换机（MAC地址和出端口对），防火墙（过滤TCP特定端口的流量）和路由器（IPv4目的地址和下一跳IP和MAC地址对）下流表。</p>
<h2 id="虚拟网络"><a href="#虚拟网络" class="headerlink" title="虚拟网络"></a>虚拟网络</h2><p><a href="/wp-content/uploads/2017/04/a9df91177d61c0229967ea447fcad429.png"><img data-src="/wp-content/uploads/2017/04/a9df91177d61c0229967ea447fcad429.png"></a> </p>
<p>上图描述了虚拟设备间的虚拟网络。这个网络包含了一个有h1、h2、h3、h4四个主机连接的单一的P4设备s1。每个主机都被分配到了不同的网络。 </p>
<p>在S1上被载入了8段程序，创立了8个虚拟设备：</p>
<ul>
<li>  在h1上的一个路由器r1和一个防火墙f1</li>
<li>  在h2上的一个路由器r2和一个防火墙f2</li>
<li>  在h3上的一个路由器r3</li>
<li>  在h4上的一个路由器r4</li>
<li>  连接内部网络的两个二层交换机l2_s1和l2_s2</li>
</ul>
<p>当为每一个设备下流表以后，这个示例演示了如何使得s1通过HyPer4支持希望为每个人服务但是又需要有安全控制的多租户方案。</p>
<h1 id="HyPer4系统的设计"><a href="#HyPer4系统的设计" class="headerlink" title="HyPer4系统的设计"></a>HyPer4系统的设计</h1><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>在高层上来看，HyPer4具有一个运行环境，一个编译器和一个数据平面管理单元（data plane management unit，DPMU）。 一个P4程序定义了包处理的结构。当执行的时候，以匹配表形式出现的运行时状态（可随时改变）会影响一个包会如何被包处理结构处理。 </p>
<p>Hyper4定义了一个足够通用的结构，这个结构可以允许状态以任意的途径改变，并影响数据包处理的流程。 </p>
<p><a href="/wp-content/uploads/2017/04/0a78f120fe9804e23c512a79c9e6fe43.png"><img data-src="/wp-content/uploads/2017/04/0a78f120fe9804e23c512a79c9e6fe43.png"></a> </p>
<p>上图描述了HyPer4运行环境的概览。 </p>
<p>HyPer4分为三个阶段</p>
<ol>
<li> 解析和设置阶段接受数据包并且使用一个模拟的P4程序来为将数据包设置为一个明确的HyPer4状态</li>
<li> HyPer4模拟了目标程序的匹配-执行状态序列</li>
<li> egress阶段处理任意的egress专有的的原始操作并且准备传输</li>
</ol>
<h3 id="可编程的解析器"><a href="#可编程的解析器" class="headerlink" title="可编程的解析器"></a>可编程的解析器</h3><p>运行环境必须可以解析在包中匹配到的任意字节的数据，它通过遍历一棵分析树来达到这个目的。在一棵树中每一个节点解析整体需求的一部分需要并且在一个元数据分支上的字段<code>numbytes_to_extract</code>存储这些需求。 </p>
<p>框架在ingres pipeline的设置阶段设置了解析器的一些属性，如果需要，它会将包返回至ingress pipeline。 </p>
<p>特别地，<code>numbytes_to_extract</code>依赖于虚拟设备以及和它有关的包。 </p>
<p>框架也使用了P4的resubmit操作来使得包被重新送回解析器（如果需要的话）。 </p>
<p>resubmit操作非常强大，因为可以将需要保留他们的值的字段列表传给它（比如<code>numbytes_to_extract</code>）。最终，解析器提取了一个字节栈，resubmit的操作可以在一个包含一个虚拟设备可能需要处理的许多包头的包上被重复调用多次。</p>
<h3 id="字段描述"><a href="#字段描述" class="headerlink" title="字段描述"></a>字段描述</h3><p>框架使用了非常广泛的元数据字段来表示虚拟设备需要使用的字段列表。 框架也定义了一个逻辑上存储所有被从包中解析出的数据（被解析器解析出的字节栈）的字段，并且另一个字段会被用来表示虚拟设备中所有的元数据字段。</p>
<h3 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h3><p>任意的P4程序匹配任意的字段。HyPer4的任务是以将一个大的源数据字段的相关部分隔离开的方法支持任意的字段，并将其用以表示一个P4程序的被定义好的字段。 </p>
<p>HyPer4使用了非常多的P4的三元组匹配机制对这种模式进行支持，它允许在匹配值的时候一同提供表中匹配实体和掩码，这些掩码被用于在和匹配的数据比较之前确定匹配的区域。</p>
<h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><p>匹配在P4程序中会触发可能是复杂的原始操作集合的执行过程。 </p>
<p>HyPer4为每一个支持的P4原始操作提供了一套共同执行需要的行为的表。 </p>
<p>简单来说，框架使用了一个元数据字段的集合在每个包处理阶段的必要时重定向HyPer4的控制流。 </p>
<p>各种HyPer4中不同的匹配-执行阶段会读取（匹配），写入，或者读写这些元数据字段。 </p>
<p>用提供这些表的实体来确定被用于读取或者写入这些确定的值，使得操作者可以调用相关HyPer4提供的需要执行任意行为的方法。</p>
<h3 id="虚拟网络-1"><a href="#虚拟网络-1" class="headerlink" title="虚拟网络"></a>虚拟网络</h3><p>HyPer4依赖P4的recirculate原始操作将包从一个设备传送到另一个设备。这个操作会在完成egress pipeline以后标记一个会被重新发回的包。 </p>
<p>它允许将一个字段列表作为参数传入。当包重新在解析器出现的时候，这个列表里所有的字段将会保持它原有的值。 </p>
<p>HyPer4结构依赖于一般的匹配-执行阶段的概念。HyPer4的状态可以决定应该进行哪一种匹配操作和进行每一种原始操作的参数。为了模拟其他的P4程序，HyPer4需要根据被仿真的目的程序改变HyPer4的状态，进而将其被转换成对于表的操作。 </p>
<p>通过将P4程序表示成状态，HyPer4可以支持P4程序的实时更新。</p>
<h2 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h2><p>P4程序解析器的规则是将一个包前N比特的结构鉴别为一系列具有相关标签的比特字段。这些被打标签的比特字段也可以被称为一个包的“Parsered Representation（被解析的表示）”。 </p>
<p>程序员定义了包头的类型，其中指出了名字、宽度和在比特区域中的位置，并且还声明了当解析包中比特的时候这些类型所定义的包实例。 </p>
<p>为了解析一个包头，要做的是添加根据包的类型被结构化和命名的一个比特域的集合，并将其转变为Parsered Representation。 </p>
<p>解析器决定那些包头应该被解析的方法是根据包中的数据或者元数据中一些字段的数据标记解析图的分支。 </p>
<p>HyPer4必须用可以在运行时重新配置的方法来解析足够数量的的数据来达到模拟其他P4程序的需求。 </p>
<p>框架定义了一个有一字节宽度单一字段的包头类型，并且声明了一个这个类型的数组来适应从包中解析出的变化的字节长度。 </p>
<p>同时，框架也定义了一个元数据字段（比如<code>numbytes_to_extract</code>）。 </p>
<p>一旦收到了一个包，解析器会验证这些字段。 </p>
<p>数值为0表明它还没有为引导解析过程做好准备。在这种情况下，一个默认长度的字节会被解析（一般来说是20字节），并且控制流被重定向到一个初始化方法中去（上图的setup -a环节），如果有必要，它会更新<code>numbytes_to_extract</code>并且将包重新提交。被重新提交的包会重新回到解析器，但是这次<code>numbytes_to_extract</code>是一个有意义的值。 </p>
<p>HyPer4遍历了在这个区域的解析树中可以解析的每个部分的分支。 </p>
<p>在完成解析以后，HyPer4将所有被解析的字节连接到一起。在整个剩下的处理流程中，框架使用一个非常大的元数据字段来表示这些被解析的字段。 </p>
<p>设置函数（上图的setup -b）接着配置包处理的流程。 </p>
<p>特别地，这个函数设置一个指示了被仿真的程序在HyPer4中可能需要执行的元数据字段。 </p>
<p>它也设置了另一个字段去表明哪一个表应该是最初被执行的（根据被模拟的程序中匹配到的类别的匹配-执行阶段），并将其作为HyPer4的匹配-执行阶段。</p>
<h2 id="匹配-执行"><a href="#匹配-执行" class="headerlink" title="匹配-执行"></a>匹配-执行</h2><p>每一个被模拟的匹配-执行阶段都需要一些HyPer4的表：一个去执行匹配，另外三个元操作的表去执行相应的表匹配功能。 </p>
<p>为了执行匹配，框架定义了一个匹配类型（精确匹配，三元组匹配，验证有效性）的所有组合和每个阶段所有数据类型的表。 </p>
<p>HyPer4使用元数据的<code>next_table</code>的字段中进行分支（在初始化设置阶段或者在在上述的匹配-执行过程的结尾设置）。通过这个设置，程序将会执行正确的表。 </p>
<p>精确匹配而不是解析包中的数据是一种匹配类型，在这种情况下，HyPer4使用一个三元组而非单一数据匹配，使用一个非常宽的字段来表示提取出的数据包。 </p>
<p>三元组匹配在分离这个字段中和匹配有关的比特时非常有用（比如去鉴别在<code>foo.p4</code>中被定义的哪个字段参与了匹配）。 </p>
<p>一般来讲，三元组匹配帮助模拟许多匹配类型而不是许多数据类型，因为它允许在运行时表项提供比特掩码（尽管它在TCAM单元中的能耗会很显著）。 </p>
<p>在每一种情况下，一个匹配触发一个动作，并设置各种元数据字段。这些字段一定会有一个到达控制函数的分支来表达第一个被模拟的过程的原始操作。 </p>
<p>执行一个原始操作包含了至少三个表，一个设置原始操作的阶段，另一个执行原始操作，最后一个进行状态包含了表明HyPer4的操作（以及匹配-执行阶段）是否完成，或者更多的原始操作需要被执行。</p>
<h2 id="逆解析"><a href="#逆解析" class="headerlink" title="逆解析"></a>逆解析</h2><p>在P4中，在整个包处理的过程中都可能会改变这个包的被解析后的表示，不仅包括包头字段的值，也包括这个包本身的结构（这个包的包头可能会被删除或添加）。因此，为了鉴别出来序列的头部，然后序列化进行传输，逆解析是一个必须的步骤。 </p>
<p>但是逆解析器在P4的代码中并没有出现，而是将一个具有特殊构建的解析器反过来当作逆解析器。 </p>
<p>因为HyPer4在整个包处理的过程中使用了一个元数据字段当作Parsered Representation的代理，所以在最后egress pipeline的过程中，必须将Parsered Representation进行回写成原来的形式为包的逆解析作准备。 </p>
<p>Parsered Representation包含了一个单字节的包头的栈，所以这个准备过程包含了重复的为代理的元数据字段加掩码的过程，将最低位的字节拷贝到栈中的下一个头部，并且将其余数据字段向右移位一个字节。</p>
<h2 id="隔离"><a href="#隔离" class="headerlink" title="隔离"></a>隔离</h2><p>在现在框架的设计中将每个程序分离，它保护了一个程序的代码不被另一个程序重写。现在框架也支持内存的隔离。 </p>
<p>代码隔离是在编译的时候给每一个程序指派一个独立的标识数来解决的（它可以是P4代码的哈希值或者是在编译器下载程序的时候人为决定）。 </p>
<p>当收到一个包的时候，一些操作者可以控制的条件（比如进入端口，时间，网络安全状态或者一个包中包含的值）确定哪个程序应该去处理它，相应的元数据字段会被设置成为相应的程序ID。 </p>
<p>这个字段是每一个环境中的匹配-执行的模拟表的匹配字段之一，并且它也在相同的共享的物理表中将一个程序的表项同另一个程序分离开。 </p>
<p>框架将一个模拟的程序看作一个虚拟设备。这个程序的ID在功能上很类似于VLAN ID，尽管分配一个程序ID的机制会更加的灵活。 </p>
<p>DPMU监视器需要给虚拟设备添加表项并且确保对于请求者所请求的程序ID是被许可的。 </p>
<p>同时，DPMU可以强行限制每个虚拟设备可用的表项的数量，部分地协助完成内存隔离。另外内存隔离的需求使用一个内存状态对象（计数器，量表和寄存器）作为协助。 </p>
<p>HyPer4设计要求预分配这些对象，这些对象中的设置的数量要和虚拟设备中的数量是相等的。这是HyPer4一起将这些集合分配给虚拟设备时的规则。 </p>
<p>CPU隔离在这里的意义是没有程序执行的动作不能在一个时钟周期中被完成。如果一个虚拟设备的操作没有满足上述要求，那么任何一个超时的包处理都会被停止，并且它后面的包也都会被延迟处理（可能会属于其他的虚拟设备）。但是现在的版本还没有实现这个功能。 </p>
<p>输入缓存区是另一个可能使得虚拟设备之间的连接产生干扰的资源。在现在的系统设计中，一个虚拟设备可能使用原始操作重复触发把包发回给输入缓存的操作。这就可能使得其他的包无法进入缓存区。其他的包可能来自于外部的链接或者内部其他设备或者同样是被回发的操作。 </p>
<p>一个解决这个问题的办法是提供一个阈值，如果进入输入缓存区的次数超过阈值，则这个包将会被丢弃。</p>
<h2 id="虚拟网络-2"><a href="#虚拟网络-2" class="headerlink" title="虚拟网络"></a>虚拟网络</h2><p>HyPer4被设计用于在环境中控制虚拟设备间的流量交换的虚拟网络。 </p>
<p>框架创建带有唯一ID的虚拟端口并且将它分配给虚拟设备。这些虚拟端口可以被直接映射到物理端口上面，也可以将他们连接到另一端也是另一个虚拟设备的虚拟链路。 </p>
<p>对于确定发送到其他虚拟设备的包，HyPer4在改变其程序ID以后使用<code>recirculate</code>的原始操作将其发送回解析器。 </p>
<p>框架使用P4的<code>clone</code>和<code>recirculate</code>支持了虚拟多播。简要地说，程序的ID根据可编程的队列更新.接着一个包的复制被送去解析器并且最终被相关联的设备处理。其他的复制被送到egress pipeline的起始处，程序ID用作循环计数器，并且一旦到达多播序列的末尾，就会触发分组丢弃。</p>
<h2 id="设计结果"><a href="#设计结果" class="headerlink" title="设计结果"></a>设计结果</h2><ol>
<li> HyPer4使用三元组匹配来模拟各种的匹配类型而不是任意的数据字段，增加了TCAM的压力。这导致了能耗的增加以及在当前硬件上HyPer4的潜在TCAM障碍。</li>
<li> 为了使得HyPer4可以来模拟来自一个行为集合中任意最大长度为K的的序列的行为，框架源代码必须声明K个执行从集合中给定的行为的表的复制。这是因为P4限制了在处理一个特定的包的时候使用一个表超过一次。P4的这种设计选择对于兼容硬件体系结构（由于物理写入约束和数据包处理算法对于顺序的依赖而选择使用在一条管道里面使用连接表而非使用纵横开关，比如RMT）来说是明智的，</li>
<li> 使用重新提交原始操作来允许动态可编程解析器来减少吞吐量。HyPer4可以避免这些的P4设备重复的的重新提交直到到达某个最大的数目导致不再有空间可用的解析器异常。有趣的是，协议透明转发和P4不同，它有一种根据需求解析的机制，也可以消除HyPer4对于重新提交的需要。虚拟网络的recirculation也引起了吞吐量的损失，但是这是把一个物理设备虚拟成多个设备的自然结果。</li>
<li> HyPer4可以发送时间上完全不同于它有效接收的数据包，而标准的P4程序通常不是这样的。P4通过使用.p4代码中的解析器函数执行的相同的路径表示和剩余的数据包序列化解析的表示。这样做的结果就是P4程序只能发送和它能解析的结构一致的包。但是HyPer4将大多数的解析逻辑放在了ingress pipeline中，并且实际上HyPer4的解析路径简单地以一定长度的字节表达而没有更高层的结构。这样，HyPer4使得传统P4的限制被终结，不论是好是坏。</li>
</ol>
<h1 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h1><p>这个章节提供了关于实践的一些细节，所有的源码都可以在<a href="https://gitlab.flux.utah.edu/hp4/src.git">这个git仓库</a>中访问到。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>HyPer4必须声明一份执行特定行为的表的拷贝，它们只在名字上不同，这样每一份拷贝都可以在一个行为序列的任何一个部分出现。这导致了一个有许多功能上冗余代码和庞大的代码基数。 </p>
<p>比如，在HyPer4的源码中一定可以找到两张表<code>t1_exact_extracted</code>和<code>t2_exact_extracted</code>。他们两个表示相同的含义：精确地匹配而非解析包的数据。 </p>
<p>第一个表在第一个模拟的匹配-执行阶段可以被调用，第二个表是在第二个阶段可以被调用。 </p>
<p>在代码上的这种冗余导致只能使用配置脚本来为HyPer4生成源码。这使得HyPer4的开发变得简单，而且允许根据需求和资源进行定制。可以配置的参数包括：</p>
<ul>
<li>  HyPer4必须能够模拟最大的匹配-执行阶段的最大数量</li>
<li>  每个复合的动作可以执行的最大的原始操作数目</li>
<li>  HyPer4可以解析的比特的默认值，最大值和步进值</li>
</ul>
<p>这些配置脚本（900行Python代码）将P4源码处理成了HyPer4可以执行的代码，它支持4个个模拟的匹配-执行pipeline的阶段而每个行为最多9个原始操作，它也支持5个P4的21个精确的原始操作。这些HyPer4的配置大约有6400行。 </p>
<p><a href="/wp-content/uploads/2017/04/fd2325e07ad0c274e73520406298e0ee.png"><img data-src="/wp-content/uploads/2017/04/fd2325e07ad0c274e73520406298e0ee.png"></a> </p>
<p>上图表示P4代码量是如何随着被模拟的匹配-执行阶段和每个阶段允许的最大原始操作数目的增长而线性增长的。其中图（a）表示整个代码量的增长，（b）关注了需要drop原始操作的代码量，而（c）是有关于<code>modify_field</code>操作的代码量。 </p>
<p>HyPer4目前支持的五个原始操作平均的代码长度从128行（一个阶段和一个原始操作）到539行（五个阶段和九个原始操作）。外拓到16个附加原始操作（在P4中有21个），这个版本的HyPer4支持每个原始操作，除了在上图中的数字外，有超过了2000行（一个阶段和一个原始操作）到8600行（五个阶段和9个原始操作）的代码量。</p>
<h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>HyPer4编译器的开发还在进行中（很可能已经挂了或者闭源？）。 </p>
<p>命令文件包含了所有的bmv2需要的命令，在产生这个文件之前 ，它首先会产生一个人可以阅读的中间文件。在装载后，中间命令文件将会被转化为HyPer4的命令。</p>
<h1 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h1><p>有一些P4的功能还没有被转化到HyPer4中。比如：</p>
<ul>
<li>  有状态的内存（registers，counters，meters）</li>
<li>  匹配类型：最大长度匹配，根据范围匹配</li>
<li>  任意的校验和</li>
<li>  字段列表</li>
<li>  Expression和action profile将不会被转化为HyPer4</li>
</ul>
<h1 id="评价和分析"><a href="#评价和分析" class="headerlink" title="评价和分析"></a>评价和分析</h1><p>这里将所选的原生P4程序和被HyPer4模拟的这些P4程序进行比较。主要比较在执行的阶段匹配-执行表的阶段数目（影响时延），表、数据和动作的空间占用（影响内存）和三元组匹配的宽和频率（影响TCAM和能耗）。</p>
<h2 id="匹配-执行阶段"><a href="#匹配-执行阶段" class="headerlink" title="匹配-执行阶段"></a>匹配-执行阶段</h2><p><a href="/wp-content/uploads/2017/04/d817a91202dc6cd3838831c200b3ac0b.png"><img data-src="/wp-content/uploads/2017/04/d817a91202dc6cd3838831c200b3ac0b.png"></a> </p>
<p>上表显示了HyPer4在匹配-执行阶段数目方面和P4原生代码的比较。 </p>
<p>一般HyPer4需要大约6到7倍的匹配-执行阶段数，而arp代理则需要12倍之多。这是因为arp代理为了创建一个arp回复，这需要9个原始操作，而且这12倍的代价只发生在了收到了arp请求的时候。</p>
<h2 id="空间"><a href="#空间" class="headerlink" title="空间"></a>空间</h2><p><a href="/wp-content/uploads/2017/04/177316123293c19c5b1a01205e3649a1.png"><img data-src="/wp-content/uploads/2017/04/177316123293c19c5b1a01205e3649a1.png"></a> </p>
<p>上图表明了HyPer4在不同的匹配-执行阶段和每一个阶段允许的原始操作数目一定的情况下定义的表的数目。 </p>
<p>这里多数的表没有表项，只是为了达到模拟任意程序的需求而存在。但这些空的表也需要空间开销。 </p>
<p>多数情况下，每一个HyPer4的表之和一个动作相关，但是一些情况下（比如执行<code>modify_field</code>原始操作的表）将达到14个操作。 </p>
<p>以下的实验是在允许HyPer4有4个匹配-执行阶段，每个阶段有9个原始操作并且定义了346个表的情况下完成的。 </p>
<p><a href="/wp-content/uploads/2017/04/0d8d2105cd2d644c269cf387cfc389bf.png"><img data-src="/wp-content/uploads/2017/04/0d8d2105cd2d644c269cf387cfc389bf.png"></a> </p>
<p>上表表示了被不同程序所共享的表的数目。在操作的过程中，如果HyPer4托管了多个程序，那么其中许多表都被共享了。上表对角线上的元素表示每个程序自己拥有的表，因为不是所有的表在给定的程序中都有相同的分支，所以这里表的数目和前面匹配-执行阶段的表格中的数据不同。 </p>
<p><a href="/wp-content/uploads/2017/04/9c4332de9fd14af218d914546d97d2d2.png"><img data-src="/wp-content/uploads/2017/04/9c4332de9fd14af218d914546d97d2d2.png"></a> </p>
<p>上表显示了没有为其他程序共享的表的数目。显然arp_proxy有最多的特定的表。这是因为事实上只有这个程序在它的一个阶段执行过九种原始操作。 </p>
<p>在12种情况中的8种中，程序之间共享了许多表，而不是在每个程序中都使用自己的表。 </p>
<p>表项需要空间来存储，但是灵活性在HyPer4种更加重要，所以每个匹配都涉及解析包中的数据。框架不使用单一的800比特宽的字段，而是每一个匹配实体都需要至少1600比特来存储（800比特存储数据，800比特存储掩码）。类似地，涉及模拟元数据的匹配操作不是针对256位的字段进行，而是每个字段至少需要512个比特。程序的ID也为每个实体的bite开销增加了一些负担。所以一个用于匹配的表的前800比特用于存储包，而后256比特用于存储元数据。</p>
<h2 id="三元组匹配"><a href="#三元组匹配" class="headerlink" title="三元组匹配"></a>三元组匹配</h2><p>对三元组匹配的更多的依赖增加了能耗。 </p>
<p><a href="/wp-content/uploads/2017/04/c179c5311c0999601d656a76fa7024ee.png"><img data-src="/wp-content/uploads/2017/04/c179c5311c0999601d656a76fa7024ee.png"></a> </p>
<p>上表表示了对于每个程序产生最复杂的数据包处理时三元组匹配了多少位。total列包含了不必关心和通配符的比特，active列表示在匹配的过程中积极参与的比特数。最后一列种提供了导致前两列的三元组匹配的数目。</p>
<h2 id="时延和带宽开销"><a href="#时延和带宽开销" class="headerlink" title="时延和带宽开销"></a>时延和带宽开销</h2><p>所有的测试均使用了bmv2软件交换机，并且使用了iperf3和ping flood来完成。 </p>
<p>测试使用的机器是运行了Mininet的Ubuntu14.04虚拟机，虚拟机拥有2.2GHz Intel Core i7-4770HQ的CPU和6.15GB的内存。 </p>
<p><a href="/wp-content/uploads/2017/04/3784614287d07595cd3ac78617427fc8.png"><img data-src="/wp-content/uploads/2017/04/3784614287d07595cd3ac78617427fc8.png"></a> </p>
<p>上表显示了十次测试的平均值和标准差，Hyper4模拟器增加了将近80%的带宽消耗和4倍左右的时延。</p>
<h2 id="在RMT中部署"><a href="#在RMT中部署" class="headerlink" title="在RMT中部署"></a>在RMT中部署</h2><p>决定了运行HyPer4能力的RMT部署细节包括了数据包头向量的长度（这使得每一个匹配-执行阶段可行，并且它既包含了用于元数据的所有比特，也包含了从包中提取的比特），物理匹配执行阶段的数量，以及每一个阶段能匹配的最大比特值。 </p>
<p>RMT支持一个4096比特的包头向量，这达到了HyPer4使用3312比特（800比特的被解析的包数据，256比特的元数据和2256比特的其他开销）配置的要求。其他开销包括支持对分组数据的操纵的临时空间，这影响了关于如何利用可用的剩余分组包头任何决定，无论是从分组中提取更多的字节还是表示更多的元数据。 </p>
<p>RMT在ingress pipeline和其他32个egress pipeline中包含了32个匹配-执行的阶段。在上面的示例中需要最多的匹配-执行阶段的是arp代理，它在ingress pipeline中使用了46个匹配-执行阶段，在egress中使用了两个。 </p>
<p>RMT不能支持这种需求，但是更精确地说，将每个RTM匹配-执行阶段支持的比特数与HyPer4匹配-执行阶段所需要的比特数进行比较，可以了解在哪些情况下需要更多的物理阶段来支持给定的HyPer4匹配-执行阶段。 </p>
<p>RMT阶段在SRAM中支持多达640比特的匹配，在TCAM中同样支持640比特。 </p>
<p>在arp代理的46个输入阶段中，他们中的44个可以被转化为RMT物理阶段。其他的两个阶段涉及对应于80位宽字段的三元组表示提取的分组数据，并且每个需要1600位的TCAM存储器（800位存储值，800位存储掩码）。 </p>
<p>因此，这两个HyPer4阶段的每一个需要三个RMT物理阶段。 </p>
<p>最终总共有51个物理阶段，这比RMT的能力多60％。 </p>
<p>请注意，这不仅将满足arp代理，而且会满足任意组合，包括arp代理和任何更简单的程序。 </p>
<p>将32个egress匹配执行阶段中的19个转移到egress pipeline的RMT的变体可以满足今天的要求。</p>
<h1 id="另外的一些解决方案"><a href="#另外的一些解决方案" class="headerlink" title="另外的一些解决方案"></a>另外的一些解决方案</h1><p>考虑到HyPer4的性能开销较大，所以需要考虑一些替代的方案。</p>
<h2 id="部分虚拟化"><a href="#部分虚拟化" class="headerlink" title="部分虚拟化"></a>部分虚拟化</h2><p><a href="/wp-content/uploads/2017/04/4a34b8cff09ced221da79ac2a2d922db.png"><img data-src="/wp-content/uploads/2017/04/4a34b8cff09ced221da79ac2a2d922db.png"></a> </p>
<p>在对性能需求比较高的硬件上使用HyPer4的全部功能会造成很大的性能开销，所以可以分的地部署HyPer4，使其可以在这些设备中流畅的运行。 </p>
<p>P4编程模型提供了对数据包解析器以及匹配执行表进行编程的机制。对于这些程序元素，虚拟化和直接实现的各种组合以满足各种用例是可能的。 </p>
<p>上图（a）描绘了“完整”虚拟化，每个列运行自己的程序。每个列可以同时处于活动状态（网络分片），并且数据包通过某些标准发送到特定列。 </p>
<p>上图（b）说明了分开的虚拟解析器附加到相同的直接实现的匹配执行pipeline的可能性。 </p>
<p>该pipeline将不会像完全虚拟化解决方案中的pipeline一样动态灵活。可以通过允许运行时可选标准来调用基于哪个数据包头被提取的不同直接实现的功能来提供有限的灵活性。 </p>
<p>相反，如上图（c）所示，单个直接实现的解析器可以将流量传递到不同的虚拟匹配执pipeline。 </p>
<p>这“修复”支持的协议头集，但允许不同的可动态修改的行为作为对这些头部的响应。 </p>
<p>上图（d）表明匹配执行pipeline本身可以部分虚拟化。这对于我们愿意在一层协议栈（可能是L2或L3）中牺牲动态灵活性以满足性能的环境可能是有吸引力的，但在其他层仍然需要动态灵活性。</p>
<h2 id="其他方案"><a href="#其他方案" class="headerlink" title="其他方案"></a>其他方案</h2><ul>
<li>  用于编写P4代码函数的编译器。该工具将产生一个从多个P4项目合并功能的功能。这种方法可提高性能，但不能提供运行时可重构性。</li>
<li>  在应用层下实现虚拟化。这种方法可以提供具有高性能的运行时可重构性，但是需要每个平台特有的非便携式实现。</li>
<li>  将P4程序直接嵌入网络。这种技术需要使用不同的程序加载不同的具有P4能力的交换机，另一个交换机根据将分组标记为属于一个虚拟网络或另一个虚拟网络的标准来选择适当的目标来处理流量。这种方法以额外的交换机为代价提供高性能和运行时可重构性（如果备用硬件可用）的可能性。</li>
</ul>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>本文描述了一个名为HyPer4的P4虚拟化框架的概念、设计、实现和评价。它现在只能模拟P4程序的一小部分。为了使得数据平面虚拟化可以有一个便携式的解决方案，它在性能方面会造成80%到90%的损耗。它有助于运行并模拟网络中的网络功能的复杂组合，并且是一个可以为监视和程序验证功能添加有用的模块的平台。</p>
<h1 id="参考论文"><a href="#参考论文" class="headerlink" title="参考论文"></a>参考论文</h1><blockquote>
<p>David Hancock,Jacobus van der Merwe. HyPer4: Using P4 to Virtualize the Programmable Data Plane. CoNEXT, ACM, 35-19, 2016.</p>
<p><a href="http://dl.acm.org/citation.cfm?id=2999607">HyPer4: Using P4 to Virtualize the Programmable Data Plane</a></p>
</blockquote>
<blockquote>
<p>本文链接：<a href="http://www.sdnlab.com/18939.html">http://www.sdnlab.com/18939.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>译文</category>
        <category>P4</category>
      </categories>
      <tags>
        <tag>P4</tag>
        <tag>数据平面</tag>
        <tag>虚拟化</tag>
      </tags>
  </entry>
</search>
